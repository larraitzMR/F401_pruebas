
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a34  08006a34  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000040  08006a7c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006a7c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150f3  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329e  00000000  00000000  00035163  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00038408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00039188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c00  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e10f  00000000  00000000  000539b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009690c  00000000  00000000  00061ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f83d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  000f8450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006824 	.word	0x08006824

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08006824 	.word	0x08006824

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b972 	b.w	8000dd0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9e08      	ldr	r6, [sp, #32]
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	4688      	mov	r8, r1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d14b      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b12:	428a      	cmp	r2, r1
 8000b14:	4615      	mov	r5, r2
 8000b16:	d967      	bls.n	8000be8 <__udivmoddi4+0xe4>
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0720 	rsb	r7, r2, #32
 8000b22:	fa01 f302 	lsl.w	r3, r1, r2
 8000b26:	fa20 f707 	lsr.w	r7, r0, r7
 8000b2a:	4095      	lsls	r5, r2
 8000b2c:	ea47 0803 	orr.w	r8, r7, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b3c:	fa1f fc85 	uxth.w	ip, r5
 8000b40:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b48:	fb07 f10c 	mul.w	r1, r7, ip
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d909      	bls.n	8000b64 <__udivmoddi4+0x60>
 8000b50:	18eb      	adds	r3, r5, r3
 8000b52:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b56:	f080 811b 	bcs.w	8000d90 <__udivmoddi4+0x28c>
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	f240 8118 	bls.w	8000d90 <__udivmoddi4+0x28c>
 8000b60:	3f02      	subs	r7, #2
 8000b62:	442b      	add	r3, r5
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	b2a4      	uxth	r4, r4
 8000b68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b74:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b78:	45a4      	cmp	ip, r4
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x8c>
 8000b7c:	192c      	adds	r4, r5, r4
 8000b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b82:	f080 8107 	bcs.w	8000d94 <__udivmoddi4+0x290>
 8000b86:	45a4      	cmp	ip, r4
 8000b88:	f240 8104 	bls.w	8000d94 <__udivmoddi4+0x290>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	442c      	add	r4, r5
 8000b90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b94:	eba4 040c 	sub.w	r4, r4, ip
 8000b98:	2700      	movs	r7, #0
 8000b9a:	b11e      	cbz	r6, 8000ba4 <__udivmoddi4+0xa0>
 8000b9c:	40d4      	lsrs	r4, r2
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0xbe>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	f000 80eb 	beq.w	8000d8a <__udivmoddi4+0x286>
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bba:	4638      	mov	r0, r7
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	fab3 f783 	clz	r7, r3
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d147      	bne.n	8000c5a <__udivmoddi4+0x156>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d302      	bcc.n	8000bd4 <__udivmoddi4+0xd0>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	f200 80fa 	bhi.w	8000dc8 <__udivmoddi4+0x2c4>
 8000bd4:	1a84      	subs	r4, r0, r2
 8000bd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	4698      	mov	r8, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d0e0      	beq.n	8000ba4 <__udivmoddi4+0xa0>
 8000be2:	e9c6 4800 	strd	r4, r8, [r6]
 8000be6:	e7dd      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000be8:	b902      	cbnz	r2, 8000bec <__udivmoddi4+0xe8>
 8000bea:	deff      	udf	#255	; 0xff
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f040 808f 	bne.w	8000d14 <__udivmoddi4+0x210>
 8000bf6:	1b49      	subs	r1, r1, r5
 8000bf8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfc:	fa1f f885 	uxth.w	r8, r5
 8000c00:	2701      	movs	r7, #1
 8000c02:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb08 f10c 	mul.w	r1, r8, ip
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x124>
 8000c18:	18eb      	adds	r3, r5, r3
 8000c1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x122>
 8000c20:	4299      	cmp	r1, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2bc>
 8000c26:	4684      	mov	ip, r0
 8000c28:	1a59      	subs	r1, r3, r1
 8000c2a:	b2a3      	uxth	r3, r4
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c38:	fb08 f800 	mul.w	r8, r8, r0
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x14c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x14a>
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	f200 80b6 	bhi.w	8000dba <__udivmoddi4+0x2b6>
 8000c4e:	4618      	mov	r0, r3
 8000c50:	eba4 0408 	sub.w	r4, r4, r8
 8000c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c58:	e79f      	b.n	8000b9a <__udivmoddi4+0x96>
 8000c5a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c5e:	40bb      	lsls	r3, r7
 8000c60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c64:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c68:	fa01 f407 	lsl.w	r4, r1, r7
 8000c6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c70:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c78:	4325      	orrs	r5, r4
 8000c7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c7e:	0c2c      	lsrs	r4, r5, #16
 8000c80:	fb08 3319 	mls	r3, r8, r9, r3
 8000c84:	fa1f fa8e 	uxth.w	sl, lr
 8000c88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c8c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c90:	429c      	cmp	r4, r3
 8000c92:	fa02 f207 	lsl.w	r2, r2, r7
 8000c96:	fa00 f107 	lsl.w	r1, r0, r7
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b0>
 8000c9c:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca4:	f080 8087 	bcs.w	8000db6 <__udivmoddi4+0x2b2>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f240 8084 	bls.w	8000db6 <__udivmoddi4+0x2b2>
 8000cae:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb2:	4473      	add	r3, lr
 8000cb4:	1b1b      	subs	r3, r3, r4
 8000cb6:	b2ad      	uxth	r5, r5
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc8:	45a2      	cmp	sl, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1da>
 8000ccc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	d26b      	bcs.n	8000dae <__udivmoddi4+0x2aa>
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	d969      	bls.n	8000dae <__udivmoddi4+0x2aa>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4474      	add	r4, lr
 8000cde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce6:	eba4 040a 	sub.w	r4, r4, sl
 8000cea:	454c      	cmp	r4, r9
 8000cec:	46c2      	mov	sl, r8
 8000cee:	464b      	mov	r3, r9
 8000cf0:	d354      	bcc.n	8000d9c <__udivmoddi4+0x298>
 8000cf2:	d051      	beq.n	8000d98 <__udivmoddi4+0x294>
 8000cf4:	2e00      	cmp	r6, #0
 8000cf6:	d069      	beq.n	8000dcc <__udivmoddi4+0x2c8>
 8000cf8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cfc:	eb64 0403 	sbc.w	r4, r4, r3
 8000d00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d04:	40fd      	lsrs	r5, r7
 8000d06:	40fc      	lsrs	r4, r7
 8000d08:	ea4c 0505 	orr.w	r5, ip, r5
 8000d0c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d10:	2700      	movs	r7, #0
 8000d12:	e747      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f703 	lsr.w	r7, r0, r3
 8000d1c:	4095      	lsls	r5, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	fa21 f303 	lsr.w	r3, r1, r3
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	4338      	orrs	r0, r7
 8000d2c:	0c01      	lsrs	r1, r0, #16
 8000d2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d32:	fa1f f885 	uxth.w	r8, r5
 8000d36:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3e:	fb07 f308 	mul.w	r3, r7, r8
 8000d42:	428b      	cmp	r3, r1
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x256>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d50:	d22f      	bcs.n	8000db2 <__udivmoddi4+0x2ae>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d92d      	bls.n	8000db2 <__udivmoddi4+0x2ae>
 8000d56:	3f02      	subs	r7, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1acb      	subs	r3, r1, r3
 8000d5c:	b281      	uxth	r1, r0
 8000d5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d62:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb00 f308 	mul.w	r3, r0, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x27e>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d78:	d217      	bcs.n	8000daa <__udivmoddi4+0x2a6>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d915      	bls.n	8000daa <__udivmoddi4+0x2a6>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1ac9      	subs	r1, r1, r3
 8000d84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d88:	e73b      	b.n	8000c02 <__udivmoddi4+0xfe>
 8000d8a:	4637      	mov	r7, r6
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e709      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000d90:	4607      	mov	r7, r0
 8000d92:	e6e7      	b.n	8000b64 <__udivmoddi4+0x60>
 8000d94:	4618      	mov	r0, r3
 8000d96:	e6fb      	b.n	8000b90 <__udivmoddi4+0x8c>
 8000d98:	4541      	cmp	r1, r8
 8000d9a:	d2ab      	bcs.n	8000cf4 <__udivmoddi4+0x1f0>
 8000d9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da0:	eb69 020e 	sbc.w	r2, r9, lr
 8000da4:	3801      	subs	r0, #1
 8000da6:	4613      	mov	r3, r2
 8000da8:	e7a4      	b.n	8000cf4 <__udivmoddi4+0x1f0>
 8000daa:	4660      	mov	r0, ip
 8000dac:	e7e9      	b.n	8000d82 <__udivmoddi4+0x27e>
 8000dae:	4618      	mov	r0, r3
 8000db0:	e795      	b.n	8000cde <__udivmoddi4+0x1da>
 8000db2:	4667      	mov	r7, ip
 8000db4:	e7d1      	b.n	8000d5a <__udivmoddi4+0x256>
 8000db6:	4681      	mov	r9, r0
 8000db8:	e77c      	b.n	8000cb4 <__udivmoddi4+0x1b0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	442c      	add	r4, r5
 8000dbe:	e747      	b.n	8000c50 <__udivmoddi4+0x14c>
 8000dc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc4:	442b      	add	r3, r5
 8000dc6:	e72f      	b.n	8000c28 <__udivmoddi4+0x124>
 8000dc8:	4638      	mov	r0, r7
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xda>
 8000dcc:	4637      	mov	r7, r6
 8000dce:	e6e9      	b.n	8000ba4 <__udivmoddi4+0xa0>

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f92b 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f005 f968 	bl	80060dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f943 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f90b 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000003c 	.word	0x2000003c
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000000 	.word	0x20000000

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	20000290 	.word	0x20000290

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000290 	.word	0x20000290

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e159      	b.n	80013ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8148 	bne.w	80013a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x4a>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b12      	cmp	r3, #18
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d00b      	beq.n	80011c2 <HAL_GPIO_Init+0xe6>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b6:	2b11      	cmp	r3, #17
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a2 	beq.w	80013a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <HAL_GPIO_Init+0x2e4>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a55      	ldr	r2, [pc, #340]	; (80013c0 <HAL_GPIO_Init+0x2e4>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_GPIO_Init+0x2e4>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x202>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a47      	ldr	r2, [pc, #284]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1fe>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a46      	ldr	r2, [pc, #280]	; (80013d0 <HAL_GPIO_Init+0x2f4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1fa>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a45      	ldr	r2, [pc, #276]	; (80013d4 <HAL_GPIO_Init+0x2f8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1f6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <HAL_GPIO_Init+0x2fc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1f2>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4934      	ldr	r1, [pc, #208]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_GPIO_Init+0x300>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a2e      	ldr	r2, [pc, #184]	; (80013dc <HAL_GPIO_Init+0x300>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_GPIO_Init+0x300>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_GPIO_Init+0x300>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_GPIO_Init+0x300>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_GPIO_Init+0x300>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_GPIO_Init+0x300>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_GPIO_Init+0x300>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f aea2 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	3724      	adds	r7, #36	; 0x24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e22d      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d075      	beq.n	800151e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001432:	4ba3      	ldr	r3, [pc, #652]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b04      	cmp	r3, #4
 800143c:	d00c      	beq.n	8001458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4ba0      	ldr	r3, [pc, #640]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	2b08      	cmp	r3, #8
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b9d      	ldr	r3, [pc, #628]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001456:	d10b      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b99      	ldr	r3, [pc, #612]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d05b      	beq.n	800151c <HAL_RCC_OscConfig+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d157      	bne.n	800151c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e208      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x74>
 800147a:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a90      	ldr	r2, [pc, #576]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a8a      	ldr	r2, [pc, #552]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 80014ac:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a83      	ldr	r2, [pc, #524]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a80      	ldr	r2, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fce8 	bl	8000ea0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fce4 	bl	8000ea0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1cd      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xc0>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fcd4 	bl	8000ea0 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fcd0 	bl	8000ea0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1b9      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0xe8>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d063      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e18d      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4952      	ldr	r1, [pc, #328]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_RCC_OscConfig+0x2b0>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fc89 	bl	8000ea0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fc85 	bl	8000ea0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e16e      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4940      	ldr	r1, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x2b0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc68 	bl	8000ea0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc64 	bl	8000ea0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e14d      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d030      	beq.n	8001660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d016      	beq.n	8001634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_OscConfig+0x2b4>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fc48 	bl	8000ea0 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fc44 	bl	8000ea0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e12d      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x200>
 8001632:	e015      	b.n	8001660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x2b4>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fc31 	bl	8000ea0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fc2d 	bl	8000ea0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e116      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a0 	beq.w	80017ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d121      	bne.n	80016ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x2b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_RCC_OscConfig+0x2b8>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbf3 	bl	8000ea0 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e011      	b.n	80016e2 <HAL_RCC_OscConfig+0x2ce>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470000 	.word	0x42470000
 80016c8:	42470e80 	.word	0x42470e80
 80016cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff fbe6 	bl	8000ea0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e0cf      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x478>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_OscConfig+0x2f0>
 80016f6:	4b66      	ldr	r3, [pc, #408]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a65      	ldr	r2, [pc, #404]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	e01c      	b.n	800173e <HAL_RCC_OscConfig+0x32a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_OscConfig+0x312>
 800170c:	4b60      	ldr	r3, [pc, #384]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a5f      	ldr	r2, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a5c      	ldr	r2, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	e00b      	b.n	800173e <HAL_RCC_OscConfig+0x32a>
 8001726:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a59      	ldr	r2, [pc, #356]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	4b57      	ldr	r3, [pc, #348]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a56      	ldr	r2, [pc, #344]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001738:	f023 0304 	bic.w	r3, r3, #4
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d015      	beq.n	8001772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fbab 	bl	8000ea0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff fba7 	bl	8000ea0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e08e      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ee      	beq.n	800174e <HAL_RCC_OscConfig+0x33a>
 8001770:	e014      	b.n	800179c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fb95 	bl	8000ea0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fb91 	bl	8000ea0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e078      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ee      	bne.n	800177a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a3a      	ldr	r2, [pc, #232]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 80017a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d064      	beq.n	8001880 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d05c      	beq.n	800187c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d141      	bne.n	800184e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <HAL_RCC_OscConfig+0x480>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb66 	bl	8000ea0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff fb62 	bl	8000ea0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e04b      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	4b29      	ldr	r3, [pc, #164]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	019b      	lsls	r3, r3, #6
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	491d      	ldr	r1, [pc, #116]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x480>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb3b 	bl	8000ea0 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fb37 	bl	8000ea0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e020      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x41a>
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_RCC_OscConfig+0x480>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fb24 	bl	8000ea0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fb20 	bl	8000ea0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e009      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_RCC_OscConfig+0x47c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x448>
 800187a:	e001      	b.n	8001880 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40007000 	.word	0x40007000
 8001890:	40023800 	.word	0x40023800
 8001894:	42470060 	.word	0x42470060

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ca      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_ClockConfig+0x1b4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d90c      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <HAL_RCC_ClockConfig+0x1b4>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_RCC_ClockConfig+0x1b4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b6      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494c      	ldr	r1, [pc, #304]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d044      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d119      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07d      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d003      	beq.n	8001956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	2b03      	cmp	r3, #3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06d      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e065      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4933      	ldr	r1, [pc, #204]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff fa8a 	bl	8000ea0 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff fa86 	bl	8000ea0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e04d      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_ClockConfig+0x1b4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d20c      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_ClockConfig+0x1b4>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_ClockConfig+0x1b4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e030      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4915      	ldr	r1, [pc, #84]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490d      	ldr	r1, [pc, #52]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f81d 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a22:	4601      	mov	r1, r0
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	fa21 f303 	lsr.w	r3, r1, r3
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff f9ec 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08006a14 	.word	0x08006a14
 8001a58:	2000003c 	.word	0x2000003c

08001a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a72:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d007      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x32>
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d008      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x38>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 808d 	bne.w	8001ba2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a8a:	60bb      	str	r3, [r7, #8]
       break;
 8001a8c:	e08c      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001a90:	60bb      	str	r3, [r7, #8]
      break;
 8001a92:	e089      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d023      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	f04f 0400 	mov.w	r4, #0
 8001ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	ea03 0501 	and.w	r5, r3, r1
 8001ac0:	ea04 0602 	and.w	r6, r4, r2
 8001ac4:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac6:	fb02 f106 	mul.w	r1, r2, r6
 8001aca:	2200      	movs	r2, #0
 8001acc:	fb02 f205 	mul.w	r2, r2, r5
 8001ad0:	440a      	add	r2, r1
 8001ad2:	493a      	ldr	r1, [pc, #232]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001ad4:	fba5 0101 	umull	r0, r1, r5, r1
 8001ad8:	1853      	adds	r3, r2, r1
 8001ada:	4619      	mov	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f04f 0400 	mov.w	r4, #0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	f7fe fff5 	bl	8000ad4 <__aeabi_uldivmod>
 8001aea:	4603      	mov	r3, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e049      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	ea03 0501 	and.w	r5, r3, r1
 8001b08:	ea04 0602 	and.w	r6, r4, r2
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	4632      	mov	r2, r6
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	f04f 0400 	mov.w	r4, #0
 8001b18:	0154      	lsls	r4, r2, #5
 8001b1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b1e:	014b      	lsls	r3, r1, #5
 8001b20:	4619      	mov	r1, r3
 8001b22:	4622      	mov	r2, r4
 8001b24:	1b49      	subs	r1, r1, r5
 8001b26:	eb62 0206 	sbc.w	r2, r2, r6
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f04f 0400 	mov.w	r4, #0
 8001b32:	0194      	lsls	r4, r2, #6
 8001b34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b38:	018b      	lsls	r3, r1, #6
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	00e2      	lsls	r2, r4, #3
 8001b4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b4e:	00d9      	lsls	r1, r3, #3
 8001b50:	460b      	mov	r3, r1
 8001b52:	4614      	mov	r4, r2
 8001b54:	195b      	adds	r3, r3, r5
 8001b56:	eb44 0406 	adc.w	r4, r4, r6
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	02a2      	lsls	r2, r4, #10
 8001b64:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b68:	0299      	lsls	r1, r3, #10
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4621      	mov	r1, r4
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f04f 0400 	mov.w	r4, #0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	f7fe ffaa 	bl	8000ad4 <__aeabi_uldivmod>
 8001b80:	4603      	mov	r3, r0
 8001b82:	460c      	mov	r4, r1
 8001b84:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	3301      	adds	r3, #1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	60bb      	str	r3, [r7, #8]
      break;
 8001ba0:	e002      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ba4:	60bb      	str	r3, [r7, #8]
      break;
 8001ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	017d7840 	.word	0x017d7840

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000003c 	.word	0x2000003c

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4601      	mov	r1, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08006a24 	.word	0x08006a24

08001c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c04:	f7ff ffdc 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001c08:	4601      	mov	r1, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0b5b      	lsrs	r3, r3, #13
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08006a24 	.word	0x08006a24

08001c28 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001c5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11a      	bne.n	8001cda <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fa1a 	bl	80020e2 <RTC_Bcd2ToByte>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fa11 	bl	80020e2 <RTC_Bcd2ToByte>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	789b      	ldrb	r3, [r3, #2]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fa08 	bl	80020e2 <RTC_Bcd2ToByte>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001cf8:	4ba1      	ldr	r3, [pc, #644]	; (8001f80 <HAL_RTC_SetAlarm_IT+0x29c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4aa1      	ldr	r2, [pc, #644]	; (8001f84 <HAL_RTC_SetAlarm_IT+0x2a0>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	7f1b      	ldrb	r3, [r3, #28]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_RTC_SetAlarm_IT+0x36>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e12e      	b.n	8001f78 <HAL_RTC_SetAlarm_IT+0x294>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2202      	movs	r2, #2
 8001d24:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d137      	bne.n	8001d9c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f9ae 	bl	80020a6 <RTC_ByteToBcd2>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	785b      	ldrb	r3, [r3, #1]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f9a7 	bl	80020a6 <RTC_ByteToBcd2>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d5c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f99f 	bl	80020a6 <RTC_ByteToBcd2>
 8001d68:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001d6a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	78db      	ldrb	r3, [r3, #3]
 8001d72:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001d74:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f991 	bl	80020a6 <RTC_ByteToBcd2>
 8001d84:	4603      	mov	r3, r0
 8001d86:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001d88:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e040      	b.n	8001e1e <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f997 	bl	80020e2 <RTC_Bcd2ToByte>
 8001db4:	4603      	mov	r3, r0
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	e002      	b.n	8001dc0 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d108      	bne.n	8001dda <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f987 	bl	80020e2 <RTC_Bcd2ToByte>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	e007      	b.n	8001dea <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f97e 	bl	80020e2 <RTC_Bcd2ToByte>
 8001de6:	4603      	mov	r3, r0
 8001de8:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001df6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001dfc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	78db      	ldrb	r3, [r3, #3]
 8001e02:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001e04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	22ca      	movs	r2, #202	; 0xca
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2253      	movs	r2, #83	; 0x53
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e42:	d141      	bne.n	8001ec8 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e52:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001e64:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	617a      	str	r2, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	22ff      	movs	r2, #255	; 0xff
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e077      	b.n	8001f78 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0e7      	beq.n	8001e66 <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	e040      	b.n	8001f4a <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ed6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001ee8:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	617a      	str	r2, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2203      	movs	r2, #3
 8001f00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e035      	b.n	8001f78 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0e7      	beq.n	8001eea <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f38:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f48:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3724      	adds	r7, #36	; 0x24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	2000003c 	.word	0x2000003c
 8001f84:	10624dd3 	.word	0x10624dd3
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7f1b      	ldrb	r3, [r3, #28]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RTC_DeactivateAlarm+0x1a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e07b      	b.n	800209e <HAL_RTC_DeactivateAlarm+0x112>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	775a      	strb	r2, [r3, #29]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	22ca      	movs	r2, #202	; 0xca
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2253      	movs	r2, #83	; 0x53
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  
  if(Alarm == RTC_ALARM_A)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc8:	d12f      	bne.n	800202a <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd8:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fe8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fea:	f7fe ff59 	bl	8000ea0 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001ff0:	e013      	b.n	800201a <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ff2:	f7fe ff55 	bl	8000ea0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002000:	d90b      	bls.n	800201a <HAL_RTC_DeactivateAlarm+0x8e>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	22ff      	movs	r2, #255	; 0xff
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2203      	movs	r2, #3
 800200e:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e041      	b.n	800209e <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0e4      	beq.n	8001ff2 <HAL_RTC_DeactivateAlarm+0x66>
 8002028:	e02e      	b.n	8002088 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002038:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002048:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800204a:	f7fe ff29 	bl	8000ea0 <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002050:	e013      	b.n	800207a <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002052:	f7fe ff25 	bl	8000ea0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002060:	d90b      	bls.n	800207a <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e011      	b.n	800209e <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0e4      	beq.n	8002052 <HAL_RTC_DeactivateAlarm+0xc6>
      }    
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	22ff      	movs	r2, #255	; 0xff
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK; 
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 80020b4:	e005      	b.n	80020c2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3301      	adds	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	3b0a      	subs	r3, #10
 80020c0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d8f6      	bhi.n	80020b6 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b2db      	uxtb	r3, r3
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4413      	add	r3, r2
 8002110:	b2db      	uxtb	r3, r3
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e056      	b.n	80021de <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f003 ffee 	bl	800612c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	ea42 0103 	orr.w	r1, r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0104 	and.w	r1, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b08c      	sub	sp, #48	; 0x30
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021f4:	2301      	movs	r3, #1
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_SPI_TransmitReceive+0x26>
 8002208:	2302      	movs	r3, #2
 800220a:	e18a      	b.n	8002522 <HAL_SPI_TransmitReceive+0x33c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002214:	f7fe fe44 	bl	8000ea0 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800222e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00f      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x70>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800223c:	d107      	bne.n	800224e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <HAL_SPI_TransmitReceive+0x68>
 8002246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800224a:	2b04      	cmp	r3, #4
 800224c:	d003      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002254:	e15b      	b.n	800250e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x82>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x82>
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800226e:	e14e      	b.n	800250e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b04      	cmp	r3, #4
 800227a:	d003      	beq.n	8002284 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2205      	movs	r2, #5
 8002280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	887a      	ldrh	r2, [r7, #2]
 800229a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d007      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e0:	d178      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_SPI_TransmitReceive+0x10a>
 80022ea:	8b7b      	ldrh	r3, [r7, #26]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d166      	bne.n	80023be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002314:	e053      	b.n	80023be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11b      	bne.n	800235c <HAL_SPI_TransmitReceive+0x176>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_SPI_TransmitReceive+0x176>
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d113      	bne.n	800235c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	1c9a      	adds	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d119      	bne.n	800239e <HAL_SPI_TransmitReceive+0x1b8>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d014      	beq.n	800239e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	b292      	uxth	r2, r2
 8002380:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	1c9a      	adds	r2, r3, #2
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800239a:	2301      	movs	r3, #1
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800239e:	f7fe fd7f 	bl	8000ea0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d807      	bhi.n	80023be <HAL_SPI_TransmitReceive+0x1d8>
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d003      	beq.n	80023be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023bc:	e0a7      	b.n	800250e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1a6      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x130>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1a1      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x130>
 80023d2:	e07c      	b.n	80024ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_SPI_TransmitReceive+0x1fc>
 80023dc:	8b7b      	ldrh	r3, [r7, #26]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d16b      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002408:	e057      	b.n	80024ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11c      	bne.n	8002452 <HAL_SPI_TransmitReceive+0x26c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d017      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x26c>
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d114      	bne.n	8002452 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d119      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x2ae>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002490:	2301      	movs	r3, #1
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002494:	f7fe fd04 	bl	8000ea0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d803      	bhi.n	80024ac <HAL_SPI_TransmitReceive+0x2c6>
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d102      	bne.n	80024b2 <HAL_SPI_TransmitReceive+0x2cc>
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024b8:	e029      	b.n	800250e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1a2      	bne.n	800240a <HAL_SPI_TransmitReceive+0x224>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d19d      	bne.n	800240a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f894 	bl	8002600 <SPI_EndRxTxTransaction>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80024ea:	e010      	b.n	800250e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	e000      	b.n	800250e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800250c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800251e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002522:	4618      	mov	r0, r3
 8002524:	3730      	adds	r7, #48	; 0x30
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800253a:	e04c      	b.n	80025d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d048      	beq.n	80025d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002544:	f7fe fcac 	bl	8000ea0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d902      	bls.n	800255a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d13d      	bne.n	80025d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002572:	d111      	bne.n	8002598 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257c:	d004      	beq.n	8002588 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d107      	bne.n	8002598 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a0:	d10f      	bne.n	80025c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e00f      	b.n	80025f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1a3      	bne.n	800253c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <SPI_EndRxTxTransaction+0x7c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <SPI_EndRxTxTransaction+0x80>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0d5b      	lsrs	r3, r3, #21
 8002618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800262a:	d112      	bne.n	8002652 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff77 	bl	800252a <SPI_WaitFlagStateUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e00f      	b.n	8002672 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3b01      	subs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d0f2      	beq.n	8002652 <SPI_EndRxTxTransaction+0x52>
 800266c:	e000      	b.n	8002670 <SPI_EndRxTxTransaction+0x70>
        break;
 800266e:	bf00      	nop
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000003c 	.word	0x2000003c
 8002680:	165e9f81 	.word	0x165e9f81

08002684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e03f      	b.n	8002716 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f003 fe94 	bl	80063d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f90b 	bl	80028e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b088      	sub	sp, #32
 8002722:	af02      	add	r7, sp, #8
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	f040 8083 	bne.w	8002846 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_UART_Transmit+0x2e>
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e07b      	b.n	8002848 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_UART_Transmit+0x40>
 800275a:	2302      	movs	r3, #2
 800275c:	e074      	b.n	8002848 <HAL_UART_Transmit+0x12a>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2221      	movs	r2, #33	; 0x21
 8002770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002774:	f7fe fb94 	bl	8000ea0 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002786:	e042      	b.n	800280e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279e:	d122      	bne.n	80027e6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2200      	movs	r2, #0
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f850 	bl	8002850 <UART_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e046      	b.n	8002848 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3302      	adds	r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	e017      	b.n	800280e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	e013      	b.n	800280e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f82d 	bl	8002850 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e023      	b.n	8002848 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	60ba      	str	r2, [r7, #8]
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1b7      	bne.n	8002788 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2200      	movs	r2, #0
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f814 	bl	8002850 <UART_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e00a      	b.n	8002848 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002860:	e02c      	b.n	80028bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d028      	beq.n	80028bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <UART_WaitOnFlagUntilTimeout+0x30>
 8002870:	f7fe fb16 	bl	8000ea0 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	429a      	cmp	r2, r3
 800287e:	d21d      	bcs.n	80028bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800288e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e00f      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d0c3      	beq.n	8002862 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002924:	f023 030c 	bic.w	r3, r3, #12
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	430b      	orrs	r3, r1
 8002930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002950:	f040 80e4 	bne.w	8002b1c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4aab      	ldr	r2, [pc, #684]	; (8002c08 <UART_SetConfig+0x324>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <UART_SetConfig+0x84>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4aaa      	ldr	r2, [pc, #680]	; (8002c0c <UART_SetConfig+0x328>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d16c      	bne.n	8002a42 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002968:	f7ff f94a 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 800296c:	4602      	mov	r2, r0
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009a      	lsls	r2, r3, #2
 8002976:	441a      	add	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4aa3      	ldr	r2, [pc, #652]	; (8002c10 <UART_SetConfig+0x32c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	011c      	lsls	r4, r3, #4
 800298c:	f7ff f938 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002990:	4602      	mov	r2, r0
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009a      	lsls	r2, r3, #2
 800299a:	441a      	add	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80029a6:	f7ff f92b 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	4a93      	ldr	r2, [pc, #588]	; (8002c10 <UART_SetConfig+0x32c>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2264      	movs	r2, #100	; 0x64
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	1aeb      	subs	r3, r5, r3
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	3332      	adds	r3, #50	; 0x32
 80029d4:	4a8e      	ldr	r2, [pc, #568]	; (8002c10 <UART_SetConfig+0x32c>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029e2:	441c      	add	r4, r3
 80029e4:	f7ff f90c 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009a      	lsls	r2, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80029fe:	f7ff f8ff 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4a7d      	ldr	r2, [pc, #500]	; (8002c10 <UART_SetConfig+0x32c>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2264      	movs	r2, #100	; 0x64
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	1aeb      	subs	r3, r5, r3
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	3332      	adds	r3, #50	; 0x32
 8002a2c:	4a78      	ldr	r2, [pc, #480]	; (8002c10 <UART_SetConfig+0x32c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 0207 	and.w	r2, r3, #7
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4422      	add	r2, r4
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e154      	b.n	8002cec <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a42:	f7ff f8c9 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	4a6c      	ldr	r2, [pc, #432]	; (8002c10 <UART_SetConfig+0x32c>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	011c      	lsls	r4, r3, #4
 8002a66:	f7ff f8b7 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a80:	f7ff f8aa 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4a5d      	ldr	r2, [pc, #372]	; (8002c10 <UART_SetConfig+0x32c>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	1aeb      	subs	r3, r5, r3
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	3332      	adds	r3, #50	; 0x32
 8002aae:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <UART_SetConfig+0x32c>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002abc:	441c      	add	r4, r3
 8002abe:	f7ff f88b 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ad8:	f7ff f87e 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4a47      	ldr	r2, [pc, #284]	; (8002c10 <UART_SetConfig+0x32c>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	2264      	movs	r2, #100	; 0x64
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	1aeb      	subs	r3, r5, r3
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	3332      	adds	r3, #50	; 0x32
 8002b06:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <UART_SetConfig+0x32c>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	f003 0207 	and.w	r2, r3, #7
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4422      	add	r2, r4
 8002b18:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002b1a:	e0e7      	b.n	8002cec <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a39      	ldr	r2, [pc, #228]	; (8002c08 <UART_SetConfig+0x324>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <UART_SetConfig+0x24c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <UART_SetConfig+0x328>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d171      	bne.n	8002c14 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b30:	f7ff f866 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4a31      	ldr	r2, [pc, #196]	; (8002c10 <UART_SetConfig+0x32c>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	011c      	lsls	r4, r3, #4
 8002b54:	f7ff f854 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009a      	lsls	r2, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b6e:	f7ff f847 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <UART_SetConfig+0x32c>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2264      	movs	r2, #100	; 0x64
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	1aeb      	subs	r3, r5, r3
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	3332      	adds	r3, #50	; 0x32
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <UART_SetConfig+0x32c>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba8:	441c      	add	r4, r3
 8002baa:	f7ff f829 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bc4:	f7ff f81c 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <UART_SetConfig+0x32c>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	2264      	movs	r2, #100	; 0x64
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	1aeb      	subs	r3, r5, r3
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	3332      	adds	r3, #50	; 0x32
 8002bf2:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <UART_SetConfig+0x32c>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	f003 020f 	and.w	r2, r3, #15
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4422      	add	r2, r4
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	e071      	b.n	8002cec <UART_SetConfig+0x408>
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40011400 	.word	0x40011400
 8002c10:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c14:	f7fe ffe0 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4a31      	ldr	r2, [pc, #196]	; (8002cf4 <UART_SetConfig+0x410>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	011c      	lsls	r4, r3, #4
 8002c38:	f7fe ffce 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c52:	f7fe ffc1 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	4a21      	ldr	r2, [pc, #132]	; (8002cf4 <UART_SetConfig+0x410>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2264      	movs	r2, #100	; 0x64
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	1aeb      	subs	r3, r5, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <UART_SetConfig+0x410>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8c:	441c      	add	r4, r3
 8002c8e:	f7fe ffa3 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ca8:	f7fe ff96 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009a      	lsls	r2, r3, #2
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <UART_SetConfig+0x410>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	2264      	movs	r2, #100	; 0x64
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	1aeb      	subs	r3, r5, r3
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	3332      	adds	r3, #50	; 0x32
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <UART_SetConfig+0x410>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4422      	add	r2, r4
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	e7ff      	b.n	8002cec <UART_SetConfig+0x408>
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf4:	51eb851f 	.word	0x51eb851f

08002cf8 <SX1272BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1272BoardInit( LoRaBoardCallback_t *callbacks )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <SX1272BoardInit+0x1c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000160 	.word	0x20000160

08002d18 <SX1272Init>:

uint32_t SX1272Init( RadioEvents_t *events )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8002d20:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <SX1272Init+0xb4>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 8002d26:	492a      	ldr	r1, [pc, #168]	; (8002dd0 <SX1272Init+0xb8>)
 8002d28:	482a      	ldr	r0, [pc, #168]	; (8002dd4 <SX1272Init+0xbc>)
 8002d2a:	f001 fff7 	bl	8004d1c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1272OnTimeoutIrq );
 8002d2e:	4928      	ldr	r1, [pc, #160]	; (8002dd0 <SX1272Init+0xb8>)
 8002d30:	4829      	ldr	r0, [pc, #164]	; (8002dd8 <SX1272Init+0xc0>)
 8002d32:	f001 fff3 	bl	8004d1c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 8002d36:	4926      	ldr	r1, [pc, #152]	; (8002dd0 <SX1272Init+0xb8>)
 8002d38:	4828      	ldr	r0, [pc, #160]	; (8002ddc <SX1272Init+0xc4>)
 8002d3a:	f001 ffef 	bl	8004d1c <TimerInit>

    LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <SX1272Init+0xc8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2001      	movs	r0, #1
 8002d46:	4798      	blx	r3

    SX1272Reset( );
 8002d48:	f001 f966 	bl	8004018 <SX1272Reset>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f001 f993 	bl	8004078 <SX1272SetOpMode>

    LoRaBoardCallbacks->SX1272BoardIoIrqInit( DioIrq );
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <SX1272Init+0xc8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4822      	ldr	r0, [pc, #136]	; (8002de4 <SX1272Init+0xcc>)
 8002d5a:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e020      	b.n	8002da4 <SX1272Init+0x8c>
    {
        SX1272SetModem( RadioRegsInit[i].Modem );
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	4920      	ldr	r1, [pc, #128]	; (8002de8 <SX1272Init+0xd0>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 f9b7 	bl	80040e4 <SX1272SetModem>
        SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	491b      	ldr	r1, [pc, #108]	; (8002de8 <SX1272Init+0xd0>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	3301      	adds	r3, #1
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b298      	uxth	r0, r3
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	4917      	ldr	r1, [pc, #92]	; (8002de8 <SX1272Init+0xd0>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	3302      	adds	r3, #2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f001 f9f7 	bl	800418c <SX1272Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	3301      	adds	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d9db      	bls.n	8002d62 <SX1272Init+0x4a>
    }

    SX1272SetModem( MODEM_FSK );
 8002daa:	2000      	movs	r0, #0
 8002dac:	f001 f99a 	bl	80040e4 <SX1272SetModem>

    SX1272.Settings.State = RF_IDLE;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <SX1272Init+0xd4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <SX1272Init+0xc8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4798      	blx	r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	3302      	adds	r3, #2
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000005c 	.word	0x2000005c
 8002dd0:	08004379 	.word	0x08004379
 8002dd4:	200002fc 	.word	0x200002fc
 8002dd8:	2000032c 	.word	0x2000032c
 8002ddc:	20000314 	.word	0x20000314
 8002de0:	20000160 	.word	0x20000160
 8002de4:	20000008 	.word	0x20000008
 8002de8:	080068a4 	.word	0x080068a4
 8002dec:	20000294 	.word	0x20000294

08002df0 <SX1272GetStatus>:

RadioState_t SX1272GetStatus( void )
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
    return SX1272.Settings.State;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <SX1272GetStatus+0x14>)
 8002df6:	791b      	ldrb	r3, [r3, #4]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000294 	.word	0x20000294

08002e08 <SX1272SetChannel>:

void SX1272SetChannel( uint32_t freq )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1272.Settings.Channel = freq;
 8002e10:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <SX1272SetChannel+0x74>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6093      	str	r3, [r2, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <SX1272SetChannel+0x78>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0b1b      	lsrs	r3, r3, #12
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f643 5209 	movw	r2, #15625	; 0x3d09
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8002e3e:	3304      	adds	r3, #4
 8002e40:	490f      	ldr	r1, [pc, #60]	; (8002e80 <SX1272SetChannel+0x78>)
 8002e42:	fba1 1303 	umull	r1, r3, r1, r3
 8002e46:	0b1b      	lsrs	r3, r3, #12
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

    SX1272Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	0c1b      	lsrs	r3, r3, #16
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	2006      	movs	r0, #6
 8002e56:	f001 f999 	bl	800418c <SX1272Write>
    SX1272Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	2007      	movs	r0, #7
 8002e64:	f001 f992 	bl	800418c <SX1272Write>
    SX1272Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	2008      	movs	r0, #8
 8002e70:	f001 f98c 	bl	800418c <SX1272Write>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000294 	.word	0x20000294
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <SX1272IsChannelFree>:

bool SX1272IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	4613      	mov	r3, r2
 8002e94:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]

    if( SX1272GetStatus( ) != RF_IDLE )
 8002ea2:	f7ff ffa5 	bl	8002df0 <SX1272GetStatus>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <SX1272IsChannelFree+0x2c>
    {
        return false;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e029      	b.n	8002f04 <SX1272IsChannelFree+0x80>
    }

    SX1272SetModem( modem );
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 f916 	bl	80040e4 <SX1272SetModem>

    SX1272SetChannel( freq );
 8002eb8:	68b8      	ldr	r0, [r7, #8]
 8002eba:	f7ff ffa5 	bl	8002e08 <SX1272SetChannel>

    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8002ebe:	2005      	movs	r0, #5
 8002ec0:	f001 f8da 	bl	8004078 <SX1272SetOpMode>

    DelayMs( 1 );
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f001 fec5 	bl	8004c54 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8002eca:	f002 f832 	bl	8004f32 <TimerGetCurrentTime>
 8002ece:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8002ed0:	e00e      	b.n	8002ef0 <SX1272IsChannelFree+0x6c>
    {
        rssi = SX1272ReadRssi( modem );
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 f873 	bl	8003fc0 <SX1272ReadRssi>
 8002eda:	4603      	mov	r3, r0
 8002edc:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8002ede:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ee2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dd02      	ble.n	8002ef0 <SX1272IsChannelFree+0x6c>
        {
            status = false;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]
            break;
 8002eee:	e006      	b.n	8002efe <SX1272IsChannelFree+0x7a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8002ef0:	6938      	ldr	r0, [r7, #16]
 8002ef2:	f002 f82c 	bl	8004f4e <TimerGetElapsedTime>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d8e9      	bhi.n	8002ed2 <SX1272IsChannelFree+0x4e>
        }
    }
    SX1272SetSleep( );
 8002efe:	f000 fe57 	bl	8003bb0 <SX1272SetSleep>
    return status;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <SX1272Random>:

uint32_t SX1272Random( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1272SetModem( MODEM_LORA );
 8002f16:	2001      	movs	r0, #1
 8002f18:	f001 f8e4 	bl	80040e4 <SX1272SetModem>

    // Disable LoRa modem interrupts
    SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002f1c:	21ff      	movs	r1, #255	; 0xff
 8002f1e:	2011      	movs	r0, #17
 8002f20:	f001 f934 	bl	800418c <SX1272Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8002f24:	2005      	movs	r0, #5
 8002f26:	f001 f8a7 	bl	8004078 <SX1272SetOpMode>

    for( i = 0; i < 32; i++ )
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	e011      	b.n	8002f54 <SX1272Random+0x48>
    {
        DelayMs( 1 );
 8002f30:	2001      	movs	r0, #1
 8002f32:	f001 fe8f 	bl	8004c54 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1272Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002f36:	202c      	movs	r0, #44	; 0x2c
 8002f38:	f001 f93a 	bl	80041b0 <SX1272Read>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 0201 	and.w	r2, r3, #1
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	3301      	adds	r3, #1
 8002f52:	71fb      	strb	r3, [r7, #7]
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	2b1f      	cmp	r3, #31
 8002f58:	d9ea      	bls.n	8002f30 <SX1272Random+0x24>
    }

    SX1272SetSleep( );
 8002f5a:	f000 fe29 	bl	8003bb0 <SX1272SetSleep>

    return rnd;
 8002f5e:	683b      	ldr	r3, [r7, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e017      	b.n	8002fa6 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <GetFskBandwidthRegValue+0x54>)
 8002f7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d30d      	bcc.n	8002fa0 <GetFskBandwidthRegValue+0x38>
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <GetFskBandwidthRegValue+0x54>)
 8002f8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d205      	bcs.n	8002fa0 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <GetFskBandwidthRegValue+0x54>)
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	e006      	b.n	8002fae <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b14      	cmp	r3, #20
 8002faa:	d9e4      	bls.n	8002f76 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8002fac:	e7fe      	b.n	8002fac <GetFskBandwidthRegValue+0x44>
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	080068d8 	.word	0x080068d8

08002fc0 <SX1272SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 f884 	bl	80040e4 <SX1272SetModem>

    switch( modem )
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <SX1272SetRxConfig+0x2a>
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	f000 80cf 	beq.w	8003186 <SX1272SetRxConfig+0x1c6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002fe8:	e1cb      	b.n	8003382 <SX1272SetRxConfig+0x3c2>
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002fea:	4a91      	ldr	r2, [pc, #580]	; (8003230 <SX1272SetRxConfig+0x270>)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6153      	str	r3, [r2, #20]
            SX1272.Settings.Fsk.Datarate = datarate;
 8002ff0:	4a8f      	ldr	r2, [pc, #572]	; (8003230 <SX1272SetRxConfig+0x270>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	61d3      	str	r3, [r2, #28]
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002ff6:	4a8e      	ldr	r2, [pc, #568]	; (8003230 <SX1272SetRxConfig+0x270>)
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	6193      	str	r3, [r2, #24]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002ffc:	4a8c      	ldr	r2, [pc, #560]	; (8003230 <SX1272SetRxConfig+0x270>)
 8002ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003002:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1272.Settings.Fsk.PayloadLen = payloadLen;
 8003006:	4a8a      	ldr	r2, [pc, #552]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003008:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800300c:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8003010:	4a87      	ldr	r2, [pc, #540]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003012:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003016:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 800301a:	4a85      	ldr	r2, [pc, #532]	; (8003230 <SX1272SetRxConfig+0x270>)
 800301c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003020:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 8003024:	4a82      	ldr	r2, [pc, #520]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003026:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800302a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 800302e:	4a80      	ldr	r2, [pc, #512]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003032:	8413      	strh	r3, [r2, #32]
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8003034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa28 	bl	800048c <__aeabi_i2d>
 800303c:	4604      	mov	r4, r0
 800303e:	460d      	mov	r5, r1
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fa13 	bl	800046c <__aeabi_ui2d>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	f04f 0000 	mov.w	r0, #0
 800304e:	4979      	ldr	r1, [pc, #484]	; (8003234 <SX1272SetRxConfig+0x274>)
 8003050:	f7fd fbb0 	bl	80007b4 <__aeabi_ddiv>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <SX1272SetRxConfig+0x278>)
 8003062:	f7fd fa7d 	bl	8000560 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4620      	mov	r0, r4
 800306c:	4629      	mov	r1, r5
 800306e:	f7fd fa77 	bl	8000560 <__aeabi_dmul>
 8003072:	4603      	mov	r3, r0
 8003074:	460c      	mov	r4, r1
 8003076:	4618      	mov	r0, r3
 8003078:	4621      	mov	r1, r4
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	4b6f      	ldr	r3, [pc, #444]	; (800323c <SX1272SetRxConfig+0x27c>)
 8003080:	f7fd fa6e 	bl	8000560 <__aeabi_dmul>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	4618      	mov	r0, r3
 800308a:	4621      	mov	r1, r4
 800308c:	f7fd fd02 	bl	8000a94 <__aeabi_d2uiz>
 8003090:	4602      	mov	r2, r0
 8003092:	4b67      	ldr	r3, [pc, #412]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd f9e8 	bl	800046c <__aeabi_ui2d>
 800309c:	4603      	mov	r3, r0
 800309e:	460c      	mov	r4, r1
 80030a0:	461a      	mov	r2, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	a160      	add	r1, pc, #384	; (adr r1, 8003228 <SX1272SetRxConfig+0x268>)
 80030a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030aa:	f7fd fb83 	bl	80007b4 <__aeabi_ddiv>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	4618      	mov	r0, r3
 80030b4:	4621      	mov	r1, r4
 80030b6:	f7fd fced 	bl	8000a94 <__aeabi_d2uiz>
 80030ba:	4603      	mov	r3, r0
 80030bc:	b29b      	uxth	r3, r3
 80030be:	607b      	str	r3, [r7, #4]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	2002      	movs	r0, #2
 80030ca:	f001 f85f 	bl	800418c <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	4619      	mov	r1, r3
 80030d4:	2003      	movs	r0, #3
 80030d6:	f001 f859 	bl	800418c <SX1272Write>
            SX1272Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80030da:	68b8      	ldr	r0, [r7, #8]
 80030dc:	f7ff ff44 	bl	8002f68 <GetFskBandwidthRegValue>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4619      	mov	r1, r3
 80030e4:	2012      	movs	r0, #18
 80030e6:	f001 f851 	bl	800418c <SX1272Write>
            SX1272Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80030ea:	6a38      	ldr	r0, [r7, #32]
 80030ec:	f7ff ff3c 	bl	8002f68 <GetFskBandwidthRegValue>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	2013      	movs	r0, #19
 80030f6:	f001 f849 	bl	800418c <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80030fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	b29b      	uxth	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4619      	mov	r1, r3
 8003104:	2025      	movs	r0, #37	; 0x25
 8003106:	f001 f841 	bl	800418c <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800310a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	2026      	movs	r0, #38	; 0x26
 8003112:	f001 f83b 	bl	800418c <SX1272Write>
            if( fixLen == 1 )
 8003116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <SX1272SetRxConfig+0x16c>
                SX1272Write( REG_PAYLOADLENGTH, payloadLen );
 800311e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003122:	4619      	mov	r1, r3
 8003124:	2032      	movs	r0, #50	; 0x32
 8003126:	f001 f831 	bl	800418c <SX1272Write>
 800312a:	e003      	b.n	8003134 <SX1272SetRxConfig+0x174>
                SX1272Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800312c:	21ff      	movs	r1, #255	; 0xff
 800312e:	2032      	movs	r0, #50	; 0x32
 8003130:	f001 f82c 	bl	800418c <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8003134:	2030      	movs	r0, #48	; 0x30
 8003136:	f001 f83b 	bl	80041b0 <SX1272Read>
 800313a:	4603      	mov	r3, r0
 800313c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800313e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003142:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003144:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003148:	2a00      	cmp	r2, #0
 800314a:	d001      	beq.n	8003150 <SX1272SetRxConfig+0x190>
 800314c:	2200      	movs	r2, #0
 800314e:	e001      	b.n	8003154 <SX1272SetRxConfig+0x194>
 8003150:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003154:	4313      	orrs	r3, r2
 8003156:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003158:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800315c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800315e:	b25b      	sxtb	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 8003164:	b2db      	uxtb	r3, r3
 8003166:	4619      	mov	r1, r3
 8003168:	2030      	movs	r0, #48	; 0x30
 800316a:	f001 f80f 	bl	800418c <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800316e:	2031      	movs	r0, #49	; 0x31
 8003170:	f001 f81e 	bl	80041b0 <SX1272Read>
 8003174:	4603      	mov	r3, r0
 8003176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317a:	b2db      	uxtb	r3, r3
 800317c:	4619      	mov	r1, r3
 800317e:	2031      	movs	r0, #49	; 0x31
 8003180:	f001 f804 	bl	800418c <SX1272Write>
        break;
 8003184:	e0fd      	b.n	8003382 <SX1272SetRxConfig+0x3c2>
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8003186:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6453      	str	r3, [r2, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 800318c:	4a28      	ldr	r2, [pc, #160]	; (8003230 <SX1272SetRxConfig+0x270>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6493      	str	r3, [r2, #72]	; 0x48
            SX1272.Settings.LoRa.Coderate = coderate;
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <SX1272SetRxConfig+0x270>)
 8003194:	7bbb      	ldrb	r3, [r7, #14]
 8003196:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <SX1272SetRxConfig+0x270>)
 800319c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800319e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1272.Settings.LoRa.FixLen = fixLen;
 80031a2:	4a23      	ldr	r2, [pc, #140]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031a8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1272.Settings.LoRa.PayloadLen = payloadLen;
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031b2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
            SX1272.Settings.LoRa.CrcOn = crcOn;
 80031b6:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80031bc:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80031c6:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80031d0:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 80031d4:	4a16      	ldr	r2, [pc, #88]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80031da:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 80031de:	4a14      	ldr	r2, [pc, #80]	; (8003230 <SX1272SetRxConfig+0x270>)
 80031e0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80031e4:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
            if( datarate > 12 )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d902      	bls.n	80031f4 <SX1272SetRxConfig+0x234>
                datarate = 12;
 80031ee:	230c      	movs	r3, #12
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	e004      	b.n	80031fe <SX1272SetRxConfig+0x23e>
            else if( datarate < 6 )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d801      	bhi.n	80031fe <SX1272SetRxConfig+0x23e>
                datarate = 6;
 80031fa:	2306      	movs	r3, #6
 80031fc:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <SX1272SetRxConfig+0x250>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b0b      	cmp	r3, #11
 8003208:	d008      	beq.n	800321c <SX1272SetRxConfig+0x25c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d005      	beq.n	800321c <SX1272SetRxConfig+0x25c>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d114      	bne.n	8003240 <SX1272SetRxConfig+0x280>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d111      	bne.n	8003240 <SX1272SetRxConfig+0x280>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <SX1272SetRxConfig+0x270>)
 800321e:	2201      	movs	r2, #1
 8003220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003224:	e010      	b.n	8003248 <SX1272SetRxConfig+0x288>
 8003226:	bf00      	nop
 8003228:	00000000 	.word	0x00000000
 800322c:	417e8480 	.word	0x417e8480
 8003230:	20000294 	.word	0x20000294
 8003234:	3ff00000 	.word	0x3ff00000
 8003238:	40200000 	.word	0x40200000
 800323c:	408f4000 	.word	0x408f4000
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003240:	4b52      	ldr	r3, [pc, #328]	; (800338c <SX1272SetRxConfig+0x3cc>)
 8003242:	2200      	movs	r2, #0
 8003244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8003248:	201d      	movs	r0, #29
 800324a:	f000 ffb1 	bl	80041b0 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	b2da      	uxtb	r2, r3
 8003256:	7bbb      	ldrb	r3, [r7, #14]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003260:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003268:	4313      	orrs	r3, r2
 800326a:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 800326c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8003278:	4a44      	ldr	r2, [pc, #272]	; (800338c <SX1272SetRxConfig+0x3cc>)
 800327a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 800327e:	4313      	orrs	r3, r2
 8003280:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003282:	4619      	mov	r1, r3
 8003284:	201d      	movs	r0, #29
 8003286:	f000 ff81 	bl	800418c <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 800328a:	201e      	movs	r0, #30
 800328c:	f000 ff90 	bl	80041b0 <SX1272Read>
 8003290:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80032a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	201e      	movs	r0, #30
 80032ba:	f000 ff67 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80032be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	4619      	mov	r1, r3
 80032c4:	201f      	movs	r0, #31
 80032c6:	f000 ff61 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80032ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	2020      	movs	r0, #32
 80032d6:	f000 ff59 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80032da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4619      	mov	r1, r3
 80032e0:	2021      	movs	r0, #33	; 0x21
 80032e2:	f000 ff53 	bl	800418c <SX1272Write>
            if( fixLen == 1 )
 80032e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <SX1272SetRxConfig+0x33a>
                SX1272Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80032ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80032f2:	4619      	mov	r1, r3
 80032f4:	2022      	movs	r0, #34	; 0x22
 80032f6:	f000 ff49 	bl	800418c <SX1272Write>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <SX1272SetRxConfig+0x3cc>)
 80032fc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003300:	2b00      	cmp	r3, #0
 8003302:	d011      	beq.n	8003328 <SX1272SetRxConfig+0x368>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003304:	204b      	movs	r0, #75	; 0x4b
 8003306:	f000 ff53 	bl	80041b0 <SX1272Read>
 800330a:	4603      	mov	r3, r0
 800330c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	204b      	movs	r0, #75	; 0x4b
 8003316:	f000 ff39 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <SX1272SetRxConfig+0x3cc>)
 800331c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003320:	4619      	mov	r1, r3
 8003322:	2024      	movs	r0, #36	; 0x24
 8003324:	f000 ff32 	bl	800418c <SX1272Write>
            if( datarate == 6 )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d114      	bne.n	8003358 <SX1272SetRxConfig+0x398>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 800332e:	2031      	movs	r0, #49	; 0x31
 8003330:	f000 ff3e 	bl	80041b0 <SX1272Read>
 8003334:	4603      	mov	r3, r0
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800333e:	f043 0305 	orr.w	r3, r3, #5
 8003342:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4619      	mov	r1, r3
 8003348:	2031      	movs	r0, #49	; 0x31
 800334a:	f000 ff1f 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 800334e:	210c      	movs	r1, #12
 8003350:	2037      	movs	r0, #55	; 0x37
 8003352:	f000 ff1b 	bl	800418c <SX1272Write>
        break;
 8003356:	e013      	b.n	8003380 <SX1272SetRxConfig+0x3c0>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003358:	2031      	movs	r0, #49	; 0x31
 800335a:	f000 ff29 	bl	80041b0 <SX1272Read>
 800335e:	4603      	mov	r3, r0
 8003360:	b25b      	sxtb	r3, r3
 8003362:	f023 0307 	bic.w	r3, r3, #7
 8003366:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003368:	f043 0303 	orr.w	r3, r3, #3
 800336c:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	2031      	movs	r0, #49	; 0x31
 8003374:	f000 ff0a 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003378:	210a      	movs	r1, #10
 800337a:	2037      	movs	r0, #55	; 0x37
 800337c:	f000 ff06 	bl	800418c <SX1272Write>
        break;
 8003380:	bf00      	nop
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bdb0      	pop	{r4, r5, r7, pc}
 800338a:	bf00      	nop
 800338c:	20000294 	.word	0x20000294

08003390 <SX1272SetTxConfig>:
void SX1272SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60ba      	str	r2, [r7, #8]
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4603      	mov	r3, r0
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	460b      	mov	r3, r1
 80033a0:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fe9d 	bl	80040e4 <SX1272SetModem>

    LoRaBoardCallbacks->SX1272BoardSetRfTxPower( power );
 80033aa:	4bb9      	ldr	r3, [pc, #740]	; (8003690 <SX1272SetTxConfig+0x300>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3

    switch( modem )
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <SX1272SetTxConfig+0x36>
 80033be:	2b01      	cmp	r3, #1
 80033c0:	f000 8099 	beq.w	80034f6 <SX1272SetTxConfig+0x166>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80033c4:	e17d      	b.n	80036c2 <SX1272SetTxConfig+0x332>
            SX1272.Settings.Fsk.Power = power;
 80033c6:	4ab3      	ldr	r2, [pc, #716]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033c8:	7bbb      	ldrb	r3, [r7, #14]
 80033ca:	7313      	strb	r3, [r2, #12]
            SX1272.Settings.Fsk.Fdev = fdev;
 80033cc:	4ab1      	ldr	r2, [pc, #708]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6113      	str	r3, [r2, #16]
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 80033d2:	4ab0      	ldr	r2, [pc, #704]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6153      	str	r3, [r2, #20]
            SX1272.Settings.Fsk.Datarate = datarate;
 80033d8:	4aae      	ldr	r2, [pc, #696]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	61d3      	str	r3, [r2, #28]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 80033de:	4aad      	ldr	r2, [pc, #692]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033e2:	8413      	strh	r3, [r2, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 80033e4:	4aab      	ldr	r2, [pc, #684]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033ea:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1272.Settings.Fsk.CrcOn = crcOn;
 80033ee:	4aa9      	ldr	r2, [pc, #676]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80033f4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 80033f8:	4aa6      	ldr	r2, [pc, #664]	; (8003694 <SX1272SetTxConfig+0x304>)
 80033fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80033fe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8003402:	4aa4      	ldr	r2, [pc, #656]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	6293      	str	r3, [r2, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8003408:	68b8      	ldr	r0, [r7, #8]
 800340a:	f7fd f82f 	bl	800046c <__aeabi_ui2d>
 800340e:	a39c      	add	r3, pc, #624	; (adr r3, 8003680 <SX1272SetTxConfig+0x2f0>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f7fd f9ce 	bl	80007b4 <__aeabi_ddiv>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	4618      	mov	r0, r3
 800341e:	4621      	mov	r1, r4
 8003420:	f7fd fb38 	bl	8000a94 <__aeabi_d2uiz>
 8003424:	4603      	mov	r3, r0
 8003426:	b29b      	uxth	r3, r3
 8003428:	60bb      	str	r3, [r7, #8]
            SX1272Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	2004      	movs	r0, #4
 8003434:	f000 feaa 	bl	800418c <SX1272Write>
            SX1272Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	2005      	movs	r0, #5
 8003440:	f000 fea4 	bl	800418c <SX1272Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003444:	6a38      	ldr	r0, [r7, #32]
 8003446:	f7fd f811 	bl	800046c <__aeabi_ui2d>
 800344a:	4603      	mov	r3, r0
 800344c:	460c      	mov	r4, r1
 800344e:	461a      	mov	r2, r3
 8003450:	4623      	mov	r3, r4
 8003452:	a18d      	add	r1, pc, #564	; (adr r1, 8003688 <SX1272SetTxConfig+0x2f8>)
 8003454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003458:	f7fd f9ac 	bl	80007b4 <__aeabi_ddiv>
 800345c:	4603      	mov	r3, r0
 800345e:	460c      	mov	r4, r1
 8003460:	4618      	mov	r0, r3
 8003462:	4621      	mov	r1, r4
 8003464:	f7fd fb16 	bl	8000a94 <__aeabi_d2uiz>
 8003468:	4603      	mov	r3, r0
 800346a:	b29b      	uxth	r3, r3
 800346c:	623b      	str	r3, [r7, #32]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	2002      	movs	r0, #2
 8003478:	f000 fe88 	bl	800418c <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4619      	mov	r1, r3
 8003482:	2003      	movs	r0, #3
 8003484:	f000 fe82 	bl	800418c <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	b29b      	uxth	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	2025      	movs	r0, #37	; 0x25
 8003494:	f000 fe7a 	bl	800418c <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8003498:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	2026      	movs	r0, #38	; 0x26
 80034a0:	f000 fe74 	bl	800418c <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 80034a4:	2030      	movs	r0, #48	; 0x30
 80034a6:	f000 fe83 	bl	80041b0 <SX1272Read>
 80034aa:	4603      	mov	r3, r0
 80034ac:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80034ae:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80034b2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80034b4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80034b8:	2a00      	cmp	r2, #0
 80034ba:	d001      	beq.n	80034c0 <SX1272SetTxConfig+0x130>
 80034bc:	2200      	movs	r2, #0
 80034be:	e001      	b.n	80034c4 <SX1272SetTxConfig+0x134>
 80034c0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80034c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80034cc:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	2030      	movs	r0, #48	; 0x30
 80034da:	f000 fe57 	bl	800418c <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80034de:	2031      	movs	r0, #49	; 0x31
 80034e0:	f000 fe66 	bl	80041b0 <SX1272Read>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	2031      	movs	r0, #49	; 0x31
 80034f0:	f000 fe4c 	bl	800418c <SX1272Write>
        break;
 80034f4:	e0e5      	b.n	80036c2 <SX1272SetTxConfig+0x332>
            SX1272.Settings.LoRa.Power = power;
 80034f6:	4a67      	ldr	r2, [pc, #412]	; (8003694 <SX1272SetTxConfig+0x304>)
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 80034fe:	4a65      	ldr	r2, [pc, #404]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6453      	str	r3, [r2, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8003504:	4a63      	ldr	r2, [pc, #396]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	6493      	str	r3, [r2, #72]	; 0x48
            SX1272.Settings.LoRa.Coderate = coderate;
 800350a:	4a62      	ldr	r2, [pc, #392]	; (8003694 <SX1272SetTxConfig+0x304>)
 800350c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003510:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8003514:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003518:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1272.Settings.LoRa.FixLen = fixLen;
 800351c:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <SX1272SetTxConfig+0x304>)
 800351e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003522:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8003526:	4a5b      	ldr	r2, [pc, #364]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003528:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800352c:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003532:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003536:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1272.Settings.LoRa.CrcOn = crcOn;
 800353a:	4a56      	ldr	r2, [pc, #344]	; (8003694 <SX1272SetTxConfig+0x304>)
 800353c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003540:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8003544:	4a53      	ldr	r2, [pc, #332]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003546:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800354a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1272.Settings.LoRa.TxTimeout = timeout;
 800354e:	4a51      	ldr	r2, [pc, #324]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
            if( datarate > 12 )
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d902      	bls.n	8003560 <SX1272SetTxConfig+0x1d0>
                datarate = 12;
 800355a:	230c      	movs	r3, #12
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	e004      	b.n	800356a <SX1272SetTxConfig+0x1da>
            else if( datarate < 6 )
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d801      	bhi.n	800356a <SX1272SetTxConfig+0x1da>
                datarate = 6;
 8003566:	2306      	movs	r3, #6
 8003568:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <SX1272SetTxConfig+0x1ec>
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2b0b      	cmp	r3, #11
 8003574:	d008      	beq.n	8003588 <SX1272SetTxConfig+0x1f8>
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d005      	beq.n	8003588 <SX1272SetTxConfig+0x1f8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <SX1272SetTxConfig+0x202>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d104      	bne.n	8003592 <SX1272SetTxConfig+0x202>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003588:	4b42      	ldr	r3, [pc, #264]	; (8003694 <SX1272SetTxConfig+0x304>)
 800358a:	2201      	movs	r2, #1
 800358c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003590:	e003      	b.n	800359a <SX1272SetTxConfig+0x20a>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <SX1272SetTxConfig+0x304>)
 8003594:	2200      	movs	r2, #0
 8003596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <SX1272SetTxConfig+0x304>)
 800359c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d011      	beq.n	80035c8 <SX1272SetTxConfig+0x238>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80035a4:	204b      	movs	r0, #75	; 0x4b
 80035a6:	f000 fe03 	bl	80041b0 <SX1272Read>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	204b      	movs	r0, #75	; 0x4b
 80035b6:	f000 fde9 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <SX1272SetTxConfig+0x304>)
 80035bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035c0:	4619      	mov	r1, r3
 80035c2:	2024      	movs	r0, #36	; 0x24
 80035c4:	f000 fde2 	bl	800418c <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 80035c8:	201d      	movs	r0, #29
 80035ca:	f000 fdf1 	bl	80041b0 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	019b      	lsls	r3, r3, #6
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 80035e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 80035ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 80035fa:	4a26      	ldr	r2, [pc, #152]	; (8003694 <SX1272SetTxConfig+0x304>)
 80035fc:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003600:	4313      	orrs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003604:	4619      	mov	r1, r3
 8003606:	201d      	movs	r0, #29
 8003608:	f000 fdc0 	bl	800418c <SX1272Write>
                        ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 800360c:	201e      	movs	r0, #30
 800360e:	f000 fdcf 	bl	80041b0 <SX1272Read>
 8003612:	4603      	mov	r3, r0
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	b2da      	uxtb	r2, r3
                          ( datarate << 4 ) );
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8003622:	4313      	orrs	r3, r2
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	201e      	movs	r0, #30
 800362a:	f000 fdaf 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800362e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4619      	mov	r1, r3
 8003638:	2020      	movs	r0, #32
 800363a:	f000 fda7 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800363e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4619      	mov	r1, r3
 8003644:	2021      	movs	r0, #33	; 0x21
 8003646:	f000 fda1 	bl	800418c <SX1272Write>
            if( datarate == 6 )
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2b06      	cmp	r3, #6
 800364e:	d123      	bne.n	8003698 <SX1272SetTxConfig+0x308>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003650:	2031      	movs	r0, #49	; 0x31
 8003652:	f000 fdad 	bl	80041b0 <SX1272Read>
 8003656:	4603      	mov	r3, r0
 8003658:	b25b      	sxtb	r3, r3
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003660:	f043 0305 	orr.w	r3, r3, #5
 8003664:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4619      	mov	r1, r3
 800366a:	2031      	movs	r0, #49	; 0x31
 800366c:	f000 fd8e 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003670:	210c      	movs	r1, #12
 8003672:	2037      	movs	r0, #55	; 0x37
 8003674:	f000 fd8a 	bl	800418c <SX1272Write>
        break;
 8003678:	e022      	b.n	80036c0 <SX1272SetTxConfig+0x330>
 800367a:	bf00      	nop
 800367c:	f3af 8000 	nop.w
 8003680:	00000000 	.word	0x00000000
 8003684:	404e8480 	.word	0x404e8480
 8003688:	00000000 	.word	0x00000000
 800368c:	417e8480 	.word	0x417e8480
 8003690:	20000160 	.word	0x20000160
 8003694:	20000294 	.word	0x20000294
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003698:	2031      	movs	r0, #49	; 0x31
 800369a:	f000 fd89 	bl	80041b0 <SX1272Read>
 800369e:	4603      	mov	r3, r0
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80036a8:	f043 0303 	orr.w	r3, r3, #3
 80036ac:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	2031      	movs	r0, #49	; 0x31
 80036b4:	f000 fd6a 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 80036b8:	210a      	movs	r1, #10
 80036ba:	2037      	movs	r0, #55	; 0x37
 80036bc:	f000 fd66 	bl	800418c <SX1272Write>
        break;
 80036c0:	bf00      	nop
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd90      	pop	{r4, r7, pc}
 80036ca:	bf00      	nop
 80036cc:	0000      	movs	r0, r0
	...

080036d0 <SX1272GetTimeOnAir>:

uint32_t SX1272GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 80036d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d2:	b095      	sub	sp, #84	; 0x54
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	460a      	mov	r2, r1
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	4613      	mov	r3, r2
 80036de:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <SX1272GetTimeOnAir+0x22>
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f000 8092 	beq.w	8003814 <SX1272GetTimeOnAir+0x144>
 80036f0:	e1a0      	b.n	8003a34 <SX1272GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80036f2:	4bad      	ldr	r3, [pc, #692]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80036f4:	8c1b      	ldrh	r3, [r3, #32]
 80036f6:	461c      	mov	r4, r3
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80036f8:	2027      	movs	r0, #39	; 0x27
 80036fa:	f000 fd59 	bl	80041b0 <SX1272Read>
 80036fe:	4603      	mov	r3, r0
 8003700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003704:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003706:	4423      	add	r3, r4
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc febf 	bl	800048c <__aeabi_i2d>
 800370e:	4604      	mov	r4, r0
 8003710:	460d      	mov	r5, r1
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003712:	4ba5      	ldr	r3, [pc, #660]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 8003714:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <SX1272GetTimeOnAir+0x56>
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	e002      	b.n	800372c <SX1272GetTimeOnAir+0x5c>
 8003726:	f04f 0000 	mov.w	r0, #0
 800372a:	49a0      	ldr	r1, [pc, #640]	; (80039ac <SX1272GetTimeOnAir+0x2dc>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800372c:	4622      	mov	r2, r4
 800372e:	462b      	mov	r3, r5
 8003730:	f7fc fd60 	bl	80001f4 <__adddf3>
 8003734:	4603      	mov	r3, r0
 8003736:	460c      	mov	r4, r1
 8003738:	4625      	mov	r5, r4
 800373a:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800373c:	2030      	movs	r0, #48	; 0x30
 800373e:	f000 fd37 	bl	80041b0 <SX1272Read>
 8003742:	4603      	mov	r3, r0
 8003744:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <SX1272GetTimeOnAir+0x84>
 800374c:	f04f 0000 	mov.w	r0, #0
 8003750:	4996      	ldr	r1, [pc, #600]	; (80039ac <SX1272GetTimeOnAir+0x2dc>)
 8003752:	e003      	b.n	800375c <SX1272GetTimeOnAir+0x8c>
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800375c:	4622      	mov	r2, r4
 800375e:	462b      	mov	r3, r5
 8003760:	f7fc fd48 	bl	80001f4 <__adddf3>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	4625      	mov	r5, r4
 800376a:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800376c:	79bb      	ldrb	r3, [r7, #6]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fc fe8c 	bl	800048c <__aeabi_i2d>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4620      	mov	r0, r4
 800377a:	4629      	mov	r1, r5
 800377c:	f7fc fd3a 	bl	80001f4 <__adddf3>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	4625      	mov	r5, r4
 8003786:	461c      	mov	r4, r3
                                     pktLen +
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003788:	4b87      	ldr	r3, [pc, #540]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 800378a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <SX1272GetTimeOnAir+0xcc>
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800379a:	e003      	b.n	80037a4 <SX1272GetTimeOnAir+0xd4>
 800379c:	f04f 0000 	mov.w	r0, #0
 80037a0:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	f7fc fd24 	bl	80001f4 <__adddf3>
 80037ac:	4603      	mov	r3, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	4618      	mov	r0, r3
 80037b2:	4621      	mov	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4b7d      	ldr	r3, [pc, #500]	; (80039b0 <SX1272GetTimeOnAir+0x2e0>)
 80037ba:	f7fc fed1 	bl	8000560 <__aeabi_dmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	4625      	mov	r5, r4
 80037c4:	461c      	mov	r4, r3
                                     SX1272.Settings.Fsk.Datarate ) * 1000 );
 80037c6:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80037c8:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fe4e 	bl	800046c <__aeabi_ui2d>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4620      	mov	r0, r4
 80037d6:	4629      	mov	r1, r5
 80037d8:	f7fc ffec 	bl	80007b4 <__aeabi_ddiv>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4618      	mov	r0, r3
 80037e2:	4621      	mov	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <SX1272GetTimeOnAir+0x2e4>)
 80037ea:	f7fc feb9 	bl	8000560 <__aeabi_dmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	ec44 3b17 	vmov	d7, r3, r4
 80037f6:	eeb0 0a47 	vmov.f32	s0, s14
 80037fa:	eef0 0a67 	vmov.f32	s1, s15
 80037fe:	f002 ffc7 	bl	8006790 <round>
 8003802:	ec54 3b10 	vmov	r3, r4, d0
 8003806:	4618      	mov	r0, r3
 8003808:	4621      	mov	r1, r4
 800380a:	f7fd f943 	bl	8000a94 <__aeabi_d2uiz>
 800380e:	4603      	mov	r3, r0
 8003810:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8003812:	e10f      	b.n	8003a34 <SX1272GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f04f 0400 	mov.w	r4, #0
 800381c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            switch( SX1272.Settings.LoRa.Bandwidth )
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	2b01      	cmp	r3, #1
 8003826:	d00a      	beq.n	800383e <SX1272GetTimeOnAir+0x16e>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d302      	bcc.n	8003832 <SX1272GetTimeOnAir+0x162>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d00c      	beq.n	800384a <SX1272GetTimeOnAir+0x17a>
 8003830:	e011      	b.n	8003856 <SX1272GetTimeOnAir+0x186>
            {
            case 0: // 125 kHz
                bw = 125000;
 8003832:	a457      	add	r4, pc, #348	; (adr r4, 8003990 <SX1272GetTimeOnAir+0x2c0>)
 8003834:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003838:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 800383c:	e00b      	b.n	8003856 <SX1272GetTimeOnAir+0x186>
            case 1: // 250 kHz
                bw = 250000;
 800383e:	a456      	add	r4, pc, #344	; (adr r4, 8003998 <SX1272GetTimeOnAir+0x2c8>)
 8003840:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003844:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003848:	e005      	b.n	8003856 <SX1272GetTimeOnAir+0x186>
            case 2: // 500 kHz
                bw = 500000;
 800384a:	a455      	add	r4, pc, #340	; (adr r4, 80039a0 <SX1272GetTimeOnAir+0x2d0>)
 800384c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003850:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003854:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 8003856:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2201      	movs	r2, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe13 	bl	800048c <__aeabi_i2d>
 8003866:	4603      	mov	r3, r0
 8003868:	460c      	mov	r4, r1
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003872:	f7fc ff9f 	bl	80007b4 <__aeabi_ddiv>
 8003876:	4603      	mov	r3, r0
 8003878:	460c      	mov	r4, r1
 800387a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
            double ts = 1 / rs;
 800387e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	4949      	ldr	r1, [pc, #292]	; (80039ac <SX1272GetTimeOnAir+0x2dc>)
 8003888:	f7fc ff94 	bl	80007b4 <__aeabi_ddiv>
 800388c:	4603      	mov	r3, r0
 800388e:	460c      	mov	r4, r1
 8003890:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8003894:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 8003896:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fdf6 	bl	800048c <__aeabi_i2d>
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <SX1272GetTimeOnAir+0x2e8>)
 80038a6:	f7fc fca5 	bl	80001f4 <__adddf3>
 80038aa:	4603      	mov	r3, r0
 80038ac:	460c      	mov	r4, r1
 80038ae:	461a      	mov	r2, r3
 80038b0:	4623      	mov	r3, r4
 80038b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038b6:	f7fc fe53 	bl	8000560 <__aeabi_dmul>
 80038ba:	4603      	mov	r3, r0
 80038bc:	460c      	mov	r4, r1
 80038be:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80038c2:	79bb      	ldrb	r3, [r7, #6]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80038d0:	4a35      	ldr	r2, [pc, #212]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80038d2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	441a      	add	r2, r3
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80038da:	4b33      	ldr	r3, [pc, #204]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80038dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <SX1272GetTimeOnAir+0x218>
 80038e4:	2314      	movs	r3, #20
 80038e6:	e000      	b.n	80038ea <SX1272GetTimeOnAir+0x21a>
 80038e8:	2300      	movs	r3, #0
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fdbc 	bl	800046c <__aeabi_ui2d>
 80038f4:	4604      	mov	r4, r0
 80038f6:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80038fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 80038fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <SX1272GetTimeOnAir+0x23a>
 8003906:	2302      	movs	r3, #2
 8003908:	e000      	b.n	800390c <SX1272GetTimeOnAir+0x23c>
 800390a:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fdab 	bl	800046c <__aeabi_ui2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	f7fc ff49 	bl	80007b4 <__aeabi_ddiv>
 8003922:	4603      	mov	r3, r0
 8003924:	460c      	mov	r4, r1
 8003926:	ec44 3b17 	vmov	d7, r3, r4
 800392a:	eeb0 0a47 	vmov.f32	s0, s14
 800392e:	eef0 0a67 	vmov.f32	s1, s15
 8003932:	f002 fe29 	bl	8006588 <ceil>
 8003936:	ec56 5b10 	vmov	r5, r6, d0
                                 ( SX1272.Settings.LoRa.Coderate + 4 );
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <SX1272GetTimeOnAir+0x2d8>)
 800393c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003940:	3304      	adds	r3, #4
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fda2 	bl	800048c <__aeabi_i2d>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800394c:	461a      	mov	r2, r3
 800394e:	4623      	mov	r3, r4
 8003950:	4628      	mov	r0, r5
 8003952:	4631      	mov	r1, r6
 8003954:	f7fc fe04 	bl	8000560 <__aeabi_dmul>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	e9c7 3408 	strd	r3, r4, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800396c:	f7fd f888 	bl	8000a80 <__aeabi_dcmpgt>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d022      	beq.n	80039bc <SX1272GetTimeOnAir+0x2ec>
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <SX1272GetTimeOnAir+0x2e0>)
 800397c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003980:	f7fc fc38 	bl	80001f4 <__adddf3>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	e01b      	b.n	80039c2 <SX1272GetTimeOnAir+0x2f2>
 800398a:	bf00      	nop
 800398c:	f3af 8000 	nop.w
 8003990:	00000000 	.word	0x00000000
 8003994:	40fe8480 	.word	0x40fe8480
 8003998:	00000000 	.word	0x00000000
 800399c:	410e8480 	.word	0x410e8480
 80039a0:	00000000 	.word	0x00000000
 80039a4:	411e8480 	.word	0x411e8480
 80039a8:	20000294 	.word	0x20000294
 80039ac:	3ff00000 	.word	0x3ff00000
 80039b0:	40200000 	.word	0x40200000
 80039b4:	408f4000 	.word	0x408f4000
 80039b8:	40110000 	.word	0x40110000
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	4c21      	ldr	r4, [pc, #132]	; (8003a48 <SX1272GetTimeOnAir+0x378>)
 80039c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
            double tPayload = nPayload * ts;
 80039c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039ce:	f7fc fdc7 	bl	8000560 <__aeabi_dmul>
 80039d2:	4603      	mov	r3, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	e9c7 3404 	strd	r3, r4, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80039da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039e2:	f7fc fc07 	bl	80001f4 <__adddf3>
 80039e6:	4603      	mov	r3, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <SX1272GetTimeOnAir+0x37c>)
 80039f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039f8:	f7fc fdb2 	bl	8000560 <__aeabi_dmul>
 80039fc:	4603      	mov	r3, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	4618      	mov	r0, r3
 8003a02:	4621      	mov	r1, r4
 8003a04:	a30e      	add	r3, pc, #56	; (adr r3, 8003a40 <SX1272GetTimeOnAir+0x370>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fbf3 	bl	80001f4 <__adddf3>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	460c      	mov	r4, r1
 8003a12:	ec44 3b17 	vmov	d7, r3, r4
 8003a16:	eeb0 0a47 	vmov.f32	s0, s14
 8003a1a:	eef0 0a67 	vmov.f32	s1, s15
 8003a1e:	f002 fe33 	bl	8006688 <floor>
 8003a22:	ec54 3b10 	vmov	r3, r4, d0
 8003a26:	4618      	mov	r0, r3
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7fd f833 	bl	8000a94 <__aeabi_d2uiz>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8003a32:	bf00      	nop
    }
    return airTime;
 8003a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3754      	adds	r7, #84	; 0x54
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	d916872b 	.word	0xd916872b
 8003a44:	3feff7ce 	.word	0x3feff7ce
 8003a48:	40200000 	.word	0x40200000
 8003a4c:	408f4000 	.word	0x408f4000

08003a50 <SX1272Send>:

void SX1272Send( uint8_t *buffer, uint8_t size )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

    switch( SX1272.Settings.Modem )
 8003a60:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <SX1272Send+0x158>)
 8003a62:	795b      	ldrb	r3, [r3, #5]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <SX1272Send+0x1e>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d045      	beq.n	8003af8 <SX1272Send+0xa8>
 8003a6c:	e094      	b.n	8003b98 <SX1272Send+0x148>
    {
    case MODEM_FSK:
        {
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <SX1272Send+0x158>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = size;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <SX1272Send+0x158>)
 8003a7a:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1272.Settings.Fsk.FixLen == false )
 8003a7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <SX1272Send+0x158>)
 8003a7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a82:	f083 0301 	eor.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <SX1272Send+0x48>
            {
                SX1272WriteFifo( ( uint8_t* )&size, 1 );
 8003a8c:	1cfb      	adds	r3, r7, #3
 8003a8e:	2101      	movs	r1, #1
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fc05 	bl	80042a0 <SX1272WriteFifo>
 8003a96:	e004      	b.n	8003aa2 <SX1272Send+0x52>
            }
            else
            {
                SX1272Write( REG_PAYLOADLENGTH, size );
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	2032      	movs	r0, #50	; 0x32
 8003a9e:	f000 fb75 	bl	800418c <SX1272Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <SX1272Send+0x68>
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d804      	bhi.n	8003ab8 <SX1272Send+0x68>
            {
                SX1272.Settings.FskPacketHandler.ChunkSize = size;
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <SX1272Send+0x158>)
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab6:	e00a      	b.n	8003ace <SX1272Send+0x7e>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	483a      	ldr	r0, [pc, #232]	; (8003bac <SX1272Send+0x15c>)
 8003ac2:	f001 faef 	bl	80050a4 <memcpy1>
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <SX1272Send+0x158>)
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
            }

            // Write payload buffer
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <SX1272Send+0x158>)
 8003ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fbe2 	bl	80042a0 <SX1272WriteFifo>
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 8003adc:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <SX1272Send+0x158>)
 8003ade:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <SX1272Send+0x158>)
 8003ae2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <SX1272Send+0x158>)
 8003aee:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1272.Settings.Fsk.TxTimeout;
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <SX1272Send+0x158>)
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003af6:	e04f      	b.n	8003b98 <SX1272Send+0x148>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <SX1272Send+0x158>)
 8003afa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00f      	beq.n	8003b22 <SX1272Send+0xd2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003b02:	2033      	movs	r0, #51	; 0x33
 8003b04:	f000 fb54 	bl	80041b0 <SX1272Read>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	2033      	movs	r0, #51	; 0x33
 8003b14:	f000 fb3a 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003b18:	2119      	movs	r1, #25
 8003b1a:	203b      	movs	r0, #59	; 0x3b
 8003b1c:	f000 fb36 	bl	800418c <SX1272Write>
 8003b20:	e013      	b.n	8003b4a <SX1272Send+0xfa>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003b22:	2033      	movs	r0, #51	; 0x33
 8003b24:	f000 fb44 	bl	80041b0 <SX1272Read>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	2033      	movs	r0, #51	; 0x33
 8003b3e:	f000 fb25 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003b42:	211d      	movs	r1, #29
 8003b44:	203b      	movs	r0, #59	; 0x3b
 8003b46:	f000 fb21 	bl	800418c <SX1272Write>
            }

            SX1272.Settings.LoRaPacketHandler.Size = size;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <SX1272Send+0x158>)
 8003b4e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

            // Initializes the payload size
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	4619      	mov	r1, r3
 8003b56:	2022      	movs	r0, #34	; 0x22
 8003b58:	f000 fb18 	bl	800418c <SX1272Write>

            // Full buffer used for Tx
            SX1272Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	200e      	movs	r0, #14
 8003b60:	f000 fb14 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8003b64:	2100      	movs	r1, #0
 8003b66:	200d      	movs	r0, #13
 8003b68:	f000 fb10 	bl	800418c <SX1272Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1272Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f000 fb1f 	bl	80041b0 <SX1272Read>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d104      	bne.n	8003b86 <SX1272Send+0x136>
            {
                SX1272SetStby( );
 8003b7c:	f000 f836 	bl	8003bec <SX1272SetStby>
                DelayMs( 1 );
 8003b80:	2001      	movs	r0, #1
 8003b82:	f001 f867 	bl	8004c54 <DelayMs>
            }
            // Write payload buffer
            SX1272WriteFifo( buffer, size );
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fb88 	bl	80042a0 <SX1272WriteFifo>
            txTimeout = SX1272.Settings.LoRa.TxTimeout;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <SX1272Send+0x158>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003b96:	bf00      	nop
    }

    SX1272SetTx( txTimeout );
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f91f 	bl	8003ddc <SX1272SetTx>
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000294 	.word	0x20000294
 8003bac:	20000060 	.word	0x20000060

08003bb0 <SX1272SetSleep>:

void SX1272SetSleep( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003bb4:	4809      	ldr	r0, [pc, #36]	; (8003bdc <SX1272SetSleep+0x2c>)
 8003bb6:	f001 f921 	bl	8004dfc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003bba:	4809      	ldr	r0, [pc, #36]	; (8003be0 <SX1272SetSleep+0x30>)
 8003bbc:	f001 f91e 	bl	8004dfc <TimerStop>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f000 fa59 	bl	8004078 <SX1272SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1272BoardSetXO( RESET );
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <SX1272SetSleep+0x34>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2000      	movs	r0, #0
 8003bce:	4798      	blx	r3

    SX1272.Settings.State = RF_IDLE;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <SX1272SetSleep+0x38>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	711a      	strb	r2, [r3, #4]
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000032c 	.word	0x2000032c
 8003be0:	200002fc 	.word	0x200002fc
 8003be4:	20000160 	.word	0x20000160
 8003be8:	20000294 	.word	0x20000294

08003bec <SX1272SetStby>:

void SX1272SetStby( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003bf0:	4806      	ldr	r0, [pc, #24]	; (8003c0c <SX1272SetStby+0x20>)
 8003bf2:	f001 f903 	bl	8004dfc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003bf6:	4806      	ldr	r0, [pc, #24]	; (8003c10 <SX1272SetStby+0x24>)
 8003bf8:	f001 f900 	bl	8004dfc <TimerStop>

    SX1272SetOpMode( RF_OPMODE_STANDBY );
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f000 fa3b 	bl	8004078 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <SX1272SetStby+0x28>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	711a      	strb	r2, [r3, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	2000032c 	.word	0x2000032c
 8003c10:	200002fc 	.word	0x200002fc
 8003c14:	20000294 	.word	0x20000294

08003c18 <SX1272SetRx>:

void SX1272SetRx( uint32_t timeout )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 8003c24:	4868      	ldr	r0, [pc, #416]	; (8003dc8 <SX1272SetRx+0x1b0>)
 8003c26:	f001 f8e9 	bl	8004dfc <TimerStop>

    switch( SX1272.Settings.Modem )
 8003c2a:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003c2c:	795b      	ldrb	r3, [r3, #5]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <SX1272SetRx+0x20>
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d03c      	beq.n	8003cb0 <SX1272SetRx+0x98>
 8003c36:	e095      	b.n	8003d64 <SX1272SetRx+0x14c>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003c3a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c3e:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003c40:	2040      	movs	r0, #64	; 0x40
 8003c42:	f000 fab5 	bl	80041b0 <SX1272Read>
 8003c46:	4603      	mov	r3, r0
 8003c48:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8003c50:	f043 030c 	orr.w	r3, r3, #12
 8003c54:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4619      	mov	r1, r3
 8003c5a:	2040      	movs	r0, #64	; 0x40
 8003c5c:	f000 fa96 	bl	800418c <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003c60:	2041      	movs	r0, #65	; 0x41
 8003c62:	f000 faa5 	bl	80041b0 <SX1272Read>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	2041      	movs	r0, #65	; 0x41
 8003c72:	f000 fa8b 	bl	800418c <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 8003c76:	2035      	movs	r0, #53	; 0x35
 8003c78:	f000 fa9a 	bl	80041b0 <SX1272Read>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4b51      	ldr	r3, [pc, #324]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

            SX1272Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003c8a:	211e      	movs	r1, #30
 8003c8c:	200d      	movs	r0, #13
 8003c8e:	f000 fa7d 	bl	800418c <SX1272Write>

            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003c92:	4b4e      	ldr	r3, [pc, #312]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 8003ca8:	4b48      	ldr	r3, [pc, #288]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 8003cae:	e059      	b.n	8003d64 <SX1272SetRx+0x14c>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003cb2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00f      	beq.n	8003cda <SX1272SetRx+0xc2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003cba:	2033      	movs	r0, #51	; 0x33
 8003cbc:	f000 fa78 	bl	80041b0 <SX1272Read>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	2033      	movs	r0, #51	; 0x33
 8003ccc:	f000 fa5e 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003cd0:	2119      	movs	r1, #25
 8003cd2:	203b      	movs	r0, #59	; 0x3b
 8003cd4:	f000 fa5a 	bl	800418c <SX1272Write>
 8003cd8:	e013      	b.n	8003d02 <SX1272SetRx+0xea>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003cda:	2033      	movs	r0, #51	; 0x33
 8003cdc:	f000 fa68 	bl	80041b0 <SX1272Read>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b25b      	sxtb	r3, r3
 8003ce4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8003ce8:	b25b      	sxtb	r3, r3
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	2033      	movs	r0, #51	; 0x33
 8003cf6:	f000 fa49 	bl	800418c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003cfa:	211d      	movs	r1, #29
 8003cfc:	203b      	movs	r0, #59	; 0x3b
 8003cfe:	f000 fa45 	bl	800418c <SX1272Write>
            }

            rxContinuous = SX1272.Settings.LoRa.RxContinuous;
 8003d02:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003d04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003d08:	73fb      	strb	r3, [r7, #15]

            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003d0c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00f      	beq.n	8003d34 <SX1272SetRx+0x11c>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003d14:	211d      	movs	r1, #29
 8003d16:	2011      	movs	r0, #17
 8003d18:	f000 fa38 	bl	800418c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003d1c:	2040      	movs	r0, #64	; 0x40
 8003d1e:	f000 fa47 	bl	80041b0 <SX1272Read>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	2040      	movs	r0, #64	; 0x40
 8003d2e:	f000 fa2d 	bl	800418c <SX1272Write>
 8003d32:	e00e      	b.n	8003d52 <SX1272SetRx+0x13a>
            }
            else
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003d34:	211f      	movs	r1, #31
 8003d36:	2011      	movs	r0, #17
 8003d38:	f000 fa28 	bl	800418c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003d3c:	2040      	movs	r0, #64	; 0x40
 8003d3e:	f000 fa37 	bl	80041b0 <SX1272Read>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	2040      	movs	r0, #64	; 0x40
 8003d4e:	f000 fa1d 	bl	800418c <SX1272Write>
            }
            SX1272Write( REG_LR_FIFORXBASEADDR, 0 );
 8003d52:	2100      	movs	r1, #0
 8003d54:	200f      	movs	r0, #15
 8003d56:	f000 fa19 	bl	800418c <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	200d      	movs	r0, #13
 8003d5e:	f000 fa15 	bl	800418c <SX1272Write>
        }
        break;
 8003d62:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8003d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4819      	ldr	r0, [pc, #100]	; (8003dd0 <SX1272SetRx+0x1b8>)
 8003d6c:	f002 fbf1 	bl	8006552 <memset>

    SX1272.Settings.State = RF_RX_RUNNING;
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <SX1272SetRx+0x172>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4815      	ldr	r0, [pc, #84]	; (8003dd4 <SX1272SetRx+0x1bc>)
 8003d80:	f001 f8b6 	bl	8004ef0 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8003d84:	4813      	ldr	r0, [pc, #76]	; (8003dd4 <SX1272SetRx+0x1bc>)
 8003d86:	f000 ffe9 	bl	8004d5c <TimerStart>
    }

    if( SX1272.Settings.Modem == MODEM_FSK )
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <SX1272SetRx+0x194>
    {
        SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8003d92:	2005      	movs	r0, #5
 8003d94:	f000 f970 	bl	8004078 <SX1272SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1272.Settings.Fsk.RxSingleTimeout );
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <SX1272SetRx+0x1b4>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	480e      	ldr	r0, [pc, #56]	; (8003dd8 <SX1272SetRx+0x1c0>)
 8003da0:	f001 f8a6 	bl	8004ef0 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <SX1272SetRx+0x1c0>)
 8003da6:	f000 ffd9 	bl	8004d5c <TimerStart>
        else
        {
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8003daa:	e009      	b.n	8003dc0 <SX1272SetRx+0x1a8>
        if( rxContinuous == true )
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <SX1272SetRx+0x1a2>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER );
 8003db2:	2005      	movs	r0, #5
 8003db4:	f000 f960 	bl	8004078 <SX1272SetOpMode>
}
 8003db8:	e002      	b.n	8003dc0 <SX1272SetRx+0x1a8>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003dba:	2006      	movs	r0, #6
 8003dbc:	f000 f95c 	bl	8004078 <SX1272SetOpMode>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200002fc 	.word	0x200002fc
 8003dcc:	20000294 	.word	0x20000294
 8003dd0:	20000060 	.word	0x20000060
 8003dd4:	2000032c 	.word	0x2000032c
 8003dd8:	20000314 	.word	0x20000314

08003ddc <SX1272SetTx>:

void SX1272SetTx( uint32_t timeout )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8003de4:	4837      	ldr	r0, [pc, #220]	; (8003ec4 <SX1272SetTx+0xe8>)
 8003de6:	f001 f809 	bl	8004dfc <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4836      	ldr	r0, [pc, #216]	; (8003ec8 <SX1272SetTx+0xec>)
 8003dee:	f001 f87f 	bl	8004ef0 <TimerSetValue>

    switch( SX1272.Settings.Modem )
 8003df2:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <SX1272SetTx+0xf0>)
 8003df4:	795b      	ldrb	r3, [r3, #5]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <SX1272SetTx+0x24>
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d026      	beq.n	8003e4c <SX1272SetTx+0x70>
 8003dfe:	e054      	b.n	8003eaa <SX1272SetTx+0xce>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003e00:	2040      	movs	r0, #64	; 0x40
 8003e02:	f000 f9d5 	bl	80041b0 <SX1272Read>
 8003e06:	4603      	mov	r3, r0
 8003e08:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2040      	movs	r0, #64	; 0x40
 8003e1c:	f000 f9b6 	bl	800418c <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003e20:	2041      	movs	r0, #65	; 0x41
 8003e22:	f000 f9c5 	bl	80041b0 <SX1272Read>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	4619      	mov	r1, r3
 8003e30:	2041      	movs	r0, #65	; 0x41
 8003e32:	f000 f9ab 	bl	800418c <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 8003e36:	2035      	movs	r0, #53	; 0x35
 8003e38:	f000 f9ba 	bl	80041b0 <SX1272Read>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <SX1272SetTx+0xf0>)
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
        break;
 8003e4a:	e02e      	b.n	8003eaa <SX1272SetTx+0xce>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <SX1272SetTx+0xf0>)
 8003e4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d014      	beq.n	8003e80 <SX1272SetTx+0xa4>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e56:	21f5      	movs	r1, #245	; 0xf5
 8003e58:	2011      	movs	r0, #17
 8003e5a:	f000 f997 	bl	800418c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003e5e:	2040      	movs	r0, #64	; 0x40
 8003e60:	f000 f9a6 	bl	80041b0 <SX1272Read>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	2040      	movs	r0, #64	; 0x40
 8003e7a:	f000 f987 	bl	800418c <SX1272Write>

                // DIO0=TxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8003e7e:	e013      	b.n	8003ea8 <SX1272SetTx+0xcc>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003e80:	21f7      	movs	r1, #247	; 0xf7
 8003e82:	2011      	movs	r0, #17
 8003e84:	f000 f982 	bl	800418c <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003e88:	2040      	movs	r0, #64	; 0x40
 8003e8a:	f000 f991 	bl	80041b0 <SX1272Read>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	2040      	movs	r0, #64	; 0x40
 8003ea4:	f000 f972 	bl	800418c <SX1272Write>
        break;
 8003ea8:	bf00      	nop
    }

    SX1272.Settings.State = RF_TX_RUNNING;
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <SX1272SetTx+0xf0>)
 8003eac:	2202      	movs	r2, #2
 8003eae:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003eb0:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <SX1272SetTx+0xec>)
 8003eb2:	f000 ff53 	bl	8004d5c <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8003eb6:	2003      	movs	r0, #3
 8003eb8:	f000 f8de 	bl	8004078 <SX1272SetOpMode>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	2000032c 	.word	0x2000032c
 8003ec8:	200002fc 	.word	0x200002fc
 8003ecc:	20000294 	.word	0x20000294

08003ed0 <SX1272StartCad>:

void SX1272StartCad( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.Modem )
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <SX1272StartCad+0x44>)
 8003ed6:	795b      	ldrb	r3, [r3, #5]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d018      	beq.n	8003f0e <SX1272StartCad+0x3e>
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d000      	beq.n	8003ee2 <SX1272StartCad+0x12>
            SX1272.Settings.State = RF_CAD;
            SX1272SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8003ee0:	e016      	b.n	8003f10 <SX1272StartCad+0x40>
            SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003ee2:	21fa      	movs	r1, #250	; 0xfa
 8003ee4:	2011      	movs	r0, #17
 8003ee6:	f000 f951 	bl	800418c <SX1272Write>
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003eea:	2040      	movs	r0, #64	; 0x40
 8003eec:	f000 f960 	bl	80041b0 <SX1272Read>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f023 0303 	bic.w	r3, r3, #3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2040      	movs	r0, #64	; 0x40
 8003efc:	f000 f946 	bl	800418c <SX1272Write>
            SX1272.Settings.State = RF_CAD;
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SX1272StartCad+0x44>)
 8003f02:	2203      	movs	r2, #3
 8003f04:	711a      	strb	r2, [r3, #4]
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 8003f06:	2007      	movs	r0, #7
 8003f08:	f000 f8b6 	bl	8004078 <SX1272SetOpMode>
        break;
 8003f0c:	e000      	b.n	8003f10 <SX1272StartCad+0x40>
        break;
 8003f0e:	bf00      	nop
    }
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000294 	.word	0x20000294

08003f18 <SX1272SetTxContinuousWave>:

void SX1272SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	; 0x38
 8003f1c:	af0a      	add	r7, sp, #40	; 0x28
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
 8003f24:	4613      	mov	r3, r2
 8003f26:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8003f28:	883b      	ldrh	r3, [r7, #0]
 8003f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	60fb      	str	r3, [r7, #12]

    SX1272SetChannel( freq );
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fe ff67 	bl	8002e08 <SX1272SetChannel>

    SX1272SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003f3a:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	9308      	str	r3, [sp, #32]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9307      	str	r3, [sp, #28]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9306      	str	r3, [sp, #24]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9305      	str	r3, [sp, #20]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	9304      	str	r3, [sp, #16]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	2305      	movs	r3, #5
 8003f58:	9302      	str	r3, [sp, #8]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	2200      	movs	r2, #0
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7ff fa11 	bl	8003390 <SX1272SetTxConfig>

    SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003f6e:	2031      	movs	r0, #49	; 0x31
 8003f70:	f000 f91e 	bl	80041b0 <SX1272Read>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	2031      	movs	r0, #49	; 0x31
 8003f80:	f000 f904 	bl	800418c <SX1272Write>
    // Disable radio interrupts
    SX1272Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003f84:	21f0      	movs	r1, #240	; 0xf0
 8003f86:	2040      	movs	r0, #64	; 0x40
 8003f88:	f000 f900 	bl	800418c <SX1272Write>
    SX1272Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003f8c:	21a0      	movs	r1, #160	; 0xa0
 8003f8e:	2041      	movs	r0, #65	; 0x41
 8003f90:	f000 f8fc 	bl	800418c <SX1272Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	4808      	ldr	r0, [pc, #32]	; (8003fb8 <SX1272SetTxContinuousWave+0xa0>)
 8003f98:	f000 ffaa 	bl	8004ef0 <TimerSetValue>

    SX1272.Settings.State = RF_TX_RUNNING;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <SX1272SetTxContinuousWave+0xa4>)
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003fa2:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <SX1272SetTxContinuousWave+0xa0>)
 8003fa4:	f000 feda 	bl	8004d5c <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f000 f865 	bl	8004078 <SX1272SetOpMode>
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200002fc 	.word	0x200002fc
 8003fbc:	20000294 	.word	0x20000294

08003fc0 <SX1272ReadRssi>:

int16_t SX1272ReadRssi( RadioModems_t modem )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <SX1272ReadRssi+0x1a>
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d00b      	beq.n	8003ff0 <SX1272ReadRssi+0x30>
 8003fd8:	e013      	b.n	8004002 <SX1272ReadRssi+0x42>
    {
    case MODEM_FSK:
        rssi = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8003fda:	2011      	movs	r0, #17
 8003fdc:	f000 f8e8 	bl	80041b0 <SX1272Read>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	425b      	negs	r3, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	81fb      	strh	r3, [r7, #14]
        break;
 8003fee:	e00c      	b.n	800400a <SX1272ReadRssi+0x4a>
    case MODEM_LORA:
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 8003ff0:	201b      	movs	r0, #27
 8003ff2:	f000 f8dd 	bl	80041b0 <SX1272Read>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b8b      	subs	r3, #139	; 0x8b
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	81fb      	strh	r3, [r7, #14]
        break;
 8004000:	e003      	b.n	800400a <SX1272ReadRssi+0x4a>
    default:
        rssi = -1;
 8004002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004006:	81fb      	strh	r3, [r7, #14]
        break;
 8004008:	bf00      	nop
    }
    return rssi;
 800400a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <SX1272Reset>:

void SX1272Reset( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800402c:	2301      	movs	r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	613b      	str	r3, [r7, #16]

    // Set RESET pin to 1
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	461a      	mov	r2, r3
 800403c:	2101      	movs	r1, #1
 800403e:	480d      	ldr	r0, [pc, #52]	; (8004074 <SX1272Reset+0x5c>)
 8004040:	f001 f84c 	bl	80050dc <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 1 );
 8004044:	2201      	movs	r2, #1
 8004046:	2101      	movs	r1, #1
 8004048:	480a      	ldr	r0, [pc, #40]	; (8004074 <SX1272Reset+0x5c>)
 800404a:	f001 f8f3 	bl	8005234 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 800404e:	2001      	movs	r0, #1
 8004050:	f000 fe00 	bl	8004c54 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	461a      	mov	r2, r3
 800405c:	2101      	movs	r1, #1
 800405e:	4805      	ldr	r0, [pc, #20]	; (8004074 <SX1272Reset+0x5c>)
 8004060:	f001 f83c 	bl	80050dc <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8004064:	2006      	movs	r0, #6
 8004066:	f000 fdf5 	bl	8004c54 <DelayMs>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40020000 	.word	0x40020000

08004078 <SX1272SetOpMode>:

void SX1272SetOpMode( uint8_t opMode )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <SX1272SetOpMode+0x1c>
    {
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( true );
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <SX1272SetOpMode+0x68>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2001      	movs	r0, #1
 8004090:	4798      	blx	r3
 8004092:	e00f      	b.n	80040b4 <SX1272SetOpMode+0x3c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <SX1272SetOpMode+0x68>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2001      	movs	r0, #1
 800409c:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( false );
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <SX1272SetOpMode+0x68>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2000      	movs	r0, #0
 80040a6:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSw( opMode );
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <SX1272SetOpMode+0x68>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	79fa      	ldrb	r2, [r7, #7]
 80040b0:	4610      	mov	r0, r2
 80040b2:	4798      	blx	r3
    }
    SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80040b4:	2001      	movs	r0, #1
 80040b6:	f000 f87b 	bl	80041b0 <SX1272Read>
 80040ba:	4603      	mov	r3, r0
 80040bc:	b25b      	sxtb	r3, r3
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	b25a      	sxtb	r2, r3
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b25b      	sxtb	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	2001      	movs	r0, #1
 80040d2:	f000 f85b 	bl	800418c <SX1272Write>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000160 	.word	0x20000160

080040e4 <SX1272SetModem>:

void SX1272SetModem( RadioModems_t modem )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
    if( ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 f85e 	bl	80041b0 <SX1272Read>
 80040f4:	4603      	mov	r3, r0
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da03      	bge.n	8004104 <SX1272SetModem+0x20>
    {
        SX1272.Settings.Modem = MODEM_LORA;
 80040fc:	4b22      	ldr	r3, [pc, #136]	; (8004188 <SX1272SetModem+0xa4>)
 80040fe:	2201      	movs	r2, #1
 8004100:	715a      	strb	r2, [r3, #5]
 8004102:	e002      	b.n	800410a <SX1272SetModem+0x26>
    }
    else
    {
        SX1272.Settings.Modem = MODEM_FSK;
 8004104:	4b20      	ldr	r3, [pc, #128]	; (8004188 <SX1272SetModem+0xa4>)
 8004106:	2200      	movs	r2, #0
 8004108:	715a      	strb	r2, [r3, #5]
    }

    if( SX1272.Settings.Modem == modem )
 800410a:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <SX1272SetModem+0xa4>)
 800410c:	795b      	ldrb	r3, [r3, #5]
 800410e:	79fa      	ldrb	r2, [r7, #7]
 8004110:	429a      	cmp	r2, r3
 8004112:	d035      	beq.n	8004180 <SX1272SetModem+0x9c>
    {
        return;
    }

    SX1272.Settings.Modem = modem;
 8004114:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <SX1272SetModem+0xa4>)
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	7153      	strb	r3, [r2, #5]
    switch( SX1272.Settings.Modem )
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <SX1272SetModem+0xa4>)
 800411c:	795b      	ldrb	r3, [r3, #5]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d016      	beq.n	8004150 <SX1272SetModem+0x6c>
    {
    default:
    case MODEM_FSK:
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8004122:	2000      	movs	r0, #0
 8004124:	f7ff ffa8 	bl	8004078 <SX1272SetOpMode>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004128:	2001      	movs	r0, #1
 800412a:	f000 f841 	bl	80041b0 <SX1272Read>
 800412e:	4603      	mov	r3, r0
 8004130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4619      	mov	r1, r3
 8004138:	2001      	movs	r0, #1
 800413a:	f000 f827 	bl	800418c <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 800413e:	2100      	movs	r1, #0
 8004140:	2040      	movs	r0, #64	; 0x40
 8004142:	f000 f823 	bl	800418c <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004146:	2130      	movs	r1, #48	; 0x30
 8004148:	2041      	movs	r0, #65	; 0x41
 800414a:	f000 f81f 	bl	800418c <SX1272Write>
        break;
 800414e:	e018      	b.n	8004182 <SX1272SetModem+0x9e>
    case MODEM_LORA:
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff ff91 	bl	8004078 <SX1272SetOpMode>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004156:	2001      	movs	r0, #1
 8004158:	f000 f82a 	bl	80041b0 <SX1272Read>
 800415c:	4603      	mov	r3, r0
 800415e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	2001      	movs	r0, #1
 8004168:	f000 f810 	bl	800418c <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 800416c:	2100      	movs	r1, #0
 800416e:	2040      	movs	r0, #64	; 0x40
 8004170:	f000 f80c 	bl	800418c <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 8004174:	2100      	movs	r1, #0
 8004176:	2041      	movs	r0, #65	; 0x41
 8004178:	f000 f808 	bl	800418c <SX1272Write>
        break;
 800417c:	bf00      	nop
 800417e:	e000      	b.n	8004182 <SX1272SetModem+0x9e>
        return;
 8004180:	bf00      	nop
    }
}
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20000294 	.word	0x20000294

0800418c <SX1272Write>:

void SX1272Write( uint16_t addr, uint8_t data )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	460a      	mov	r2, r1
 8004196:	80fb      	strh	r3, [r7, #6]
 8004198:	4613      	mov	r3, r2
 800419a:	717b      	strb	r3, [r7, #5]
    SX1272WriteBuffer( addr, &data, 1 );
 800419c:	1d79      	adds	r1, r7, #5
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2201      	movs	r2, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f816 	bl	80041d4 <SX1272WriteBuffer>
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SX1272Read>:

uint8_t SX1272Read( uint16_t addr )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX1272ReadBuffer( addr, &data, 1 );
 80041ba:	f107 010f 	add.w	r1, r7, #15
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f838 	bl	8004238 <SX1272ReadBuffer>
    return data;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	80fb      	strh	r3, [r7, #6]
 80041e0:	4613      	mov	r3, r2
 80041e2:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	; 0x40
 80041e8:	4812      	ldr	r0, [pc, #72]	; (8004234 <SX1272WriteBuffer+0x60>)
 80041ea:	f001 f823 	bl	8005234 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fb2e 	bl	8005858 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e00a      	b.n	8004218 <SX1272WriteBuffer+0x44>
    {
        HW_SPI_InOut( buffer[i] );
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	4618      	mov	r0, r3
 800420e:	f001 fb23 	bl	8005858 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	3301      	adds	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	797b      	ldrb	r3, [r7, #5]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3f0      	bcc.n	8004202 <SX1272WriteBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8004220:	2201      	movs	r2, #1
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	4803      	ldr	r0, [pc, #12]	; (8004234 <SX1272WriteBuffer+0x60>)
 8004226:	f001 f805 	bl	8005234 <HW_GPIO_Write>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40020400 	.word	0x40020400

08004238 <SX1272ReadBuffer>:

void SX1272ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	80fb      	strh	r3, [r7, #6]
 8004244:	4613      	mov	r3, r2
 8004246:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8004248:	2200      	movs	r2, #0
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	4813      	ldr	r0, [pc, #76]	; (800429c <SX1272ReadBuffer+0x64>)
 800424e:	f000 fff1 	bl	8005234 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004258:	b29b      	uxth	r3, r3
 800425a:	4618      	mov	r0, r3
 800425c:	f001 fafc 	bl	8005858 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	e00c      	b.n	8004280 <SX1272ReadBuffer+0x48>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 8004266:	2000      	movs	r0, #0
 8004268:	f001 faf6 	bl	8005858 <HW_SPI_InOut>
 800426c:	4603      	mov	r3, r0
 800426e:	4619      	mov	r1, r3
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4413      	add	r3, r2
 8004276:	b2ca      	uxtb	r2, r1
 8004278:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	3301      	adds	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	797b      	ldrb	r3, [r7, #5]
 8004284:	429a      	cmp	r2, r3
 8004286:	d3ee      	bcc.n	8004266 <SX1272ReadBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8004288:	2201      	movs	r2, #1
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	4803      	ldr	r0, [pc, #12]	; (800429c <SX1272ReadBuffer+0x64>)
 800428e:	f000 ffd1 	bl	8005234 <HW_GPIO_Write>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40020400 	.word	0x40020400

080042a0 <SX1272WriteFifo>:

void SX1272WriteFifo( uint8_t *buffer, uint8_t size )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
    SX1272WriteBuffer( 0, buffer, size );
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	461a      	mov	r2, r3
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7ff ff8e 	bl	80041d4 <SX1272WriteBuffer>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint8_t size )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
    SX1272ReadBuffer( 0, buffer, size );
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7ff ffb0 	bl	8004238 <SX1272ReadBuffer>
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <SX1272SetMaxPayloadLength>:

void SX1272SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	460a      	mov	r2, r1
 80042ea:	71fb      	strb	r3, [r7, #7]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71bb      	strb	r3, [r7, #6]
    SX1272SetModem( modem );
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fef6 	bl	80040e4 <SX1272SetModem>

    switch( modem )
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <SX1272SetMaxPayloadLength+0x24>
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d00e      	beq.n	8004320 <SX1272SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8004302:	e014      	b.n	800432e <SX1272SetMaxPayloadLength+0x4e>
        if( SX1272.Settings.Fsk.FixLen == false )
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <SX1272SetMaxPayloadLength+0x58>)
 8004306:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800430a:	f083 0301 	eor.w	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <SX1272SetMaxPayloadLength+0x4c>
            SX1272Write( REG_PAYLOADLENGTH, max );
 8004314:	79bb      	ldrb	r3, [r7, #6]
 8004316:	4619      	mov	r1, r3
 8004318:	2032      	movs	r0, #50	; 0x32
 800431a:	f7ff ff37 	bl	800418c <SX1272Write>
        break;
 800431e:	e005      	b.n	800432c <SX1272SetMaxPayloadLength+0x4c>
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004320:	79bb      	ldrb	r3, [r7, #6]
 8004322:	4619      	mov	r1, r3
 8004324:	2023      	movs	r0, #35	; 0x23
 8004326:	f7ff ff31 	bl	800418c <SX1272Write>
        break;
 800432a:	e000      	b.n	800432e <SX1272SetMaxPayloadLength+0x4e>
        break;
 800432c:	bf00      	nop
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000294 	.word	0x20000294

0800433c <SX1272SetPublicNetwork>:

void SX1272SetPublicNetwork( bool enable )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
    SX1272SetModem( MODEM_LORA );
 8004346:	2001      	movs	r0, #1
 8004348:	f7ff fecc 	bl	80040e4 <SX1272SetModem>
    SX1272.Settings.LoRa.PublicNetwork = enable;
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <SX1272SetPublicNetwork+0x38>)
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    if( enable == true )
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <SX1272SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800435a:	2134      	movs	r1, #52	; 0x34
 800435c:	2039      	movs	r0, #57	; 0x39
 800435e:	f7ff ff15 	bl	800418c <SX1272Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8004362:	e003      	b.n	800436c <SX1272SetPublicNetwork+0x30>
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004364:	2112      	movs	r1, #18
 8004366:	2039      	movs	r0, #57	; 0x39
 8004368:	f7ff ff10 	bl	800418c <SX1272Write>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000294 	.word	0x20000294

08004378 <SX1272OnTimeoutIrq>:
{
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
}

void SX1272OnTimeoutIrq( void* context )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.State )
 8004380:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d002      	beq.n	800438e <SX1272OnTimeoutIrq+0x16>
 8004388:	2b02      	cmp	r3, #2
 800438a:	d042      	beq.n	8004412 <SX1272OnTimeoutIrq+0x9a>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800438c:	e08a      	b.n	80044a4 <SX1272OnTimeoutIrq+0x12c>
        if( SX1272.Settings.Modem == MODEM_FSK )
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 8004390:	795b      	ldrb	r3, [r3, #5]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d12f      	bne.n	80043f6 <SX1272OnTimeoutIrq+0x7e>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004396:	4b45      	ldr	r3, [pc, #276]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 80043ac:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80043b2:	210b      	movs	r1, #11
 80043b4:	203e      	movs	r0, #62	; 0x3e
 80043b6:	f7ff fee9 	bl	800418c <SX1272Write>
            SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80043ba:	2110      	movs	r1, #16
 80043bc:	203f      	movs	r0, #63	; 0x3f
 80043be:	f7ff fee5 	bl	800418c <SX1272Write>
            if( SX1272.Settings.Fsk.RxContinuous == true )
 80043c2:	4b3a      	ldr	r3, [pc, #232]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 80043c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <SX1272OnTimeoutIrq+0x72>
                SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80043cc:	200d      	movs	r0, #13
 80043ce:	f7ff feef 	bl	80041b0 <SX1272Read>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	4619      	mov	r1, r3
 80043dc:	200d      	movs	r0, #13
 80043de:	f7ff fed5 	bl	800418c <SX1272Write>
                TimerStart( &RxTimeoutSyncWord );
 80043e2:	4833      	ldr	r0, [pc, #204]	; (80044b0 <SX1272OnTimeoutIrq+0x138>)
 80043e4:	f000 fcba 	bl	8004d5c <TimerStart>
 80043e8:	e005      	b.n	80043f6 <SX1272OnTimeoutIrq+0x7e>
                SX1272.Settings.State = RF_IDLE;
 80043ea:	4b30      	ldr	r3, [pc, #192]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 80043f0:	482f      	ldr	r0, [pc, #188]	; (80044b0 <SX1272OnTimeoutIrq+0x138>)
 80043f2:	f000 fd03 	bl	8004dfc <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <SX1272OnTimeoutIrq+0x13c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04f      	beq.n	800449e <SX1272OnTimeoutIrq+0x126>
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <SX1272OnTimeoutIrq+0x13c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d04a      	beq.n	800449e <SX1272OnTimeoutIrq+0x126>
            RadioEvents->RxTimeout( );
 8004408:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <SX1272OnTimeoutIrq+0x13c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4798      	blx	r3
        break;
 8004410:	e045      	b.n	800449e <SX1272OnTimeoutIrq+0x126>
        SX1272Reset( );
 8004412:	f7ff fe01 	bl	8004018 <SX1272Reset>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8004416:	2000      	movs	r0, #0
 8004418:	f7ff fe2e 	bl	8004078 <SX1272SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800441c:	2300      	movs	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	e020      	b.n	8004464 <SX1272OnTimeoutIrq+0xec>
            SX1272SetModem( RadioRegsInit[i].Modem );
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	4924      	ldr	r1, [pc, #144]	; (80044b8 <SX1272OnTimeoutIrq+0x140>)
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	440b      	add	r3, r1
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fe57 	bl	80040e4 <SX1272SetModem>
            SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	491f      	ldr	r1, [pc, #124]	; (80044b8 <SX1272OnTimeoutIrq+0x140>)
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	440b      	add	r3, r1
 8004442:	3301      	adds	r3, #1
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b298      	uxth	r0, r3
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	491b      	ldr	r1, [pc, #108]	; (80044b8 <SX1272OnTimeoutIrq+0x140>)
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	440b      	add	r3, r1
 8004454:	3302      	adds	r3, #2
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	f7ff fe97 	bl	800418c <SX1272Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	3301      	adds	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d9db      	bls.n	8004422 <SX1272OnTimeoutIrq+0xaa>
        SX1272SetModem( MODEM_FSK );
 800446a:	2000      	movs	r0, #0
 800446c:	f7ff fe3a 	bl	80040e4 <SX1272SetModem>
        SX1272SetPublicNetwork( SX1272.Settings.LoRa.PublicNetwork );
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 8004472:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff60 	bl	800433c <SX1272SetPublicNetwork>
        SX1272.Settings.State = RF_IDLE;
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <SX1272OnTimeoutIrq+0x134>)
 800447e:	2200      	movs	r2, #0
 8004480:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <SX1272OnTimeoutIrq+0x13c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <SX1272OnTimeoutIrq+0x12a>
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <SX1272OnTimeoutIrq+0x13c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d006      	beq.n	80044a2 <SX1272OnTimeoutIrq+0x12a>
            RadioEvents->TxTimeout( );
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <SX1272OnTimeoutIrq+0x13c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4798      	blx	r3
        break;
 800449c:	e001      	b.n	80044a2 <SX1272OnTimeoutIrq+0x12a>
        break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <SX1272OnTimeoutIrq+0x12c>
        break;
 80044a2:	bf00      	nop
    }
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000294 	.word	0x20000294
 80044b0:	20000314 	.word	0x20000314
 80044b4:	2000005c 	.word	0x2000005c
 80044b8:	080068a4 	.word	0x080068a4

080044bc <SX1272OnDio0Irq>:

void SX1272OnDio0Irq( void* context )
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	737b      	strb	r3, [r7, #13]

    switch( SX1272.Settings.State )
 80044c8:	4ba3      	ldr	r3, [pc, #652]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80044ca:	791b      	ldrb	r3, [r3, #4]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d003      	beq.n	80044d8 <SX1272OnDio0Irq+0x1c>
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f000 819d 	beq.w	8004810 <SX1272OnDio0Irq+0x354>
                }
                break;
            }
            break;
        default:
            break;
 80044d6:	e1b8      	b.n	800484a <SX1272OnDio0Irq+0x38e>
            switch( SX1272.Settings.Modem )
 80044d8:	4b9f      	ldr	r3, [pc, #636]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80044da:	795b      	ldrb	r3, [r3, #5]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <SX1272OnDio0Irq+0x2c>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f000 80de 	beq.w	80046a2 <SX1272OnDio0Irq+0x1e6>
                break;
 80044e6:	e192      	b.n	800480e <SX1272OnDio0Irq+0x352>
                if( SX1272.Settings.Fsk.CrcOn == true )
 80044e8:	4b9b      	ldr	r3, [pc, #620]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80044ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04e      	beq.n	8004590 <SX1272OnDio0Irq+0xd4>
                    irqFlags = SX1272Read( REG_IRQFLAGS2 );
 80044f2:	203f      	movs	r0, #63	; 0x3f
 80044f4:	f7ff fe5c 	bl	80041b0 <SX1272Read>
 80044f8:	4603      	mov	r3, r0
 80044fa:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80044fc:	7b7b      	ldrb	r3, [r7, #13]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d043      	beq.n	8004590 <SX1272OnDio0Irq+0xd4>
                        SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004508:	210b      	movs	r1, #11
 800450a:	203e      	movs	r0, #62	; 0x3e
 800450c:	f7ff fe3e 	bl	800418c <SX1272Write>
                        SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004510:	2110      	movs	r1, #16
 8004512:	203f      	movs	r0, #63	; 0x3f
 8004514:	f7ff fe3a 	bl	800418c <SX1272Write>
                        TimerStop( &RxTimeoutTimer );
 8004518:	4890      	ldr	r0, [pc, #576]	; (800475c <SX1272OnDio0Irq+0x2a0>)
 800451a:	f000 fc6f 	bl	8004dfc <TimerStop>
                        if( SX1272.Settings.Fsk.RxContinuous == false )
 800451e:	4b8e      	ldr	r3, [pc, #568]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004520:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004524:	f083 0301 	eor.w	r3, r3, #1
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <SX1272OnDio0Irq+0x80>
                            TimerStop( &RxTimeoutSyncWord );
 800452e:	488c      	ldr	r0, [pc, #560]	; (8004760 <SX1272OnDio0Irq+0x2a4>)
 8004530:	f000 fc64 	bl	8004dfc <TimerStop>
                            SX1272.Settings.State = RF_IDLE;
 8004534:	4b88      	ldr	r3, [pc, #544]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004536:	2200      	movs	r2, #0
 8004538:	711a      	strb	r2, [r3, #4]
 800453a:	e00d      	b.n	8004558 <SX1272OnDio0Irq+0x9c>
                            SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800453c:	200d      	movs	r0, #13
 800453e:	f7ff fe37 	bl	80041b0 <SX1272Read>
 8004542:	4603      	mov	r3, r0
 8004544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004548:	b2db      	uxtb	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	200d      	movs	r0, #13
 800454e:	f7ff fe1d 	bl	800418c <SX1272Write>
                            TimerStart( &RxTimeoutSyncWord );
 8004552:	4883      	ldr	r0, [pc, #524]	; (8004760 <SX1272OnDio0Irq+0x2a4>)
 8004554:	f000 fc02 	bl	8004d5c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004558:	4b82      	ldr	r3, [pc, #520]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <SX1272OnDio0Irq+0xb6>
 8004560:	4b80      	ldr	r3, [pc, #512]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <SX1272OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 800456a:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	4798      	blx	r3
                        SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004572:	4b79      	ldr	r3, [pc, #484]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800457a:	4b77      	ldr	r3, [pc, #476]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8004582:	4b75      	ldr	r3, [pc, #468]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004584:	2200      	movs	r2, #0
 8004586:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1272.Settings.FskPacketHandler.Size = 0;
 8004588:	4b73      	ldr	r3, [pc, #460]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 800458a:	2200      	movs	r2, #0
 800458c:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 800458e:	e13e      	b.n	800480e <SX1272OnDio0Irq+0x352>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004590:	4b71      	ldr	r3, [pc, #452]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004592:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004594:	2b00      	cmp	r3, #0
 8004596:	d12c      	bne.n	80045f2 <SX1272OnDio0Irq+0x136>
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 800459a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d128      	bne.n	80045f2 <SX1272OnDio0Irq+0x136>
                    if( SX1272.Settings.Fsk.FixLen == false )
 80045a0:	4b6d      	ldr	r3, [pc, #436]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80045a6:	f083 0301 	eor.w	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <SX1272OnDio0Irq+0xfe>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 80045b0:	2101      	movs	r1, #1
 80045b2:	486d      	ldr	r0, [pc, #436]	; (8004768 <SX1272OnDio0Irq+0x2ac>)
 80045b4:	f7ff fe84 	bl	80042c0 <SX1272ReadFifo>
 80045b8:	e006      	b.n	80045c8 <SX1272OnDio0Irq+0x10c>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 80045ba:	2032      	movs	r0, #50	; 0x32
 80045bc:	f7ff fdf8 	bl	80041b0 <SX1272Read>
 80045c0:	4603      	mov	r3, r0
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	4b64      	ldr	r3, [pc, #400]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045c6:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80045c8:	4b63      	ldr	r3, [pc, #396]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b67      	ldr	r3, [pc, #412]	; (800476c <SX1272OnDio0Irq+0x2b0>)
 80045d0:	18d0      	adds	r0, r2, r3
 80045d2:	4b61      	ldr	r3, [pc, #388]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045d4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	f7ff fe6c 	bl	80042c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045ea:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80045ec:	4b5a      	ldr	r3, [pc, #360]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045ee:	879a      	strh	r2, [r3, #60]	; 0x3c
 80045f0:	e013      	b.n	800461a <SX1272OnDio0Irq+0x15e>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80045f2:	4b59      	ldr	r3, [pc, #356]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045f6:	461a      	mov	r2, r3
 80045f8:	4b5c      	ldr	r3, [pc, #368]	; (800476c <SX1272OnDio0Irq+0x2b0>)
 80045fa:	18d0      	adds	r0, r2, r3
 80045fc:	4b56      	ldr	r3, [pc, #344]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80045fe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b55      	ldr	r3, [pc, #340]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004604:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004606:	b2db      	uxtb	r3, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	4619      	mov	r1, r3
 800460e:	f7ff fe57 	bl	80042c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004614:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004616:	4b50      	ldr	r3, [pc, #320]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004618:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800461a:	4850      	ldr	r0, [pc, #320]	; (800475c <SX1272OnDio0Irq+0x2a0>)
 800461c:	f000 fbee 	bl	8004dfc <TimerStop>
                if( SX1272.Settings.Fsk.RxContinuous == false )
 8004620:	4b4d      	ldr	r3, [pc, #308]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004622:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004626:	f083 0301 	eor.w	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <SX1272OnDio0Irq+0x182>
                    SX1272.Settings.State = RF_IDLE;
 8004630:	4b49      	ldr	r3, [pc, #292]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004632:	2200      	movs	r2, #0
 8004634:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004636:	484a      	ldr	r0, [pc, #296]	; (8004760 <SX1272OnDio0Irq+0x2a4>)
 8004638:	f000 fbe0 	bl	8004dfc <TimerStop>
 800463c:	e00d      	b.n	800465a <SX1272OnDio0Irq+0x19e>
                    SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800463e:	200d      	movs	r0, #13
 8004640:	f7ff fdb6 	bl	80041b0 <SX1272Read>
 8004644:	4603      	mov	r3, r0
 8004646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4619      	mov	r1, r3
 800464e:	200d      	movs	r0, #13
 8004650:	f7ff fd9c 	bl	800418c <SX1272Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004654:	4842      	ldr	r0, [pc, #264]	; (8004760 <SX1272OnDio0Irq+0x2a4>)
 8004656:	f000 fb81 	bl	8004d5c <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800465a:	4b42      	ldr	r3, [pc, #264]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <SX1272OnDio0Irq+0x1c8>
 8004662:	4b40      	ldr	r3, [pc, #256]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <SX1272OnDio0Irq+0x1c8>
                    RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.FskPacketHandler.Size, SX1272.Settings.FskPacketHandler.RssiValue, 0 );
 800466c:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689c      	ldr	r4, [r3, #8]
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004674:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8004676:	4b38      	ldr	r3, [pc, #224]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004678:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 800467c:	b21a      	sxth	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	483a      	ldr	r0, [pc, #232]	; (800476c <SX1272OnDio0Irq+0x2b0>)
 8004682:	47a0      	blx	r4
                SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800468c:	4b32      	ldr	r3, [pc, #200]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8004694:	4b30      	ldr	r3, [pc, #192]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004696:	2200      	movs	r2, #0
 8004698:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1272.Settings.FskPacketHandler.Size = 0;
 800469a:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 800469c:	2200      	movs	r2, #0
 800469e:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 80046a0:	e0b5      	b.n	800480e <SX1272OnDio0Irq+0x352>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80046a2:	2140      	movs	r1, #64	; 0x40
 80046a4:	2012      	movs	r0, #18
 80046a6:	f7ff fd71 	bl	800418c <SX1272Write>
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 80046aa:	2012      	movs	r0, #18
 80046ac:	f7ff fd80 	bl	80041b0 <SX1272Read>
 80046b0:	4603      	mov	r3, r0
 80046b2:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80046b4:	7b7b      	ldrb	r3, [r7, #13]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d121      	bne.n	8004704 <SX1272OnDio0Irq+0x248>
                        SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80046c0:	2120      	movs	r1, #32
 80046c2:	2012      	movs	r0, #18
 80046c4:	f7ff fd62 	bl	800418c <SX1272Write>
                        if( SX1272.Settings.LoRa.RxContinuous == false )
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80046ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80046ce:	f083 0301 	eor.w	r3, r3, #1
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <SX1272OnDio0Irq+0x222>
                            SX1272.Settings.State = RF_IDLE;
 80046d8:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 80046de:	481f      	ldr	r0, [pc, #124]	; (800475c <SX1272OnDio0Irq+0x2a0>)
 80046e0:	f000 fb8c 	bl	8004dfc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 808d 	beq.w	8004808 <SX1272OnDio0Irq+0x34c>
 80046ee:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8087 	beq.w	8004808 <SX1272OnDio0Irq+0x34c>
                            RadioEvents->RxError( );
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <SX1272OnDio0Irq+0x2a8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	4798      	blx	r3
                        break;
 8004702:	e081      	b.n	8004808 <SX1272OnDio0Irq+0x34c>
                    SX1272.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1272Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004704:	2019      	movs	r0, #25
 8004706:	f7ff fd53 	bl	80041b0 <SX1272Read>
 800470a:	4603      	mov	r3, r0
 800470c:	b25b      	sxtb	r3, r3
 800470e:	3302      	adds	r3, #2
 8004710:	109b      	asrs	r3, r3, #2
 8004712:	b25a      	sxtb	r2, r3
 8004714:	4b10      	ldr	r3, [pc, #64]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004716:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 800471a:	201a      	movs	r0, #26
 800471c:	f7ff fd48 	bl	80041b0 <SX1272Read>
 8004720:	4603      	mov	r3, r0
 8004722:	81fb      	strh	r3, [r7, #14]
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004726:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 800472a:	2b00      	cmp	r3, #0
 800472c:	da20      	bge.n	8004770 <SX1272OnDio0Irq+0x2b4>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 800472e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004732:	111b      	asrs	r3, r3, #4
 8004734:	b21b      	sxth	r3, r3
 8004736:	b29a      	uxth	r2, r3
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	4413      	add	r3, r2
 800473c:	b29a      	uxth	r2, r3
                                                                      SX1272.Settings.LoRaPacketHandler.SnrValue;
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004740:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004744:	b29b      	uxth	r3, r3
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 8004746:	4413      	add	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b8b      	subs	r3, #139	; 0x8b
 800474c:	b29b      	uxth	r3, r3
 800474e:	b21a      	sxth	r2, r3
 8004750:	4b01      	ldr	r3, [pc, #4]	; (8004758 <SX1272OnDio0Irq+0x29c>)
 8004752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004756:	e019      	b.n	800478c <SX1272OnDio0Irq+0x2d0>
 8004758:	20000294 	.word	0x20000294
 800475c:	2000032c 	.word	0x2000032c
 8004760:	20000314 	.word	0x20000314
 8004764:	2000005c 	.word	0x2000005c
 8004768:	200002ce 	.word	0x200002ce
 800476c:	20000060 	.word	0x20000060
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 8004770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004774:	111b      	asrs	r3, r3, #4
 8004776:	b21b      	sxth	r3, r3
 8004778:	b29a      	uxth	r2, r3
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	4413      	add	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b8b      	subs	r3, #139	; 0x8b
 8004782:	b29b      	uxth	r3, r3
 8004784:	b21a      	sxth	r2, r3
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <SX1272OnDio0Irq+0x398>)
 8004788:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 800478c:	2013      	movs	r0, #19
 800478e:	f7ff fd0f 	bl	80041b0 <SX1272Read>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <SX1272OnDio0Irq+0x398>)
 8004798:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    SX1272Write( REG_LR_FIFOADDRPTR, SX1272Read( REG_LR_FIFORXCURRENTADDR ) );
 800479c:	2010      	movs	r0, #16
 800479e:	f7ff fd07 	bl	80041b0 <SX1272Read>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4619      	mov	r1, r3
 80047a6:	200d      	movs	r0, #13
 80047a8:	f7ff fcf0 	bl	800418c <SX1272Write>
                    SX1272ReadFifo( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size );
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <SX1272OnDio0Irq+0x398>)
 80047ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80047b2:	4619      	mov	r1, r3
 80047b4:	4828      	ldr	r0, [pc, #160]	; (8004858 <SX1272OnDio0Irq+0x39c>)
 80047b6:	f7ff fd83 	bl	80042c0 <SX1272ReadFifo>
                    if( SX1272.Settings.LoRa.RxContinuous == false )
 80047ba:	4b26      	ldr	r3, [pc, #152]	; (8004854 <SX1272OnDio0Irq+0x398>)
 80047bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <SX1272OnDio0Irq+0x314>
                        SX1272.Settings.State = RF_IDLE;
 80047ca:	4b22      	ldr	r3, [pc, #136]	; (8004854 <SX1272OnDio0Irq+0x398>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80047d0:	4822      	ldr	r0, [pc, #136]	; (800485c <SX1272OnDio0Irq+0x3a0>)
 80047d2:	f000 fb13 	bl	8004dfc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <SX1272OnDio0Irq+0x3a4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <SX1272OnDio0Irq+0x350>
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <SX1272OnDio0Irq+0x3a4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d011      	beq.n	800480c <SX1272OnDio0Irq+0x350>
                        RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size, SX1272.Settings.LoRaPacketHandler.RssiValue, SX1272.Settings.LoRaPacketHandler.SnrValue );
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <SX1272OnDio0Irq+0x3a4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689c      	ldr	r4, [r3, #8]
 80047ee:	4b19      	ldr	r3, [pc, #100]	; (8004854 <SX1272OnDio0Irq+0x398>)
 80047f0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80047f4:	b299      	uxth	r1, r3
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <SX1272OnDio0Irq+0x398>)
 80047f8:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	; 0x62
 80047fc:	4b15      	ldr	r3, [pc, #84]	; (8004854 <SX1272OnDio0Irq+0x398>)
 80047fe:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004802:	4815      	ldr	r0, [pc, #84]	; (8004858 <SX1272OnDio0Irq+0x39c>)
 8004804:	47a0      	blx	r4
                break;
 8004806:	e001      	b.n	800480c <SX1272OnDio0Irq+0x350>
                        break;
 8004808:	bf00      	nop
 800480a:	e01e      	b.n	800484a <SX1272OnDio0Irq+0x38e>
                break;
 800480c:	bf00      	nop
            break;
 800480e:	e01c      	b.n	800484a <SX1272OnDio0Irq+0x38e>
            TimerStop( &TxTimeoutTimer );
 8004810:	4814      	ldr	r0, [pc, #80]	; (8004864 <SX1272OnDio0Irq+0x3a8>)
 8004812:	f000 faf3 	bl	8004dfc <TimerStop>
            switch( SX1272.Settings.Modem )
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <SX1272OnDio0Irq+0x398>)
 8004818:	795b      	ldrb	r3, [r3, #5]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d103      	bne.n	8004826 <SX1272OnDio0Irq+0x36a>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800481e:	2108      	movs	r1, #8
 8004820:	2012      	movs	r0, #18
 8004822:	f7ff fcb3 	bl	800418c <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <SX1272OnDio0Irq+0x398>)
 8004828:	2200      	movs	r2, #0
 800482a:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <SX1272OnDio0Irq+0x3a4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <SX1272OnDio0Irq+0x38a>
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <SX1272OnDio0Irq+0x3a4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <SX1272OnDio0Irq+0x38a>
                    RadioEvents->TxDone( );
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <SX1272OnDio0Irq+0x3a4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4798      	blx	r3
                break;
 8004846:	bf00      	nop
            break;
 8004848:	bf00      	nop
    }
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bd90      	pop	{r4, r7, pc}
 8004852:	bf00      	nop
 8004854:	20000294 	.word	0x20000294
 8004858:	20000060 	.word	0x20000060
 800485c:	2000032c 	.word	0x2000032c
 8004860:	2000005c 	.word	0x2000005c
 8004864:	200002fc 	.word	0x200002fc

08004868 <SX1272OnDio1Irq>:

void SX1272OnDio1Irq( void* context )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.State )
 8004870:	4b62      	ldr	r3, [pc, #392]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004872:	791b      	ldrb	r3, [r3, #4]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d002      	beq.n	800487e <SX1272OnDio1Irq+0x16>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d07a      	beq.n	8004972 <SX1272OnDio1Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 800487c:	e0b9      	b.n	80049f2 <SX1272OnDio1Irq+0x18a>
            switch( SX1272.Settings.Modem )
 800487e:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004880:	795b      	ldrb	r3, [r3, #5]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <SX1272OnDio1Irq+0x24>
 8004886:	2b01      	cmp	r3, #1
 8004888:	d05a      	beq.n	8004940 <SX1272OnDio1Irq+0xd8>
                break;
 800488a:	e071      	b.n	8004970 <SX1272OnDio1Irq+0x108>
                TimerStop( &RxTimeoutSyncWord );
 800488c:	485c      	ldr	r0, [pc, #368]	; (8004a00 <SX1272OnDio1Irq+0x198>)
 800488e:	f000 fab5 	bl	8004dfc <TimerStop>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004892:	4b5a      	ldr	r3, [pc, #360]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004894:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004896:	2b00      	cmp	r3, #0
 8004898:	d117      	bne.n	80048ca <SX1272OnDio1Irq+0x62>
 800489a:	4b58      	ldr	r3, [pc, #352]	; (80049fc <SX1272OnDio1Irq+0x194>)
 800489c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d113      	bne.n	80048ca <SX1272OnDio1Irq+0x62>
                    if( SX1272.Settings.Fsk.FixLen == false )
 80048a2:	4b56      	ldr	r3, [pc, #344]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80048a8:	f083 0301 	eor.w	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <SX1272OnDio1Irq+0x54>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 80048b2:	2101      	movs	r1, #1
 80048b4:	4853      	ldr	r0, [pc, #332]	; (8004a04 <SX1272OnDio1Irq+0x19c>)
 80048b6:	f7ff fd03 	bl	80042c0 <SX1272ReadFifo>
 80048ba:	e006      	b.n	80048ca <SX1272OnDio1Irq+0x62>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 80048bc:	2032      	movs	r0, #50	; 0x32
 80048be:	f7ff fc77 	bl	80041b0 <SX1272Read>
 80048c2:	4603      	mov	r3, r0
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048c8:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) >= SX1272.Settings.FskPacketHandler.FifoThresh )
 80048ca:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048cc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	4a49      	ldr	r2, [pc, #292]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048d8:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80048dc:	4293      	cmp	r3, r2
 80048de:	db1a      	blt.n	8004916 <SX1272OnDio1Irq+0xae>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.FifoThresh - 1 );
 80048e0:	4b46      	ldr	r3, [pc, #280]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <SX1272OnDio1Irq+0x1a0>)
 80048e8:	441a      	add	r2, r3
 80048ea:	4b44      	ldr	r3, [pc, #272]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7ff fce2 	bl	80042c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.FifoThresh - 1;
 80048fc:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80048fe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004906:	b29b      	uxth	r3, r3
 8004908:	4413      	add	r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004912:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8004914:	e02c      	b.n	8004970 <SX1272OnDio1Irq+0x108>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004918:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800491a:	461a      	mov	r2, r3
 800491c:	4b3a      	ldr	r3, [pc, #232]	; (8004a08 <SX1272OnDio1Irq+0x1a0>)
 800491e:	18d0      	adds	r0, r2, r3
 8004920:	4b36      	ldr	r3, [pc, #216]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004922:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b35      	ldr	r3, [pc, #212]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004928:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800492a:	b2db      	uxtb	r3, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	4619      	mov	r1, r3
 8004932:	f7ff fcc5 	bl	80042c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004936:	4b31      	ldr	r3, [pc, #196]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004938:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <SX1272OnDio1Irq+0x194>)
 800493c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800493e:	e017      	b.n	8004970 <SX1272OnDio1Irq+0x108>
                TimerStop( &RxTimeoutTimer );
 8004940:	4832      	ldr	r0, [pc, #200]	; (8004a0c <SX1272OnDio1Irq+0x1a4>)
 8004942:	f000 fa5b 	bl	8004dfc <TimerStop>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	2012      	movs	r0, #18
 800494a:	f7ff fc1f 	bl	800418c <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 800494e:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004950:	2200      	movs	r2, #0
 8004952:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004954:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <SX1272OnDio1Irq+0x1a8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <SX1272OnDio1Irq+0x106>
 800495c:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <SX1272OnDio1Irq+0x1a8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <SX1272OnDio1Irq+0x106>
                    RadioEvents->RxTimeout( );
 8004966:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <SX1272OnDio1Irq+0x1a8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4798      	blx	r3
                break;
 800496e:	bf00      	nop
            break;
 8004970:	e03f      	b.n	80049f2 <SX1272OnDio1Irq+0x18a>
            switch( SX1272.Settings.Modem )
 8004972:	4b22      	ldr	r3, [pc, #136]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004974:	795b      	ldrb	r3, [r3, #5]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <SX1272OnDio1Irq+0x118>
 800497a:	2b01      	cmp	r3, #1
 800497c:	d037      	beq.n	80049ee <SX1272OnDio1Irq+0x186>
                break;
 800497e:	e037      	b.n	80049f0 <SX1272OnDio1Irq+0x188>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.ChunkSize )
 8004980:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004982:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004984:	461a      	mov	r2, r3
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004988:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <SX1272OnDio1Irq+0x194>)
 800498e:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 8004992:	4293      	cmp	r3, r2
 8004994:	dd16      	ble.n	80049c4 <SX1272OnDio1Irq+0x15c>
                    SX1272WriteFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.ChunkSize );
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <SX1272OnDio1Irq+0x194>)
 8004998:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800499a:	461a      	mov	r2, r3
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <SX1272OnDio1Irq+0x1a0>)
 800499e:	441a      	add	r2, r3
 80049a0:	4b16      	ldr	r3, [pc, #88]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7ff fc79 	bl	80042a0 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 80049ae:	4b13      	ldr	r3, [pc, #76]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049b0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049c0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80049c2:	e015      	b.n	80049f0 <SX1272OnDio1Irq+0x188>
                    SX1272WriteFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <SX1272OnDio1Irq+0x1a0>)
 80049cc:	18d0      	adds	r0, r2, r3
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049d0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	4619      	mov	r1, r3
 80049e0:	f7ff fc5e 	bl	80042a0 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049e6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <SX1272OnDio1Irq+0x194>)
 80049ea:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80049ec:	e000      	b.n	80049f0 <SX1272OnDio1Irq+0x188>
                break;
 80049ee:	bf00      	nop
            break;
 80049f0:	bf00      	nop
    }
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000294 	.word	0x20000294
 8004a00:	20000314 	.word	0x20000314
 8004a04:	200002ce 	.word	0x200002ce
 8004a08:	20000060 	.word	0x20000060
 8004a0c:	2000032c 	.word	0x2000032c
 8004a10:	2000005c 	.word	0x2000005c

08004a14 <SX1272OnDio2Irq>:

void SX1272OnDio2Irq( void* context )
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]

    switch( SX1272.Settings.State )
 8004a20:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a22:	791b      	ldrb	r3, [r3, #4]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d002      	beq.n	8004a2e <SX1272OnDio2Irq+0x1a>
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d07b      	beq.n	8004b24 <SX1272OnDio2Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 8004a2c:	e0a4      	b.n	8004b78 <SX1272OnDio2Irq+0x164>
            switch( SX1272.Settings.Modem )
 8004a2e:	4b54      	ldr	r3, [pc, #336]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a30:	795b      	ldrb	r3, [r3, #5]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <SX1272OnDio2Irq+0x28>
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d051      	beq.n	8004ade <SX1272OnDio2Irq+0xca>
                break;
 8004a3a:	e072      	b.n	8004b22 <SX1272OnDio2Irq+0x10e>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                if( ( SX1272.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1272.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8004a44:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d166      	bne.n	8004b1c <SX1272OnDio2Irq+0x108>
 8004a4e:	4b4c      	ldr	r3, [pc, #304]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d161      	bne.n	8004b1c <SX1272OnDio2Irq+0x108>
                    TimerStop( &RxTimeoutSyncWord );
 8004a58:	484a      	ldr	r0, [pc, #296]	; (8004b84 <SX1272OnDio2Irq+0x170>)
 8004a5a:	f000 f9cf 	bl	8004dfc <TimerStop>
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 8004a5e:	4b48      	ldr	r3, [pc, #288]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8004a66:	2011      	movs	r0, #17
 8004a68:	f7ff fba2 	bl	80041b0 <SX1272Read>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	425b      	negs	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	b25a      	sxtb	r2, r3
 8004a78:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004a7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8004a7e:	201b      	movs	r0, #27
 8004a80:	f7ff fb96 	bl	80041b0 <SX1272Read>
 8004a84:	4603      	mov	r3, r0
 8004a86:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1272Read( REG_AFCLSB ) );
 8004a88:	201c      	movs	r0, #28
 8004a8a:	f7ff fb91 	bl	80041b0 <SX1272Read>
 8004a8e:	4603      	mov	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8004a90:	4323      	orrs	r3, r4
 8004a92:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004aaa:	fb02 f203 	mul.w	r2, r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f643 5109 	movw	r1, #15625	; 0x3d09
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	3380      	adds	r3, #128	; 0x80
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	4413      	add	r3, r2
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004ac2:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1272.Settings.FskPacketHandler.RxGain = ( SX1272Read( REG_LNA ) >> 5 ) & 0x07;
 8004ac4:	200c      	movs	r0, #12
 8004ac6:	f7ff fb73 	bl	80041b0 <SX1272Read>
 8004aca:	4603      	mov	r3, r0
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                break;
 8004adc:	e01e      	b.n	8004b1c <SX1272OnDio2Irq+0x108>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004ae0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01b      	beq.n	8004b20 <SX1272OnDio2Irq+0x10c>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004ae8:	2102      	movs	r1, #2
 8004aea:	2012      	movs	r0, #18
 8004aec:	f7ff fb4e 	bl	800418c <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <SX1272OnDio2Irq+0x174>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <SX1272OnDio2Irq+0x10c>
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <SX1272OnDio2Irq+0x174>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <SX1272OnDio2Irq+0x10c>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004b02:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <SX1272OnDio2Irq+0x174>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695c      	ldr	r4, [r3, #20]
 8004b08:	201c      	movs	r0, #28
 8004b0a:	f7ff fb51 	bl	80041b0 <SX1272Read>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	4618      	mov	r0, r3
 8004b18:	47a0      	blx	r4
                break;
 8004b1a:	e001      	b.n	8004b20 <SX1272OnDio2Irq+0x10c>
                break;
 8004b1c:	bf00      	nop
 8004b1e:	e02b      	b.n	8004b78 <SX1272OnDio2Irq+0x164>
                break;
 8004b20:	bf00      	nop
            break;
 8004b22:	e029      	b.n	8004b78 <SX1272OnDio2Irq+0x164>
            switch( SX1272.Settings.Modem )
 8004b24:	4b16      	ldr	r3, [pc, #88]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004b26:	795b      	ldrb	r3, [r3, #5]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d021      	beq.n	8004b70 <SX1272OnDio2Irq+0x15c>
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d000      	beq.n	8004b32 <SX1272OnDio2Irq+0x11e>
                break;
 8004b30:	e021      	b.n	8004b76 <SX1272OnDio2Irq+0x162>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <SX1272OnDio2Irq+0x16c>)
 8004b34:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <SX1272OnDio2Irq+0x160>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	2012      	movs	r0, #18
 8004b40:	f7ff fb24 	bl	800418c <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <SX1272OnDio2Irq+0x174>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <SX1272OnDio2Irq+0x160>
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <SX1272OnDio2Irq+0x174>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <SX1272OnDio2Irq+0x160>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <SX1272OnDio2Irq+0x174>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695c      	ldr	r4, [r3, #20]
 8004b5c:	201c      	movs	r0, #28
 8004b5e:	f7ff fb27 	bl	80041b0 <SX1272Read>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	47a0      	blx	r4
                break;
 8004b6e:	e001      	b.n	8004b74 <SX1272OnDio2Irq+0x160>
                break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <SX1272OnDio2Irq+0x162>
                break;
 8004b74:	bf00      	nop
            break;
 8004b76:	bf00      	nop
    }
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	20000294 	.word	0x20000294
 8004b84:	20000314 	.word	0x20000314
 8004b88:	2000005c 	.word	0x2000005c

08004b8c <SX1272OnDio3Irq>:

void SX1272OnDio3Irq( void* context )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.Modem )
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <SX1272OnDio3Irq+0x80>)
 8004b96:	795b      	ldrb	r3, [r3, #5]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d030      	beq.n	8004bfe <SX1272OnDio3Irq+0x72>
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d000      	beq.n	8004ba2 <SX1272OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8004ba0:	e030      	b.n	8004c04 <SX1272OnDio3Irq+0x78>
        if( ( SX1272Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004ba2:	2012      	movs	r0, #18
 8004ba4:	f7ff fb04 	bl	80041b0 <SX1272Read>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d112      	bne.n	8004bd8 <SX1272OnDio3Irq+0x4c>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8004bb2:	2105      	movs	r1, #5
 8004bb4:	2012      	movs	r0, #18
 8004bb6:	f7ff fae9 	bl	800418c <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <SX1272OnDio3Irq+0x84>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01f      	beq.n	8004c02 <SX1272OnDio3Irq+0x76>
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <SX1272OnDio3Irq+0x84>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01a      	beq.n	8004c02 <SX1272OnDio3Irq+0x76>
                RadioEvents->CadDone( true );
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <SX1272OnDio3Irq+0x84>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	4798      	blx	r3
        break;
 8004bd6:	e014      	b.n	8004c02 <SX1272OnDio3Irq+0x76>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8004bd8:	2104      	movs	r1, #4
 8004bda:	2012      	movs	r0, #18
 8004bdc:	f7ff fad6 	bl	800418c <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <SX1272OnDio3Irq+0x84>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <SX1272OnDio3Irq+0x76>
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <SX1272OnDio3Irq+0x84>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <SX1272OnDio3Irq+0x76>
                RadioEvents->CadDone( false );
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <SX1272OnDio3Irq+0x84>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	4798      	blx	r3
        break;
 8004bfc:	e001      	b.n	8004c02 <SX1272OnDio3Irq+0x76>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e000      	b.n	8004c04 <SX1272OnDio3Irq+0x78>
        break;
 8004c02:	bf00      	nop
    }
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000294 	.word	0x20000294
 8004c10:	2000005c 	.word	0x2000005c

08004c14 <SX1272OnDio4Irq>:

void SX1272OnDio4Irq( void* context )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.Modem )
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <SX1272OnDio4Irq+0x3c>)
 8004c1e:	795b      	ldrb	r3, [r3, #5]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <SX1272OnDio4Irq+0x16>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d00a      	beq.n	8004c3e <SX1272OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8004c28:	e00c      	b.n	8004c44 <SX1272OnDio4Irq+0x30>
            if( SX1272.Settings.FskPacketHandler.PreambleDetected == false )
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <SX1272OnDio4Irq+0x3c>)
 8004c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <SX1272OnDio4Irq+0x2e>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <SX1272OnDio4Irq+0x3c>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        break;
 8004c3c:	e001      	b.n	8004c42 <SX1272OnDio4Irq+0x2e>
        break;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <SX1272OnDio4Irq+0x30>
        break;
 8004c42:	bf00      	nop
    }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	20000294 	.word	0x20000294

08004c54 <DelayMs>:

/* Includes ------------------------------------------------------------------*/
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
//  HW_RTC_DelayMs( ms );

}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LPM_SetStopMode>:

  return;
}

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	460a      	mov	r2, r1
 8004c72:	71fb      	strb	r3, [r7, #7]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71bb      	strb	r3, [r7, #6]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c78:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8004c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c82:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8004c84:	79bb      	ldrb	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <LPM_SetStopMode+0x36>
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d000      	beq.n	8004c90 <LPM_SetStopMode+0x28>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 8004c8e:	e00e      	b.n	8004cae <LPM_SetStopMode+0x46>
      StopModeDisable |= (uint32_t)id;
 8004c90:	79fa      	ldrb	r2, [r7, #7]
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <LPM_SetStopMode+0x5c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <LPM_SetStopMode+0x5c>)
 8004c9a:	6013      	str	r3, [r2, #0]
      break;
 8004c9c:	e007      	b.n	8004cae <LPM_SetStopMode+0x46>
      StopModeDisable &= ~(uint32_t)id;
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <LPM_SetStopMode+0x5c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <LPM_SetStopMode+0x5c>)
 8004caa:	6013      	str	r3, [r2, #0]
      break;
 8004cac:	bf00      	nop
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 8004cb8:	bf00      	nop
}
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	20000164 	.word	0x20000164

08004cc8 <LPM_GetMode>:

  return;
}

LPM_GetMode_t LPM_GetMode(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8004cd4:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 8004cd6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd8:	b672      	cpsid	i

  DISABLE_IRQ( );

  if(StopModeDisable )
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <LPM_GetMode+0x4c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <LPM_GetMode+0x20>
  {
    mode_selected = LPM_SleepMode;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e008      	b.n	8004cfa <LPM_GetMode+0x32>
  }
  else
  {
    if(OffModeDisable)
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <LPM_GetMode+0x50>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <LPM_GetMode+0x2e>
    {
      mode_selected = LPM_StopMode;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	e001      	b.n	8004cfa <LPM_GetMode+0x32>
    }
    else
    {
      mode_selected = LPM_OffMode;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000164 	.word	0x20000164
 8004d18:	20000168 	.word	0x20000168

08004d1c <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	615a      	str	r2, [r3, #20]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d6e:	697b      	ldr	r3, [r7, #20]

  BACKUP_PRIMASK();
 8004d70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d72:	b672      	cpsid	i

  DISABLE_IRQ( );


  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <TimerStart+0x2a>
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f902 	bl	8004f84 <TimerExists>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <TimerStart+0x36>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8004d90:	e02f      	b.n	8004df2 <TimerStart+0x96>
  }
  obj->Timestamp = obj->ReloadValue;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <TimerStart+0x9c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <TimerStart+0x5e>
  {
    HW_RTC_SetTimerContext( );
 8004dae:	f000 fb3b 	bl	8005428 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f958 	bl	8005068 <TimerInsertNewHeadTimer>
 8004db8:	e016      	b.n	8004de8 <TimerStart+0x8c>
  }
  else
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8004dba:	f000 faf1 	bl	80053a0 <HW_RTC_GetTimerElapsedTime>
 8004dbe:	61f8      	str	r0, [r7, #28]
    obj->Timestamp += elapsedTime;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	441a      	add	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

    if( obj->Timestamp < TimerListHead->Timestamp )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <TimerStart+0x9c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d203      	bcs.n	8004de2 <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f944 	bl	8005068 <TimerInsertNewHeadTimer>
 8004de0:	e002      	b.n	8004de8 <TimerStart+0x8c>
    }
    else
    {
      TimerInsertTimer( obj);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f910 	bl	8005008 <TimerInsertTimer>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000016c 	.word	0x2000016c

08004dfc <TimerStop>:
    TimerSetTimeout( TimerListHead );
  }
}

void TimerStop( TimerEvent_t *obj ) 
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e04:	f3ef 8310 	mrs	r3, PRIMASK
 8004e08:	613b      	str	r3, [r7, #16]
  return(result);
 8004e0a:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8004e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e0e:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8004e10:	4b36      	ldr	r3, [pc, #216]	; (8004eec <TimerStop+0xf0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8004e16:	4b35      	ldr	r3, [pc, #212]	; (8004eec <TimerStop+0xf0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8004e1c:	4b33      	ldr	r3, [pc, #204]	; (8004eec <TimerStop+0xf0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <TimerStop+0x2e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <TimerStop+0x3a>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8004e34:	e057      	b.n	8004ee6 <TimerStop+0xea>
  }

  obj->IsStarted = false;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <TimerStop+0xf0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d147      	bne.n	8004ed6 <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <TimerStop+0xf0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	7a5b      	ldrb	r3, [r3, #9]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d019      	beq.n	8004e84 <TimerStop+0x88>
    {

      TimerListHead->IsNext2Expire = false;
 8004e50:	4b26      	ldr	r3, [pc, #152]	; (8004eec <TimerStop+0xf0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2200      	movs	r2, #0
 8004e56:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 8004e58:	4b24      	ldr	r3, [pc, #144]	; (8004eec <TimerStop+0xf0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <TimerStop+0xf0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	4a20      	ldr	r2, [pc, #128]	; (8004eec <TimerStop+0xf0>)
 8004e6a:	6013      	str	r3, [r2, #0]
        TimerSetTimeout( TimerListHead );
 8004e6c:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <TimerStop+0xf0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f8a5 	bl	8004fc0 <TimerSetTimeout>
 8004e76:	e031      	b.n	8004edc <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8004e78:	f000 fabc 	bl	80053f4 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <TimerStop+0xf0>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e02b      	b.n	8004edc <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <TimerStop+0xf0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 8004e8e:	4b17      	ldr	r3, [pc, #92]	; (8004eec <TimerStop+0xf0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	4a15      	ldr	r2, [pc, #84]	; (8004eec <TimerStop+0xf0>)
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e020      	b.n	8004edc <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <TimerStop+0xf0>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e01c      	b.n	8004edc <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d110      	bne.n	8004ecc <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <TimerStop+0xc4>
        {
          cur = cur->Next;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8004ebe:	e00d      	b.n	8004edc <TimerStop+0xe0>
          cur = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	615a      	str	r2, [r3, #20]
        break;
 8004eca:	e007      	b.n	8004edc <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e2      	bne.n	8004ea2 <TimerStop+0xa6>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	2000016c 	.word	0x2000016c

08004ef0 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	f000 f9e7 	bl	80052d2 <HW_RTC_ms2Tick>
 8004f04:	60f8      	str	r0, [r7, #12]

  TimerStop( obj );
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ff78 	bl	8004dfc <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 8004f0c:	f000 f9d9 	bl	80052c2 <HW_RTC_GetMinimumTimeout>
 8004f10:	60b8      	str	r0, [r7, #8]

  if( ticks < minValue )
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d201      	bcs.n	8004f1e <TimerSetValue+0x2e>
  {
    ticks = minValue;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 8004f38:	f000 fa4a 	bl	80053d0 <HW_RTC_GetTimerValue>
 8004f3c:	6078      	str	r0, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9e2 	bl	8005308 <HW_RTC_Tick2ms>
 8004f44:	4603      	mov	r3, r0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <TimerGetElapsedTime+0x12>
  {
    return 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e00d      	b.n	8004f7c <TimerGetElapsedTime+0x2e>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 8004f60:	f000 fa36 	bl	80053d0 <HW_RTC_GetTimerValue>
 8004f64:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9b3 	bl	80052d2 <HW_RTC_ms2Tick>
 8004f6c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 f9c7 	bl	8005308 <HW_RTC_Tick2ms>
 8004f7a:	4603      	mov	r3, r0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <TimerExists+0x38>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8004f92:	e008      	b.n	8004fa6 <TimerExists+0x22>
  {
    if( cur == obj )
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d101      	bne.n	8004fa0 <TimerExists+0x1c>
    {
      return true;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e006      	b.n	8004fae <TimerExists+0x2a>
    }
    cur = cur->Next;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f3      	bne.n	8004f94 <TimerExists+0x10>
  }
  return false;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	2000016c 	.word	0x2000016c

08004fc0 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8004fc8:	f000 f97b 	bl	80052c2 <HW_RTC_GetMinimumTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681c      	ldr	r4, [r3, #0]
 8004fda:	f000 f9e1 	bl	80053a0 <HW_RTC_GetTimerElapsedTime>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	d206      	bcs.n	8004ff6 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8004fe8:	f000 f9da 	bl	80053a0 <HW_RTC_GetTimerElapsedTime>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f9a2 	bl	8005344 <HW_RTC_SetAlarm>
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}

08005008 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <TimerInsertTimer+0x5c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <TimerInsertTimer+0x5c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800501e:	e012      	b.n	8005046 <TimerInsertTimer+0x3e>
  {
    if( obj->Timestamp  > next->Timestamp )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d905      	bls.n	8005038 <TimerInsertTimer+0x30>
    {
        cur = next;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	e006      	b.n	8005046 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	615a      	str	r2, [r3, #20]
        return;
 8005044:	e009      	b.n	800505a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e8      	bne.n	8005020 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	2000016c 	.word	0x2000016c

08005068 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <TimerInsertNewHeadTimer+0x38>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 8005088:	4a05      	ldr	r2, [pc, #20]	; (80050a0 <TimerInsertNewHeadTimer+0x38>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <TimerInsertNewHeadTimer+0x38>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ff94 	bl	8004fc0 <TimerSetTimeout>
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	2000016c 	.word	0x2000016c

080050a4 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80050b2:	e007      	b.n	80050c4 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	1c53      	adds	r3, r2, #1
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1c59      	adds	r1, r3, #1
 80050be:	60f9      	str	r1, [r7, #12]
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	80fa      	strh	r2, [r7, #6]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f2      	bne.n	80050b4 <memcpy1+0x10>
    }
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	460b      	mov	r3, r1
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	817b      	strh	r3, [r7, #10]

  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a32      	ldr	r2, [pc, #200]	; (80051b8 <HW_GPIO_Init+0xdc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01c      	beq.n	800512c <HW_GPIO_Init+0x50>
 80050f2:	4a31      	ldr	r2, [pc, #196]	; (80051b8 <HW_GPIO_Init+0xdc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d803      	bhi.n	8005100 <HW_GPIO_Init+0x24>
 80050f8:	4a30      	ldr	r2, [pc, #192]	; (80051bc <HW_GPIO_Init+0xe0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <HW_GPIO_Init+0x32>
 80050fe:	e042      	b.n	8005186 <HW_GPIO_Init+0xaa>
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <HW_GPIO_Init+0xe4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d021      	beq.n	800514a <HW_GPIO_Init+0x6e>
 8005106:	4a2f      	ldr	r2, [pc, #188]	; (80051c4 <HW_GPIO_Init+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d02d      	beq.n	8005168 <HW_GPIO_Init+0x8c>
 800510c:	e03b      	b.n	8005186 <HW_GPIO_Init+0xaa>
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6313      	str	r3, [r2, #48]	; 0x30
 800511e:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	e03a      	b.n	80051a2 <HW_GPIO_Init+0xc6>
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005136:	f043 0302 	orr.w	r3, r3, #2
 800513a:	6313      	str	r3, [r2, #48]	; 0x30
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HW_GPIO_Init+0xec>)
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	e02b      	b.n	80051a2 <HW_GPIO_Init+0xc6>
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HW_GPIO_Init+0xec>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	e01c      	b.n	80051a2 <HW_GPIO_Init+0xc6>
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HW_GPIO_Init+0xec>)
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005172:	f043 0308 	orr.w	r3, r3, #8
 8005176:	6313      	str	r3, [r2, #48]	; 0x30
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <HW_GPIO_Init+0xec>)
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	e00d      	b.n	80051a2 <HW_GPIO_Init+0xc6>
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HW_GPIO_Init+0xec>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4a0e      	ldr	r2, [pc, #56]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
 8005196:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <HW_GPIO_Init+0xec>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 80051a2:	897a      	ldrh	r2, [r7, #10]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7fb ff96 	bl	80010dc <HAL_GPIO_Init>
}
 80051b0:	bf00      	nop
 80051b2:	3728      	adds	r7, #40	; 0x28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40020400 	.word	0x40020400
 80051bc:	40020000 	.word	0x40020000
 80051c0:	40020800 	.word	0x40020800
 80051c4:	40020c00 	.word	0x40020c00
 80051c8:	40023800 	.word	0x40023800

080051cc <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	460b      	mov	r3, r1
 80051da:	817b      	strh	r3, [r7, #10]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 80051dc:	897b      	ldrh	r3, [r7, #10]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f83a 	bl	8005258 <HW_GPIO_GetBitPos>
 80051e4:	4603      	mov	r3, r0
 80051e6:	617b      	str	r3, [r7, #20]

  if ( irqHandler != NULL)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d017      	beq.n	800521e <HW_GPIO_SetIrq+0x52>
  {
    GpioIrq[ BitPos ] = irqHandler;
 80051ee:	4910      	ldr	r1, [pc, #64]	; (8005230 <HW_GPIO_SetIrq+0x64>)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 80051f8:	897b      	ldrh	r3, [r7, #10]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fff0 	bl	80061e0 <MSP_GetIRQn>
 8005200:	4603      	mov	r3, r0
 8005202:	74fb      	strb	r3, [r7, #19]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8005204:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005208:	2200      	movs	r2, #0
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fb ff2e 	bl	800106e <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ( IRQnb );
 8005212:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb ff45 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 800521c:	e004      	b.n	8005228 <HW_GPIO_SetIrq+0x5c>
    GpioIrq[ BitPos ] = NULL;
 800521e:	4a04      	ldr	r2, [pc, #16]	; (8005230 <HW_GPIO_SetIrq+0x64>)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2100      	movs	r1, #0
 8005224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8005228:	bf00      	nop
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000170 	.word	0x20000170

08005234 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	460b      	mov	r3, r1
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	4619      	mov	r1, r3
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7fc f8c8 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	80fb      	strh	r3, [r7, #6]
  uint8_t PinPos=0;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HW_GPIO_GetBitPos+0x20>
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	f043 0308 	orr.w	r3, r3, #8
 8005276:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HW_GPIO_GetBitPos+0x34>
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	f043 0304 	orr.w	r3, r3, #4
 800528a:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HW_GPIO_GetBitPos+0x48>
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HW_GPIO_GetBitPos+0x5c>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]

  return PinPos;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 80052c6:	2303      	movs	r3, #3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMilliSec )
{
 80052d2:	b590      	push	{r4, r7, lr}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	01e1      	lsls	r1, r4, #7
 80052ea:	ea41 6153 	orr.w	r1, r1, r3, lsr #25
 80052ee:	01d8      	lsls	r0, r3, #7
 80052f0:	f04f 027d 	mov.w	r2, #125	; 0x7d
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	f7fb fbec 	bl	8000ad4 <__aeabi_uldivmod>
 80052fc:	4603      	mov	r3, r0
 80052fe:	460c      	mov	r4, r1
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bd90      	pop	{r4, r7, pc}

08005308 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms( uint32_t tick )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick>>N_PREDIV_S;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	0a9b      	lsrs	r3, r3, #10
 8005314:	60fb      	str	r3, [r7, #12]
  tick = tick&PREDIV_S;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800531c:	607b      	str	r3, [r7, #4]
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005324:	fb02 f203 	mul.w	r2, r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	0a9b      	lsrs	r3, r3, #10
 8005334:	4413      	add	r3, r2
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800534c:	4b13      	ldr	r3, [pc, #76]	; (800539c <HW_RTC_SetAlarm+0x58>)
 800534e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005352:	3303      	adds	r3, #3
 8005354:	461c      	mov	r4, r3
 8005356:	f000 f823 	bl	80053a0 <HW_RTC_GetTimerElapsedTime>
 800535a:	4602      	mov	r2, r0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	429c      	cmp	r4, r3
 8005362:	d204      	bcs.n	800536e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8005364:	2100      	movs	r1, #0
 8005366:	2004      	movs	r0, #4
 8005368:	f7ff fc7e 	bl	8004c68 <LPM_SetStopMode>
 800536c:	e003      	b.n	8005376 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 800536e:	2101      	movs	r1, #1
 8005370:	2004      	movs	r0, #4
 8005372:	f7ff fc79 	bl	8004c68 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if( LPM_GetMode() == LPM_StopMode )
 8005376:	f7ff fca7 	bl	8004cc8 <LPM_GetMode>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	d106      	bne.n	800538e <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <HW_RTC_SetAlarm+0x58>)
 8005382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f860 	bl	8005454 <HW_RTC_StartWakeUpAlarm>
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}
 800539c:	200001b0 	.word	0x200001b0

080053a0 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b089      	sub	sp, #36	; 0x24
 80053a4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 80053a6:	f107 0208 	add.w	r2, r7, #8
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f948 	bl	8005644 <HW_RTC_GetCalendarValue>
 80053b4:	4603      	mov	r3, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 80053ba:	4b04      	ldr	r3, [pc, #16]	; (80053cc <HW_RTC_GetTimerElapsedTime+0x2c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	1ad3      	subs	r3, r2, r3
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd90      	pop	{r4, r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200001fc 	.word	0x200001fc

080053d0 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b089      	sub	sp, #36	; 0x24
 80053d4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 80053d6:	f107 0208 	add.w	r2, r7, #8
 80053da:	1d3b      	adds	r3, r7, #4
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f930 	bl	8005644 <HW_RTC_GetCalendarValue>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	61fb      	str	r3, [r7, #28]

  return( CalendarValue );
 80053ea:	69fb      	ldr	r3, [r7, #28]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3724      	adds	r7, #36	; 0x24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}

080053f4 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 80053f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053fc:	4808      	ldr	r0, [pc, #32]	; (8005420 <HW_RTC_StopAlarm+0x2c>)
 80053fe:	f7fc fdc5 	bl	8001f8c <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <HW_RTC_StopAlarm+0x2c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HW_RTC_StopAlarm+0x2c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005412:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <HW_RTC_StopAlarm+0x30>)
 8005416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800541a:	615a      	str	r2, [r3, #20]
}
 800541c:	bf00      	nop
 800541e:	bd80      	pop	{r7, pc}
 8005420:	200001b4 	.word	0x200001b4
 8005424:	40013c00 	.word	0x40013c00

08005428 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8005428:	b598      	push	{r3, r4, r7, lr}
 800542a:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800542c:	4906      	ldr	r1, [pc, #24]	; (8005448 <HW_RTC_SetTimerContext+0x20>)
 800542e:	4807      	ldr	r0, [pc, #28]	; (800544c <HW_RTC_SetTimerContext+0x24>)
 8005430:	f000 f908 	bl	8005644 <HW_RTC_GetCalendarValue>
 8005434:	4603      	mov	r3, r0
 8005436:	460c      	mov	r4, r1
 8005438:	461a      	mov	r2, r3
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HW_RTC_SetTimerContext+0x28>)
 800543c:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <HW_RTC_SetTimerContext+0x28>)
 8005440:	681b      	ldr	r3, [r3, #0]
}
 8005442:	4618      	mov	r0, r3
 8005444:	bd98      	pop	{r3, r4, r7, pc}
 8005446:	bf00      	nop
 8005448:	20000200 	.word	0x20000200
 800544c:	20000214 	.word	0x20000214
 8005450:	200001fc 	.word	0x200001fc

08005454 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8005454:	b5b0      	push	{r4, r5, r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t rtcAlarmSeconds = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t rtcAlarmMinutes = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t rtcAlarmHours = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t rtcAlarmDays = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	84fb      	strh	r3, [r7, #38]	; 0x26
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8005470:	4b6e      	ldr	r3, [pc, #440]	; (800562c <HW_RTC_StartWakeUpAlarm+0x1d8>)
 8005472:	f107 0410 	add.w	r4, r7, #16
 8005476:	1d1d      	adds	r5, r3, #4
 8005478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800547a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6023      	str	r3, [r4, #0]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8005480:	4b6a      	ldr	r3, [pc, #424]	; (800562c <HW_RTC_StartWakeUpAlarm+0x1d8>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	60fb      	str	r3, [r7, #12]

  HW_RTC_StopAlarm( );
 8005486:	f7ff ffb5 	bl	80053f4 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005492:	3303      	adds	r3, #3
 8005494:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549e:	b29a      	uxth	r2, r3
 80054a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054a2:	4413      	add	r3, r2
 80054a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0a9b      	lsrs	r3, r3, #10
 80054aa:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 80054b0:	e008      	b.n	80054c4 <HW_RTC_StartWakeUpAlarm+0x70>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80054b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80054bc:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80054be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054c0:	3301      	adds	r3, #1
 80054c2:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a5a      	ldr	r2, [pc, #360]	; (8005630 <HW_RTC_StartWakeUpAlarm+0x1dc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d8f2      	bhi.n	80054b2 <HW_RTC_StartWakeUpAlarm+0x5e>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80054cc:	7c3b      	ldrb	r3, [r7, #16]
 80054ce:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80054d0:	e006      	b.n	80054e0 <HW_RTC_StartWakeUpAlarm+0x8c>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80054d8:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 80054da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054dc:	3301      	adds	r3, #1
 80054de:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80054e6:	d2f4      	bcs.n	80054d2 <HW_RTC_StartWakeUpAlarm+0x7e>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80054e8:	7c7b      	ldrb	r3, [r7, #17]
 80054ea:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80054ec:	e005      	b.n	80054fa <HW_RTC_StartWakeUpAlarm+0xa6>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3b3c      	subs	r3, #60	; 0x3c
 80054f2:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 80054f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054f6:	3301      	adds	r3, #1
 80054f8:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b3b      	cmp	r3, #59	; 0x3b
 80054fe:	d8f6      	bhi.n	80054ee <HW_RTC_StartWakeUpAlarm+0x9a>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8005500:	7cbb      	ldrb	r3, [r7, #18]
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 800550c:	e006      	b.n	800551c <HW_RTC_StartWakeUpAlarm+0xc8>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 800550e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005510:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005514:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSeconds++;
 8005516:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005518:	3301      	adds	r3, #1
 800551a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 800551c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005522:	d2f4      	bcs.n	800550e <HW_RTC_StartWakeUpAlarm+0xba>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8005524:	e005      	b.n	8005532 <HW_RTC_StartWakeUpAlarm+0xde>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8005526:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005528:	3b3c      	subs	r3, #60	; 0x3c
 800552a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    rtcAlarmMinutes++;
 800552c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800552e:	3301      	adds	r3, #1
 8005530:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8005532:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005534:	2b3b      	cmp	r3, #59	; 0x3b
 8005536:	d8f6      	bhi.n	8005526 <HW_RTC_StartWakeUpAlarm+0xd2>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8005538:	e005      	b.n	8005546 <HW_RTC_StartWakeUpAlarm+0xf2>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800553a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800553c:	3b3c      	subs	r3, #60	; 0x3c
 800553e:	857b      	strh	r3, [r7, #42]	; 0x2a
    rtcAlarmHours++;
 8005540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005542:	3301      	adds	r3, #1
 8005544:	853b      	strh	r3, [r7, #40]	; 0x28
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8005546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005548:	2b3b      	cmp	r3, #59	; 0x3b
 800554a:	d8f6      	bhi.n	800553a <HW_RTC_StartWakeUpAlarm+0xe6>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800554c:	e005      	b.n	800555a <HW_RTC_StartWakeUpAlarm+0x106>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 800554e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005550:	3b18      	subs	r3, #24
 8005552:	853b      	strh	r3, [r7, #40]	; 0x28
    rtcAlarmDays++;
 8005554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005556:	3301      	adds	r3, #1
 8005558:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800555a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800555c:	2b17      	cmp	r3, #23
 800555e:	d8f6      	bhi.n	800554e <HW_RTC_StartWakeUpAlarm+0xfa>
  }

  if( RTC_DateStruct.Year % 4 == 0 )
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d113      	bne.n	8005594 <HW_RTC_StartWakeUpAlarm+0x140>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )
 800556c:	7b7b      	ldrb	r3, [r7, #13]
 800556e:	3b01      	subs	r3, #1
 8005570:	4a30      	ldr	r2, [pc, #192]	; (8005634 <HW_RTC_StartWakeUpAlarm+0x1e0>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	b29b      	uxth	r3, r3
 8005576:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005578:	429a      	cmp	r2, r3
 800557a:	d91e      	bls.n	80055ba <HW_RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800557c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800557e:	7b7a      	ldrb	r2, [r7, #13]
 8005580:	3a01      	subs	r2, #1
 8005582:	492c      	ldr	r1, [pc, #176]	; (8005634 <HW_RTC_StartWakeUpAlarm+0x1e0>)
 8005584:	5c8a      	ldrb	r2, [r1, r2]
 8005586:	fb93 f1f2 	sdiv	r1, r3, r2
 800558a:	fb02 f201 	mul.w	r2, r2, r1
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005592:	e012      	b.n	80055ba <HW_RTC_StartWakeUpAlarm+0x166>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )
 8005594:	7b7b      	ldrb	r3, [r7, #13]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HW_RTC_StartWakeUpAlarm+0x1e4>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	b29b      	uxth	r3, r3
 800559e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d90a      	bls.n	80055ba <HW_RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80055a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055a6:	7b7a      	ldrb	r2, [r7, #13]
 80055a8:	3a01      	subs	r2, #1
 80055aa:	4923      	ldr	r1, [pc, #140]	; (8005638 <HW_RTC_StartWakeUpAlarm+0x1e4>)
 80055ac:	5c8a      	ldrb	r2, [r1, r2]
 80055ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80055b2:	fb02 f201 	mul.w	r2, r2, r1
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 80055ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055bc:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80055c0:	3303      	adds	r3, #3
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055c6:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 80055c8:	4b1c      	ldr	r3, [pc, #112]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055ca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80055ce:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80055d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b19      	ldr	r3, [pc, #100]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055d6:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80055d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055de:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80055e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b15      	ldr	r3, [pc, #84]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055e6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 80055e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055ee:	f883 2020 	strb.w	r2, [r3, #32]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80055f2:	7cfa      	ldrb	r2, [r7, #19]
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055f6:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005600:	2200      	movs	r2, #0
 8005602:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800560a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 800560e:	2200      	movs	r2, #0
 8005610:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005614:	2200      	movs	r2, #0
 8005616:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8005618:	2200      	movs	r2, #0
 800561a:	4908      	ldr	r1, [pc, #32]	; (800563c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 800561c:	4808      	ldr	r0, [pc, #32]	; (8005640 <HW_RTC_StartWakeUpAlarm+0x1ec>)
 800561e:	f7fc fb61 	bl	8001ce4 <HAL_RTC_SetAlarm_IT>
}
 8005622:	bf00      	nop
 8005624:	3730      	adds	r7, #48	; 0x30
 8005626:	46bd      	mov	sp, r7
 8005628:	bdb0      	pop	{r4, r5, r7, pc}
 800562a:	bf00      	nop
 800562c:	200001fc 	.word	0x200001fc
 8005630:	0001517f 	.word	0x0001517f
 8005634:	08006994 	.word	0x08006994
 8005638:	08006988 	.word	0x08006988
 800563c:	200001d4 	.word	0x200001d4
 8005640:	200001b4 	.word	0x200001b4

08005644 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint64_t calendarValue = 0;
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800565a:	2200      	movs	r2, #0
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	4838      	ldr	r0, [pc, #224]	; (8005740 <HW_RTC_GetCalendarValue+0xfc>)
 8005660:	f7fc fae2 	bl	8001c28 <HAL_RTC_GetTime>
//    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
//
//  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC) );

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	78db      	ldrb	r3, [r3, #3]
 8005668:	461a      	mov	r2, r3
 800566a:	f240 53b5 	movw	r3, #1461	; 0x5b5
 800566e:	fb03 f302 	mul.w	r3, r3, r2
 8005672:	3303      	adds	r3, #3
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	60fb      	str	r3, [r7, #12]

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	78db      	ldrb	r3, [r3, #3]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HW_RTC_GetCalendarValue+0x46>
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HW_RTC_GetCalendarValue+0x100>)
 8005688:	e000      	b.n	800568c <HW_RTC_GetCalendarValue+0x48>
 800568a:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <HW_RTC_GetCalendarValue+0x104>)
 800568c:	60bb      	str	r3, [r7, #8]

  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	1e5a      	subs	r2, r3, #1
 8005694:	4613      	mov	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	3301      	adds	r3, #1
 80056a0:	0fda      	lsrs	r2, r3, #31
 80056a2:	4413      	add	r3, r2
 80056a4:	105b      	asrs	r3, r3, #1
 80056a6:	4619      	mov	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	fa22 f303 	lsr.w	r3, r2, r3
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	1acb      	subs	r3, r1, r3
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  seconds += (RTC_DateStruct->Date -1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	789b      	ldrb	r3, [r3, #2]
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	3b01      	subs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a1e      	ldr	r2, [pc, #120]	; (800574c <HW_RTC_GetCalendarValue+0x108>)
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	60fb      	str	r3, [r7, #12]

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	789b      	ldrb	r3, [r3, #2]
 80056de:	4618      	mov	r0, r3
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80056ea:	fb03 f202 	mul.w	r2, r3, r2
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	4619      	mov	r1, r3
 80056f4:	460b      	mov	r3, r1
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	1a5b      	subs	r3, r3, r1
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	4403      	add	r3, r0
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]



  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	461a      	mov	r2, r3
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	0d95      	lsrs	r5, r2, #22
 8005710:	0294      	lsls	r4, r2, #10
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800571a:	3303      	adds	r3, #3
 800571c:	461a      	mov	r2, r3
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	18a0      	adds	r0, r4, r2
 8005724:	eb45 0103 	adc.w	r1, r5, r3
 8005728:	4603      	mov	r3, r0
 800572a:	460c      	mov	r4, r1
 800572c:	e9c7 3404 	strd	r3, r4, [r7, #16]

  return( calendarValue );
 8005730:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8005734:	4618      	mov	r0, r3
 8005736:	4621      	mov	r1, r4
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bdb0      	pop	{r4, r5, r7, pc}
 800573e:	bf00      	nop
 8005740:	200001b4 	.word	0x200001b4
 8005744:	00445550 	.word	0x00445550
 8005748:	0099aaa0 	.word	0x0099aaa0
 800574c:	00015180 	.word	0x00015180

08005750 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8005756:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HW_SPI_Init+0x80>)
 8005758:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <HW_SPI_Init+0x84>)
 800575a:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800575c:	481e      	ldr	r0, [pc, #120]	; (80057d8 <HW_SPI_Init+0x88>)
 800575e:	f000 f891 	bl	8005884 <SpiFrequency>
 8005762:	4602      	mov	r2, r0
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <HW_SPI_Init+0x80>)
 8005766:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <HW_SPI_Init+0x80>)
 800576a:	2200      	movs	r2, #0
 800576c:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800576e:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <HW_SPI_Init+0x80>)
 8005770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005774:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8005776:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <HW_SPI_Init+0x80>)
 8005778:	2200      	movs	r2, #0
 800577a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <HW_SPI_Init+0x80>)
 800577e:	2200      	movs	r2, #0
 8005780:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <HW_SPI_Init+0x80>)
 8005784:	2200      	movs	r2, #0
 8005786:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <HW_SPI_Init+0x80>)
 800578a:	2200      	movs	r2, #0
 800578c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HW_SPI_Init+0x80>)
 8005790:	2200      	movs	r2, #0
 8005792:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <HW_SPI_Init+0x80>)
 8005796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579a:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <HW_SPI_Init+0x80>)
 800579e:	2200      	movs	r2, #0
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <HW_SPI_Init+0x8c>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <HW_SPI_Init+0x8c>)
 80057ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <HW_SPI_Init+0x8c>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 80057be:	4804      	ldr	r0, [pc, #16]	; (80057d0 <HW_SPI_Init+0x80>)
 80057c0:	f7fc fcad 	bl	800211e <HAL_SPI_Init>
    /* Initialization Error */
    // Error_Handler();
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit(  );
 80057c4:	f000 f80c 	bl	80057e0 <HW_SPI_IoInit>
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000218 	.word	0x20000218
 80057d4:	40013000 	.word	0x40013000
 80057d8:	00989680 	.word	0x00989680
 80057dc:	40023800 	.word	0x40023800

080057e0 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	611a      	str	r2, [r3, #16]


  initStruct.Mode = GPIO_MODE_AF_PP;
 80057f4:	2302      	movs	r3, #2
 80057f6:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN  ;
 80057f8:	2302      	movs	r3, #2
 80057fa:	60fb      	str	r3, [r7, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80057fc:	2303      	movs	r3, #3
 80057fe:	613b      	str	r3, [r7, #16]
  initStruct.Alternate= SPI1_AF;
 8005800:	2305      	movs	r3, #5
 8005802:	617b      	str	r3, [r7, #20]

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	461a      	mov	r2, r3
 8005808:	2120      	movs	r1, #32
 800580a:	4811      	ldr	r0, [pc, #68]	; (8005850 <HW_SPI_IoInit+0x70>)
 800580c:	f7ff fc66 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	461a      	mov	r2, r3
 8005814:	2140      	movs	r1, #64	; 0x40
 8005816:	480e      	ldr	r0, [pc, #56]	; (8005850 <HW_SPI_IoInit+0x70>)
 8005818:	f7ff fc60 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	461a      	mov	r2, r3
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	480b      	ldr	r0, [pc, #44]	; (8005850 <HW_SPI_IoInit+0x70>)
 8005824:	f7ff fc5a 	bl	80050dc <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005828:	2301      	movs	r3, #1
 800582a:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLUP	;
 800582c:	2301      	movs	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	461a      	mov	r2, r3
 8005834:	2140      	movs	r1, #64	; 0x40
 8005836:	4807      	ldr	r0, [pc, #28]	; (8005854 <HW_SPI_IoInit+0x74>)
 8005838:	f7ff fc50 	bl	80050dc <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800583c:	2201      	movs	r2, #1
 800583e:	2140      	movs	r1, #64	; 0x40
 8005840:	4804      	ldr	r0, [pc, #16]	; (8005854 <HW_SPI_IoInit+0x74>)
 8005842:	f7ff fcf7 	bl	8005234 <HW_GPIO_Write>
}
 8005846:	bf00      	nop
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40020000 	.word	0x40020000
 8005854:	40020400 	.word	0x40020400

08005858 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af02      	add	r7, sp, #8
 800585e:	4603      	mov	r3, r0
 8005860:	80fb      	strh	r3, [r7, #6]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);
 8005862:	f107 020e 	add.w	r2, r7, #14
 8005866:	1db9      	adds	r1, r7, #6
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	2301      	movs	r3, #1
 8005870:	4803      	ldr	r0, [pc, #12]	; (8005880 <HW_SPI_InOut+0x28>)
 8005872:	f7fc fcb8 	bl	80021e6 <HAL_SPI_TransmitReceive>

  return rxData;
 8005876:	89fb      	ldrh	r3, [r7, #14]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000218 	.word	0x20000218

08005884 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8005890:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <SpiFrequency+0x78>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while( SysClkTmp > hz)
 8005896:	e008      	b.n	80058aa <SpiFrequency+0x26>
  {
    divisor++;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d804      	bhi.n	80058b4 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d8f2      	bhi.n	8005898 <SpiFrequency+0x14>
 80058b2:	e000      	b.n	80058b6 <SpiFrequency+0x32>
      break;
 80058b4:	bf00      	nop
  }

  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <SpiFrequency+0x40>
 80058c0:	2200      	movs	r2, #0
 80058c2:	e000      	b.n	80058c6 <SpiFrequency+0x42>
 80058c4:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )|
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <SpiFrequency+0x50>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <SpiFrequency+0x52>
 80058d4:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 80058d6:	4313      	orrs	r3, r2
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	f002 0201 	and.w	r2, r2, #1
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d101      	bne.n	80058e6 <SpiFrequency+0x62>
 80058e2:	2200      	movs	r2, #0
 80058e4:	e000      	b.n	80058e8 <SpiFrequency+0x64>
 80058e6:	2208      	movs	r2, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  return baudRate;
 80058ec:	68fb      	ldr	r3, [r7, #12]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	2000003c 	.word	0x2000003c

08005900 <SX1272GetWakeTime>:
    SX1272SetPublicNetwork,
    SX1272GetWakeupTime
};

uint32_t SX1272GetWakeTime( void )
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return  0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <SX1272SetXO>:

void SX1272SetXO( uint8_t state )
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <SX1272IoInit>:
void SX1272IoInit( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]

  SX1272BoardInit( &BoardCallbacks );
 800593c:	4812      	ldr	r0, [pc, #72]	; (8005988 <SX1272IoInit+0x60>)
 800593e:	f7fd f9db 	bl	8002cf8 <SX1272BoardInit>

  initStruct.Mode = GPIO_MODE_IT_RISING;
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <SX1272IoInit+0x64>)
 8005944:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8005946:	2302      	movs	r3, #2
 8005948:	60fb      	str	r3, [r7, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800594a:	2303      	movs	r3, #3
 800594c:	613b      	str	r3, [r7, #16]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	461a      	mov	r2, r3
 8005952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005956:	480e      	ldr	r0, [pc, #56]	; (8005990 <SX1272IoInit+0x68>)
 8005958:	f7ff fbc0 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	461a      	mov	r2, r3
 8005960:	2108      	movs	r1, #8
 8005962:	480c      	ldr	r0, [pc, #48]	; (8005994 <SX1272IoInit+0x6c>)
 8005964:	f7ff fbba 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	461a      	mov	r2, r3
 800596c:	2120      	movs	r1, #32
 800596e:	4809      	ldr	r0, [pc, #36]	; (8005994 <SX1272IoInit+0x6c>)
 8005970:	f7ff fbb4 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	461a      	mov	r2, r3
 8005978:	2110      	movs	r1, #16
 800597a:	4806      	ldr	r0, [pc, #24]	; (8005994 <SX1272IoInit+0x6c>)
 800597c:	f7ff fbae 	bl	80050dc <HW_GPIO_Init>
}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000020 	.word	0x20000020
 800598c:	10110000 	.word	0x10110000
 8005990:	40020000 	.word	0x40020000
 8005994:	40020400 	.word	0x40020400

08005998 <SX1272IoIrqInit>:

void SX1272IoIrqInit( DioIrqHandler **irqHandlers )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059aa:	480f      	ldr	r0, [pc, #60]	; (80059e8 <SX1272IoIrqInit+0x50>)
 80059ac:	f7ff fc0e 	bl	80051cc <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	2108      	movs	r1, #8
 80059ba:	480c      	ldr	r0, [pc, #48]	; (80059ec <SX1272IoIrqInit+0x54>)
 80059bc:	f7ff fc06 	bl	80051cc <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3308      	adds	r3, #8
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	2120      	movs	r1, #32
 80059ca:	4808      	ldr	r0, [pc, #32]	; (80059ec <SX1272IoIrqInit+0x54>)
 80059cc:	f7ff fbfe 	bl	80051cc <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	330c      	adds	r3, #12
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	2110      	movs	r1, #16
 80059da:	4804      	ldr	r0, [pc, #16]	; (80059ec <SX1272IoIrqInit+0x54>)
 80059dc:	f7ff fbf6 	bl	80051cc <HW_GPIO_SetIrq>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40020000 	.word	0x40020000
 80059ec:	40020400 	.word	0x40020400

080059f0 <SX1272IoDeInit>:

void SX1272IoDeInit( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	611a      	str	r2, [r3, #16]

  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 8005a04:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <SX1272IoDeInit+0x58>)
 8005a06:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	60fb      	str	r3, [r7, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <SX1272IoDeInit+0x5c>)
 8005a16:	f7ff fb61 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2108      	movs	r1, #8
 8005a20:	480b      	ldr	r0, [pc, #44]	; (8005a50 <SX1272IoDeInit+0x60>)
 8005a22:	f7ff fb5b 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2120      	movs	r1, #32
 8005a2c:	4808      	ldr	r0, [pc, #32]	; (8005a50 <SX1272IoDeInit+0x60>)
 8005a2e:	f7ff fb55 	bl	80050dc <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	461a      	mov	r2, r3
 8005a36:	2110      	movs	r1, #16
 8005a38:	4805      	ldr	r0, [pc, #20]	; (8005a50 <SX1272IoDeInit+0x60>)
 8005a3a:	f7ff fb4f 	bl	80050dc <HW_GPIO_Init>
}
 8005a3e:	bf00      	nop
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	10110000 	.word	0x10110000
 8005a4c:	40020000 	.word	0x40020000
 8005a50:	40020400 	.word	0x40020400

08005a54 <SX1272SetRfTxPower>:

void SX1272SetRfTxPower( int8_t power )
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1272Read( REG_PACONFIG );
 8005a66:	2009      	movs	r0, #9
 8005a68:	f7fe fba2 	bl	80041b0 <SX1272Read>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
    paDac = SX1272Read( REG_PADAC );
 8005a70:	205a      	movs	r0, #90	; 0x5a
 8005a72:	f7fe fb9d 	bl	80041b0 <SX1272Read>
 8005a76:	4603      	mov	r3, r0
 8005a78:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1272GetPaSelect( SX1272.Settings.Channel );
 8005a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a82:	b25c      	sxtb	r4, r3
 8005a84:	4b43      	ldr	r3, [pc, #268]	; (8005b94 <SX1272SetRfTxPower+0x140>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f885 	bl	8005b98 <SX1272GetPaSelect>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	4323      	orrs	r3, r4
 8005a94:	b25b      	sxtb	r3, r3
 8005a96:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	da4e      	bge.n	8005b3e <SX1272SetRfTxPower+0xea>
    {
        if( power > 17 )
 8005aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa4:	2b11      	cmp	r3, #17
 8005aa6:	dd04      	ble.n	8005ab2 <SX1272SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	f043 0307 	orr.w	r3, r3, #7
 8005aae:	73bb      	strb	r3, [r7, #14]
 8005ab0:	e008      	b.n	8005ac4 <SX1272SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8005ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	f043 0304 	orr.w	r3, r3, #4
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b07      	cmp	r3, #7
 8005acc:	d11b      	bne.n	8005b06 <SX1272SetRfTxPower+0xb2>
        {
            if( power < 5 )
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	dc01      	bgt.n	8005ada <SX1272SetRfTxPower+0x86>
            {
                power = 5;
 8005ad6:	2305      	movs	r3, #5
 8005ad8:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 8005ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ade:	2b14      	cmp	r3, #20
 8005ae0:	dd01      	ble.n	8005ae6 <SX1272SetRfTxPower+0x92>
            {
                power = 20;
 8005ae2:	2314      	movs	r3, #20
 8005ae4:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8005ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aea:	f023 030f 	bic.w	r3, r3, #15
 8005aee:	b25a      	sxtb	r2, r3
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	3b05      	subs	r3, #5
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e037      	b.n	8005b76 <SX1272SetRfTxPower+0x122>
        }
        else
        {
            if( power < 2 )
 8005b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	dc01      	bgt.n	8005b12 <SX1272SetRfTxPower+0xbe>
            {
                power = 2;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 8005b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b16:	2b11      	cmp	r3, #17
 8005b18:	dd01      	ble.n	8005b1e <SX1272SetRfTxPower+0xca>
            {
                power = 17;
 8005b1a:	2311      	movs	r3, #17
 8005b1c:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8005b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b22:	f023 030f 	bic.w	r3, r3, #15
 8005b26:	b25a      	sxtb	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	3b02      	subs	r3, #2
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e01b      	b.n	8005b76 <SX1272SetRfTxPower+0x122>
        }
    }
    else
    {
        if( power < -1 )
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	da01      	bge.n	8005b4c <SX1272SetRfTxPower+0xf8>
        {
            power = -1;
 8005b48:	23ff      	movs	r3, #255	; 0xff
 8005b4a:	71fb      	strb	r3, [r7, #7]
        }
        if( power > 14 )
 8005b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b50:	2b0e      	cmp	r3, #14
 8005b52:	dd01      	ble.n	8005b58 <SX1272SetRfTxPower+0x104>
        {
            power = 14;
 8005b54:	230e      	movs	r3, #14
 8005b56:	71fb      	strb	r3, [r7, #7]
        }
        paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8005b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b5c:	f023 030f 	bic.w	r3, r3, #15
 8005b60:	b25a      	sxtb	r2, r3
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	3301      	adds	r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	b25b      	sxtb	r3, r3
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	b25b      	sxtb	r3, r3
 8005b74:	73fb      	strb	r3, [r7, #15]
    }
    SX1272Write( REG_PACONFIG, paConfig );
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	2009      	movs	r0, #9
 8005b7c:	f7fe fb06 	bl	800418c <SX1272Write>
    SX1272Write( REG_PADAC, paDac );
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	4619      	mov	r1, r3
 8005b84:	205a      	movs	r0, #90	; 0x5a
 8005b86:	f7fe fb01 	bl	800418c <SX1272Write>
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd90      	pop	{r4, r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000294 	.word	0x20000294

08005b98 <SX1272GetPaSelect>:

uint8_t SX1272GetPaSelect( uint32_t channel )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <SX1272SetAntSwLowPower>:

void SX1272SetAntSwLowPower( bool status )
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	71fb      	strb	r3, [r7, #7]
  //Ant Switch Controlled by SX1272 IC
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <SX1272SetAntSw>:

void SX1272SetAntSw( uint8_t opMode )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	71fb      	strb	r3, [r7, #7]
    switch( opMode )
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d103      	bne.n	8005bdc <SX1272SetAntSw+0x18>
    {
    case RFLR_OPMODE_TRANSMITTER:
        SX1272.RxTx = 1;
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <SX1272SetAntSw+0x2c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
        break;
 8005bda:	e003      	b.n	8005be4 <SX1272SetAntSw+0x20>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        SX1272.RxTx = 0;
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <SX1272SetAntSw+0x2c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
        break;
 8005be2:	bf00      	nop
    }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000294 	.word	0x20000294

08005bf4 <SX1272CheckRfFrequency>:

bool SX1272CheckRfFrequency( uint32_t frequency )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8005bfc:	2301      	movs	r3, #1
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <PRINT>:
 * Main application entry point.
 */

extern UART_HandleTypeDef huart2;

void PRINT(char *msg){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fa fadf 	bl	80001d8 <strlen>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4803      	ldr	r0, [pc, #12]	; (8005c34 <PRINT+0x28>)
 8005c26:	f7fc fd7a 	bl	800271e <HAL_UART_Transmit>
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200003c4 	.word	0x200003c4

08005c38 <main>:



int main(void) {
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b08d      	sub	sp, #52	; 0x34
 8005c3c:	af0a      	add	r7, sp, #40	; 0x28
	bool isMaster = false;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	HAL_Init();
 8005c42:	f7fb f8c7 	bl	8000dd4 <HAL_Init>

	SystemClock_Config();
 8005c46:	f000 f9f7 	bl	8006038 <SystemClock_Config>

//	DBG_Init();
//	vcom_Init();
	UART_Init();
 8005c4a:	f000 fb67 	bl	800631c <UART_Init>
	USART2_UART_Init();
 8005c4e:	f000 fb9d 	bl	800638c <USART2_UART_Init>

//  SPI_Init(&hspi1);
//  SPI1_Init();

	HW_SPI_Init();
 8005c52:	f7ff fd7d 	bl	8005750 <HW_SPI_Init>

//	PRINTF("HOLA");
//	char *msg = "\n\rEsto se imprime por TeraTerm!\n\r";
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
	PRINT("\n\rHOLA!\n\r");
 8005c56:	48a2      	ldr	r0, [pc, #648]	; (8005ee0 <main+0x2a8>)
 8005c58:	f7ff ffd8 	bl	8005c0c <PRINT>

	Radio.IoInit();
 8005c5c:	4ba1      	ldr	r3, [pc, #644]	; (8005ee4 <main+0x2ac>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4798      	blx	r3

//   Radio initialization
	RadioEvents.TxDone = OnTxDone;
 8005c62:	4ba1      	ldr	r3, [pc, #644]	; (8005ee8 <main+0x2b0>)
 8005c64:	4aa1      	ldr	r2, [pc, #644]	; (8005eec <main+0x2b4>)
 8005c66:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 8005c68:	4b9f      	ldr	r3, [pc, #636]	; (8005ee8 <main+0x2b0>)
 8005c6a:	4aa1      	ldr	r2, [pc, #644]	; (8005ef0 <main+0x2b8>)
 8005c6c:	609a      	str	r2, [r3, #8]
	RadioEvents.TxTimeout = OnTxTimeout;
 8005c6e:	4b9e      	ldr	r3, [pc, #632]	; (8005ee8 <main+0x2b0>)
 8005c70:	4aa0      	ldr	r2, [pc, #640]	; (8005ef4 <main+0x2bc>)
 8005c72:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRxTimeout;
 8005c74:	4b9c      	ldr	r3, [pc, #624]	; (8005ee8 <main+0x2b0>)
 8005c76:	4aa0      	ldr	r2, [pc, #640]	; (8005ef8 <main+0x2c0>)
 8005c78:	60da      	str	r2, [r3, #12]
	RadioEvents.RxError = OnRxError;
 8005c7a:	4b9b      	ldr	r3, [pc, #620]	; (8005ee8 <main+0x2b0>)
 8005c7c:	4a9f      	ldr	r2, [pc, #636]	; (8005efc <main+0x2c4>)
 8005c7e:	611a      	str	r2, [r3, #16]

	Radio.Init(&RadioEvents);
 8005c80:	4b98      	ldr	r3, [pc, #608]	; (8005ee4 <main+0x2ac>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4898      	ldr	r0, [pc, #608]	; (8005ee8 <main+0x2b0>)
 8005c86:	4798      	blx	r3

	Radio.SetChannel( RF_FREQUENCY);
 8005c88:	4b96      	ldr	r3, [pc, #600]	; (8005ee4 <main+0x2ac>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	489c      	ldr	r0, [pc, #624]	; (8005f00 <main+0x2c8>)
 8005c8e:	4798      	blx	r3

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8005c90:	4b94      	ldr	r3, [pc, #592]	; (8005ee4 <main+0x2ac>)
 8005c92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005c94:	4b9b      	ldr	r3, [pc, #620]	; (8005f04 <main+0x2cc>)
 8005c96:	9308      	str	r3, [sp, #32]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9307      	str	r3, [sp, #28]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9306      	str	r3, [sp, #24]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9303      	str	r3, [sp, #12]
 8005cac:	2308      	movs	r3, #8
 8005cae:	9302      	str	r3, [sp, #8]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2200      	movs	r2, #0
 8005cbc:	210e      	movs	r1, #14
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	47a0      	blx	r4
	LORA_SPREADING_FACTOR, LORA_CODINGRATE,
	LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
	true, 0, 0, LORA_IQ_INVERSION_ON, 3000000);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8005cc2:	4b88      	ldr	r3, [pc, #544]	; (8005ee4 <main+0x2ac>)
 8005cc4:	6a1c      	ldr	r4, [r3, #32]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9308      	str	r3, [sp, #32]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9307      	str	r3, [sp, #28]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9306      	str	r3, [sp, #24]
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	9305      	str	r3, [sp, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9304      	str	r3, [sp, #16]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9303      	str	r3, [sp, #12]
 8005ce2:	2305      	movs	r3, #5
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	2300      	movs	r3, #0
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	2301      	movs	r3, #1
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	47a0      	blx	r4
	LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
	LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0,
			LORA_IQ_INVERSION_ON, true);

	Radio.Rx( RX_TIMEOUT_VALUE);
 8005cf8:	4b7a      	ldr	r3, [pc, #488]	; (8005ee4 <main+0x2ac>)
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d00:	4798      	blx	r3

	//HAL_SPI_TransmitReceive(&hspi1, "HOLA", (uint8_t *) BufferSPI, 7, 5000);

	while (1) {
		switch (State) {
 8005d02:	4b81      	ldr	r3, [pc, #516]	; (8005f08 <main+0x2d0>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	f200 80e5 	bhi.w	8005ed8 <main+0x2a0>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <main+0xdc>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d29 	.word	0x08005d29
 8005d18:	08005e61 	.word	0x08005e61
 8005d1c:	08005e61 	.word	0x08005e61
 8005d20:	08005e4f 	.word	0x08005e4f
 8005d24:	08005ec7 	.word	0x08005ec7
		case RX:
			if (isMaster == true) {
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04e      	beq.n	8005dcc <main+0x194>
				if (BufferSize > 0) {
 8005d2e:	4b77      	ldr	r3, [pc, #476]	; (8005f0c <main+0x2d4>)
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8087 	beq.w	8005e46 <main+0x20e>
					if (strncmp((const char*) Buffer, (const char*) PongMsg, 4)
 8005d38:	2204      	movs	r2, #4
 8005d3a:	4975      	ldr	r1, [pc, #468]	; (8005f10 <main+0x2d8>)
 8005d3c:	4875      	ldr	r0, [pc, #468]	; (8005f14 <main+0x2dc>)
 8005d3e:	f000 fc10 	bl	8006562 <strncmp>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d129      	bne.n	8005d9c <main+0x164>
							== 0) {

						// Send the next PING frame
						Buffer[0] = 'P';
 8005d48:	4b72      	ldr	r3, [pc, #456]	; (8005f14 <main+0x2dc>)
 8005d4a:	2250      	movs	r2, #80	; 0x50
 8005d4c:	701a      	strb	r2, [r3, #0]
						Buffer[1] = 'I';
 8005d4e:	4b71      	ldr	r3, [pc, #452]	; (8005f14 <main+0x2dc>)
 8005d50:	2249      	movs	r2, #73	; 0x49
 8005d52:	705a      	strb	r2, [r3, #1]
						Buffer[2] = 'N';
 8005d54:	4b6f      	ldr	r3, [pc, #444]	; (8005f14 <main+0x2dc>)
 8005d56:	224e      	movs	r2, #78	; 0x4e
 8005d58:	709a      	strb	r2, [r3, #2]
						Buffer[3] = 'G';
 8005d5a:	4b6e      	ldr	r3, [pc, #440]	; (8005f14 <main+0x2dc>)
 8005d5c:	2247      	movs	r2, #71	; 0x47
 8005d5e:	70da      	strb	r2, [r3, #3]
						// We fill the buffer with numbers for the payload
						for (i = 4; i < BufferSize; i++) {
 8005d60:	2304      	movs	r3, #4
 8005d62:	71bb      	strb	r3, [r7, #6]
 8005d64:	e008      	b.n	8005d78 <main+0x140>
							Buffer[i] = i - 4;
 8005d66:	79bb      	ldrb	r3, [r7, #6]
 8005d68:	79ba      	ldrb	r2, [r7, #6]
 8005d6a:	3a04      	subs	r2, #4
 8005d6c:	b2d1      	uxtb	r1, r2
 8005d6e:	4a69      	ldr	r2, [pc, #420]	; (8005f14 <main+0x2dc>)
 8005d70:	54d1      	strb	r1, [r2, r3]
						for (i = 4; i < BufferSize; i++) {
 8005d72:	79bb      	ldrb	r3, [r7, #6]
 8005d74:	3301      	adds	r3, #1
 8005d76:	71bb      	strb	r3, [r7, #6]
 8005d78:	79bb      	ldrb	r3, [r7, #6]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	4b63      	ldr	r3, [pc, #396]	; (8005f0c <main+0x2d4>)
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d3f0      	bcc.n	8005d66 <main+0x12e>
						}
						PRINT("...PING\n");
 8005d84:	4864      	ldr	r0, [pc, #400]	; (8005f18 <main+0x2e0>)
 8005d86:	f7ff ff41 	bl	8005c0c <PRINT>

//            DelayMs( 1 );
						Radio.Send(Buffer, BufferSize);
 8005d8a:	4b56      	ldr	r3, [pc, #344]	; (8005ee4 <main+0x2ac>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a5f      	ldr	r2, [pc, #380]	; (8005f0c <main+0x2d4>)
 8005d90:	8812      	ldrh	r2, [r2, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	4611      	mov	r1, r2
 8005d96:	485f      	ldr	r0, [pc, #380]	; (8005f14 <main+0x2dc>)
 8005d98:	4798      	blx	r3
 8005d9a:	e054      	b.n	8005e46 <main+0x20e>
					} else if (strncmp((const char*) Buffer,
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	495f      	ldr	r1, [pc, #380]	; (8005f1c <main+0x2e4>)
 8005da0:	485c      	ldr	r0, [pc, #368]	; (8005f14 <main+0x2dc>)
 8005da2:	f000 fbde 	bl	8006562 <strncmp>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <main+0x184>
							(const char*) PingMsg, 4) == 0) { // A master already exists then become a slave
						isMaster = false;
 8005dac:	2300      	movs	r3, #0
 8005dae:	71fb      	strb	r3, [r7, #7]
						//GpioWrite( &Led2, 1 ); // Set LED off
						Radio.Rx( RX_TIMEOUT_VALUE);
 8005db0:	4b4c      	ldr	r3, [pc, #304]	; (8005ee4 <main+0x2ac>)
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db8:	4798      	blx	r3
 8005dba:	e044      	b.n	8005e46 <main+0x20e>
					} else // valid reception but neither a PING or a PONG message
					{    // Set device as master ans start again
						isMaster = true;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	71fb      	strb	r3, [r7, #7]
						Radio.Rx( RX_TIMEOUT_VALUE);
 8005dc0:	4b48      	ldr	r3, [pc, #288]	; (8005ee4 <main+0x2ac>)
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dc8:	4798      	blx	r3
 8005dca:	e03c      	b.n	8005e46 <main+0x20e>
					}
				}
			} else {
				if (BufferSize > 0) {
 8005dcc:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <main+0x2d4>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d038      	beq.n	8005e46 <main+0x20e>
					if (strncmp((const char*) Buffer, (const char*) PingMsg, 4)
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	4951      	ldr	r1, [pc, #324]	; (8005f1c <main+0x2e4>)
 8005dd8:	484e      	ldr	r0, [pc, #312]	; (8005f14 <main+0x2dc>)
 8005dda:	f000 fbc2 	bl	8006562 <strncmp>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d129      	bne.n	8005e38 <main+0x200>
							== 0) {
						// Send the reply to the PONG string
						Buffer[0] = 'P';
 8005de4:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <main+0x2dc>)
 8005de6:	2250      	movs	r2, #80	; 0x50
 8005de8:	701a      	strb	r2, [r3, #0]
						Buffer[1] = 'O';
 8005dea:	4b4a      	ldr	r3, [pc, #296]	; (8005f14 <main+0x2dc>)
 8005dec:	224f      	movs	r2, #79	; 0x4f
 8005dee:	705a      	strb	r2, [r3, #1]
						Buffer[2] = 'N';
 8005df0:	4b48      	ldr	r3, [pc, #288]	; (8005f14 <main+0x2dc>)
 8005df2:	224e      	movs	r2, #78	; 0x4e
 8005df4:	709a      	strb	r2, [r3, #2]
						Buffer[3] = 'G';
 8005df6:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <main+0x2dc>)
 8005df8:	2247      	movs	r2, #71	; 0x47
 8005dfa:	70da      	strb	r2, [r3, #3]
						// We fill the buffer with numbers for the payload
						for (i = 4; i < BufferSize; i++) {
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	71bb      	strb	r3, [r7, #6]
 8005e00:	e008      	b.n	8005e14 <main+0x1dc>
							Buffer[i] = i - 4;
 8005e02:	79bb      	ldrb	r3, [r7, #6]
 8005e04:	79ba      	ldrb	r2, [r7, #6]
 8005e06:	3a04      	subs	r2, #4
 8005e08:	b2d1      	uxtb	r1, r2
 8005e0a:	4a42      	ldr	r2, [pc, #264]	; (8005f14 <main+0x2dc>)
 8005e0c:	54d1      	strb	r1, [r2, r3]
						for (i = 4; i < BufferSize; i++) {
 8005e0e:	79bb      	ldrb	r3, [r7, #6]
 8005e10:	3301      	adds	r3, #1
 8005e12:	71bb      	strb	r3, [r7, #6]
 8005e14:	79bb      	ldrb	r3, [r7, #6]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <main+0x2d4>)
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f0      	bcc.n	8005e02 <main+0x1ca>
						}
//              DelayMs( 1 );

						Radio.Send(Buffer, BufferSize);
 8005e20:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <main+0x2ac>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	4a39      	ldr	r2, [pc, #228]	; (8005f0c <main+0x2d4>)
 8005e26:	8812      	ldrh	r2, [r2, #0]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4839      	ldr	r0, [pc, #228]	; (8005f14 <main+0x2dc>)
 8005e2e:	4798      	blx	r3
						PRINT("...PONG\n");
 8005e30:	483b      	ldr	r0, [pc, #236]	; (8005f20 <main+0x2e8>)
 8005e32:	f7ff feeb 	bl	8005c0c <PRINT>
 8005e36:	e006      	b.n	8005e46 <main+0x20e>
					} else // valid reception but not a PING as expected
					{    // Set device as master and start again
						isMaster = true;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	71fb      	strb	r3, [r7, #7]
						Radio.Rx( RX_TIMEOUT_VALUE);
 8005e3c:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <main+0x2ac>)
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e44:	4798      	blx	r3
					}
				}
			}
			State = LOWPOWER;
 8005e46:	4b30      	ldr	r3, [pc, #192]	; (8005f08 <main+0x2d0>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
			break;
 8005e4c:	e045      	b.n	8005eda <main+0x2a2>
		case TX:
			// Indicates on a LED that we have sent a PING [Master]
			// Indicates on a LED that we have sent a PONG [Slave]
			//GpioWrite( &Led2, GpioRead( &Led2 ) ^ 1 );
			Radio.Rx( RX_TIMEOUT_VALUE);
 8005e4e:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <main+0x2ac>)
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e56:	4798      	blx	r3
			State = LOWPOWER;
 8005e58:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <main+0x2d0>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
			break;
 8005e5e:	e03c      	b.n	8005eda <main+0x2a2>
		case RX_TIMEOUT:
		case RX_ERROR:
			if (isMaster == true) {
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d026      	beq.n	8005eb4 <main+0x27c>
				// Send the next PING frame
				Buffer[0] = 'P';
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <main+0x2dc>)
 8005e68:	2250      	movs	r2, #80	; 0x50
 8005e6a:	701a      	strb	r2, [r3, #0]
				Buffer[1] = 'I';
 8005e6c:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <main+0x2dc>)
 8005e6e:	2249      	movs	r2, #73	; 0x49
 8005e70:	705a      	strb	r2, [r3, #1]
				Buffer[2] = 'N';
 8005e72:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <main+0x2dc>)
 8005e74:	224e      	movs	r2, #78	; 0x4e
 8005e76:	709a      	strb	r2, [r3, #2]
				Buffer[3] = 'G';
 8005e78:	4b26      	ldr	r3, [pc, #152]	; (8005f14 <main+0x2dc>)
 8005e7a:	2247      	movs	r2, #71	; 0x47
 8005e7c:	70da      	strb	r2, [r3, #3]
				for (i = 4; i < BufferSize; i++) {
 8005e7e:	2304      	movs	r3, #4
 8005e80:	71bb      	strb	r3, [r7, #6]
 8005e82:	e008      	b.n	8005e96 <main+0x25e>
					Buffer[i] = i - 4;
 8005e84:	79bb      	ldrb	r3, [r7, #6]
 8005e86:	79ba      	ldrb	r2, [r7, #6]
 8005e88:	3a04      	subs	r2, #4
 8005e8a:	b2d1      	uxtb	r1, r2
 8005e8c:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <main+0x2dc>)
 8005e8e:	54d1      	strb	r1, [r2, r3]
				for (i = 4; i < BufferSize; i++) {
 8005e90:	79bb      	ldrb	r3, [r7, #6]
 8005e92:	3301      	adds	r3, #1
 8005e94:	71bb      	strb	r3, [r7, #6]
 8005e96:	79bb      	ldrb	r3, [r7, #6]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	4b1c      	ldr	r3, [pc, #112]	; (8005f0c <main+0x2d4>)
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3f0      	bcc.n	8005e84 <main+0x24c>
				}
//        DelayMs( 1 );
				Radio.Send(Buffer, BufferSize);
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <main+0x2ac>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	4a19      	ldr	r2, [pc, #100]	; (8005f0c <main+0x2d4>)
 8005ea8:	8812      	ldrh	r2, [r2, #0]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	4611      	mov	r1, r2
 8005eae:	4819      	ldr	r0, [pc, #100]	; (8005f14 <main+0x2dc>)
 8005eb0:	4798      	blx	r3
 8005eb2:	e004      	b.n	8005ebe <main+0x286>
			} else {
				Radio.Rx( RX_TIMEOUT_VALUE);
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <main+0x2ac>)
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ebc:	4798      	blx	r3
			}
			State = LOWPOWER;
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <main+0x2d0>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
			break;
 8005ec4:	e009      	b.n	8005eda <main+0x2a2>
		case TX_TIMEOUT:
			Radio.Rx( RX_TIMEOUT_VALUE);
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <main+0x2ac>)
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ece:	4798      	blx	r3
			State = LOWPOWER;
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <main+0x2d0>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
			break;
 8005ed6:	e000      	b.n	8005eda <main+0x2a2>
		case LOWPOWER:
		default:
			// Set low power
			break;
 8005ed8:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8005eda:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8005edc:	b662      	cpsie	i
		switch (State) {
 8005ede:	e710      	b.n	8005d02 <main+0xca>
 8005ee0:	0800683c 	.word	0x0800683c
 8005ee4:	080069a0 	.word	0x080069a0
 8005ee8:	20000274 	.word	0x20000274
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f4d 	.word	0x08005f4d
 8005ef4:	08005fc1 	.word	0x08005fc1
 8005ef8:	08005fe9 	.word	0x08005fe9
 8005efc:	08006011 	.word	0x08006011
 8005f00:	33bca100 	.word	0x33bca100
 8005f04:	002dc6c0 	.word	0x002dc6c0
 8005f08:	2000003a 	.word	0x2000003a
 8005f0c:	20000038 	.word	0x20000038
 8005f10:	08006a0c 	.word	0x08006a0c
 8005f14:	20000344 	.word	0x20000344
 8005f18:	08006848 	.word	0x08006848
 8005f1c:	08006a04 	.word	0x08006a04
 8005f20:	08006854 	.word	0x08006854

08005f24 <OnTxDone>:
		ENABLE_IRQ( );

	}
}

void OnTxDone(void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
	Radio.Sleep();
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <OnTxDone+0x1c>)
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	4798      	blx	r3
	State = TX;
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <OnTxDone+0x20>)
 8005f30:	2204      	movs	r2, #4
 8005f32:	701a      	strb	r2, [r3, #0]
	PRINT("OnTxDone\n");
 8005f34:	4804      	ldr	r0, [pc, #16]	; (8005f48 <OnTxDone+0x24>)
 8005f36:	f7ff fe69 	bl	8005c0c <PRINT>
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	080069a0 	.word	0x080069a0
 8005f44:	2000003a 	.word	0x2000003a
 8005f48:	08006860 	.word	0x08006860

08005f4c <OnRxDone>:

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	817b      	strh	r3, [r7, #10]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	813b      	strh	r3, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
	Radio.Sleep();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <OnRxDone+0x58>)
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	4798      	blx	r3
	BufferSize = size;
 8005f6c:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <OnRxDone+0x5c>)
 8005f6e:	897b      	ldrh	r3, [r7, #10]
 8005f70:	8013      	strh	r3, [r2, #0]
	memcpy(Buffer, payload, BufferSize);
 8005f72:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <OnRxDone+0x5c>)
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	68f9      	ldr	r1, [r7, #12]
 8005f7a:	480c      	ldr	r0, [pc, #48]	; (8005fac <OnRxDone+0x60>)
 8005f7c:	f000 fade 	bl	800653c <memcpy>
	RssiValue = rssi;
 8005f80:	893b      	ldrh	r3, [r7, #8]
 8005f82:	b25a      	sxtb	r2, r3
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <OnRxDone+0x64>)
 8005f86:	701a      	strb	r2, [r3, #0]
	SnrValue = snr;
 8005f88:	4a0a      	ldr	r2, [pc, #40]	; (8005fb4 <OnRxDone+0x68>)
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	7013      	strb	r3, [r2, #0]
	State = RX;
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <OnRxDone+0x6c>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]

	PRINT("OnRxDone\n");
 8005f94:	4809      	ldr	r0, [pc, #36]	; (8005fbc <OnRxDone+0x70>)
 8005f96:	f7ff fe39 	bl	8005c0c <PRINT>
	//PRINT("RssiValue=%d dBm, SnrValue=%d\n", rssi, snr);
}
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	080069a0 	.word	0x080069a0
 8005fa8:	20000038 	.word	0x20000038
 8005fac:	20000344 	.word	0x20000344
 8005fb0:	20000270 	.word	0x20000270
 8005fb4:	20000271 	.word	0x20000271
 8005fb8:	2000003a 	.word	0x2000003a
 8005fbc:	0800686c 	.word	0x0800686c

08005fc0 <OnTxTimeout>:

void OnTxTimeout(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
	Radio.Sleep();
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <OnTxTimeout+0x1c>)
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	4798      	blx	r3
	State = TX_TIMEOUT;
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <OnTxTimeout+0x20>)
 8005fcc:	2205      	movs	r2, #5
 8005fce:	701a      	strb	r2, [r3, #0]

	PRINT("OnTxTimeout\n");
 8005fd0:	4804      	ldr	r0, [pc, #16]	; (8005fe4 <OnTxTimeout+0x24>)
 8005fd2:	f7ff fe1b 	bl	8005c0c <PRINT>
}
 8005fd6:	bf00      	nop
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	080069a0 	.word	0x080069a0
 8005fe0:	2000003a 	.word	0x2000003a
 8005fe4:	08006878 	.word	0x08006878

08005fe8 <OnRxTimeout>:

void OnRxTimeout(void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
	Radio.Sleep();
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <OnRxTimeout+0x1c>)
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	4798      	blx	r3
	State = RX_TIMEOUT;
 8005ff2:	4b05      	ldr	r3, [pc, #20]	; (8006008 <OnRxTimeout+0x20>)
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	701a      	strb	r2, [r3, #0]
	PRINT("OnRxTimeout\n");
 8005ff8:	4804      	ldr	r0, [pc, #16]	; (800600c <OnRxTimeout+0x24>)
 8005ffa:	f7ff fe07 	bl	8005c0c <PRINT>
}
 8005ffe:	bf00      	nop
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	080069a0 	.word	0x080069a0
 8006008:	2000003a 	.word	0x2000003a
 800600c:	08006888 	.word	0x08006888

08006010 <OnRxError>:

void OnRxError(void) {
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
	Radio.Sleep();
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <OnRxError+0x1c>)
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	4798      	blx	r3
	State = RX_ERROR;
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <OnRxError+0x20>)
 800601c:	2203      	movs	r2, #3
 800601e:	701a      	strb	r2, [r3, #0]
	PRINT("OnRxError\n");
 8006020:	4804      	ldr	r0, [pc, #16]	; (8006034 <OnRxError+0x24>)
 8006022:	f7ff fdf3 	bl	8005c0c <PRINT>
}
 8006026:	bf00      	nop
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	080069a0 	.word	0x080069a0
 8006030:	2000003a 	.word	0x2000003a
 8006034:	08006898 	.word	0x08006898

08006038 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale2 mode
 *            Flash Latency(WS)              = 2
 * @param  None
 * @retval None
 */
void SystemClock_Config(void) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b094      	sub	sp, #80	; 0x50
 800603c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE()
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <SystemClock_Config+0x9c>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	4a23      	ldr	r2, [pc, #140]	; (80060d4 <SystemClock_Config+0x9c>)
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604c:	6413      	str	r3, [r2, #64]	; 0x40
 800604e:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <SystemClock_Config+0x9c>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
	;

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800605a:	2300      	movs	r3, #0
 800605c:	607b      	str	r3, [r7, #4]
 800605e:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <SystemClock_Config+0xa0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006066:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <SystemClock_Config+0xa0>)
 8006068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <SystemClock_Config+0xa0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	687b      	ldr	r3, [r7, #4]

	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800607a:	2302      	movs	r3, #2
 800607c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800607e:	2301      	movs	r3, #1
 8006080:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8006082:	2310      	movs	r3, #16
 8006084:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006086:	2302      	movs	r3, #2
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800608a:	2300      	movs	r3, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 16;
 800608e:	2310      	movs	r3, #16
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8006092:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006098:	2304      	movs	r3, #4
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800609c:	2307      	movs	r3, #7
 800609e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fb f9b5 	bl	8001414 <HAL_RCC_OscConfig>
		//Error_Handler();
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80060aa:	230f      	movs	r3, #15
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060ae:	2302      	movs	r3, #2
 80060b0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060b2:	2300      	movs	r3, #0
 80060b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80060b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80060bc:	2300      	movs	r3, #0
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80060c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060c4:	2102      	movs	r1, #2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fb fbe6 	bl	8001898 <HAL_RCC_ClockConfig>
		//Error_Handler();
	}
}
 80060cc:	bf00      	nop
 80060ce:	3750      	adds	r7, #80	; 0x50
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000

080060dc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <HAL_MspInit+0x4c>)
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <HAL_MspInit+0x4c>)
 80060ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f0:	6453      	str	r3, [r2, #68]	; 0x44
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <HAL_MspInit+0x4c>)
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060fe:	2300      	movs	r3, #0
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_MspInit+0x4c>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	4a08      	ldr	r2, [pc, #32]	; (8006128 <HAL_MspInit+0x4c>)
 8006108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800610c:	6413      	str	r3, [r2, #64]	; 0x40
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_MspInit+0x4c>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	683b      	ldr	r3, [r7, #0]

}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800

0800612c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006134:	f107 0314 	add.w	r3, r7, #20
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	60da      	str	r2, [r3, #12]
 8006142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <HAL_SPI_MspInit+0xa8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d13d      	bne.n	80061ca <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <HAL_SPI_MspInit+0xac>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <HAL_SPI_MspInit+0xac>)
 8006158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800615c:	6413      	str	r3, [r2, #64]	; 0x40
 800615e:	4b1e      	ldr	r3, [pc, #120]	; (80061d8 <HAL_SPI_MspInit+0xac>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <HAL_SPI_MspInit+0xac>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <HAL_SPI_MspInit+0xac>)
 8006174:	f043 0302 	orr.w	r3, r3, #2
 8006178:	6313      	str	r3, [r2, #48]	; 0x30
 800617a:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <HAL_SPI_MspInit+0xac>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8006186:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800618a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800618c:	2302      	movs	r3, #2
 800618e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006194:	2302      	movs	r3, #2
 8006196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006198:	2305      	movs	r3, #5
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800619c:	f107 0314 	add.w	r3, r7, #20
 80061a0:	4619      	mov	r1, r3
 80061a2:	480e      	ldr	r0, [pc, #56]	; (80061dc <HAL_SPI_MspInit+0xb0>)
 80061a4:	f7fa ff9a 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80061a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ae:	2302      	movs	r3, #2
 80061b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80061b2:	2302      	movs	r3, #2
 80061b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061b6:	2302      	movs	r3, #2
 80061b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061ba:	2305      	movs	r3, #5
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061be:	f107 0314 	add.w	r3, r7, #20
 80061c2:	4619      	mov	r1, r3
 80061c4:	4805      	ldr	r0, [pc, #20]	; (80061dc <HAL_SPI_MspInit+0xb0>)
 80061c6:	f7fa ff89 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80061ca:	bf00      	nop
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40003800 	.word	0x40003800
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40020400 	.word	0x40020400

080061e0 <MSP_GetIRQn>:
//  }
//
//}

IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	80fb      	strh	r3, [r7, #6]
  switch( GPIO_Pin )
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d025      	beq.n	800623c <MSP_GetIRQn+0x5c>
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	dc0b      	bgt.n	800620c <MSP_GetIRQn+0x2c>
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d01b      	beq.n	8006230 <MSP_GetIRQn+0x50>
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	dc02      	bgt.n	8006202 <MSP_GetIRQn+0x22>
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d015      	beq.n	800622c <MSP_GetIRQn+0x4c>
 8006200:	e020      	b.n	8006244 <MSP_GetIRQn+0x64>
 8006202:	2b04      	cmp	r3, #4
 8006204:	d016      	beq.n	8006234 <MSP_GetIRQn+0x54>
 8006206:	2b08      	cmp	r3, #8
 8006208:	d016      	beq.n	8006238 <MSP_GetIRQn+0x58>
 800620a:	e01b      	b.n	8006244 <MSP_GetIRQn+0x64>
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	d017      	beq.n	8006240 <MSP_GetIRQn+0x60>
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	dc04      	bgt.n	800621e <MSP_GetIRQn+0x3e>
 8006214:	2b20      	cmp	r3, #32
 8006216:	d013      	beq.n	8006240 <MSP_GetIRQn+0x60>
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d011      	beq.n	8006240 <MSP_GetIRQn+0x60>
 800621c:	e012      	b.n	8006244 <MSP_GetIRQn+0x64>
 800621e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006222:	d00d      	beq.n	8006240 <MSP_GetIRQn+0x60>
 8006224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006228:	d00a      	beq.n	8006240 <MSP_GetIRQn+0x60>
 800622a:	e00b      	b.n	8006244 <MSP_GetIRQn+0x64>
  {
    case GPIO_PIN_0:  return EXTI0_IRQn;
 800622c:	2306      	movs	r3, #6
 800622e:	e00a      	b.n	8006246 <MSP_GetIRQn+0x66>
    case GPIO_PIN_1:  return EXTI1_IRQn;
 8006230:	2307      	movs	r3, #7
 8006232:	e008      	b.n	8006246 <MSP_GetIRQn+0x66>
    case GPIO_PIN_2:  return EXTI2_IRQn;
 8006234:	2308      	movs	r3, #8
 8006236:	e006      	b.n	8006246 <MSP_GetIRQn+0x66>
    case GPIO_PIN_3:  return EXTI3_IRQn;
 8006238:	2309      	movs	r3, #9
 800623a:	e004      	b.n	8006246 <MSP_GetIRQn+0x66>
    case GPIO_PIN_4:  return EXTI4_IRQn;
 800623c:	230a      	movs	r3, #10
 800623e:	e002      	b.n	8006246 <MSP_GetIRQn+0x66>
    case GPIO_PIN_5:
    case GPIO_PIN_6:
    case GPIO_PIN_7:
    case GPIO_PIN_8:
    case GPIO_PIN_9:  return EXTI9_5_IRQn;
 8006240:	2317      	movs	r3, #23
 8006242:	e000      	b.n	8006246 <MSP_GetIRQn+0x66>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
	default: return EXTI15_10_IRQn;
 8006244:	2328      	movs	r3, #40	; 0x28
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006252:	b480      	push	{r7}
 8006254:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006264:	e7fe      	b.n	8006264 <HardFault_Handler+0x4>

08006266 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800626a:	e7fe      	b.n	800626a <MemManage_Handler+0x4>

0800626c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006270:	e7fe      	b.n	8006270 <BusFault_Handler+0x4>

08006272 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006272:	b480      	push	{r7}
 8006274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006276:	e7fe      	b.n	8006276 <UsageFault_Handler+0x4>

08006278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800627c:	bf00      	nop
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006286:	b480      	push	{r7}
 8006288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800628a:	bf00      	nop
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062a6:	f7fa fde7 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <SystemInit+0x60>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	4a15      	ldr	r2, [pc, #84]	; (8006310 <SystemInit+0x60>)
 80062bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <SystemInit+0x64>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a12      	ldr	r2, [pc, #72]	; (8006314 <SystemInit+0x64>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <SystemInit+0x64>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80062d6:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <SystemInit+0x64>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <SystemInit+0x64>)
 80062dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80062e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <SystemInit+0x64>)
 80062e8:	4a0b      	ldr	r2, [pc, #44]	; (8006318 <SystemInit+0x68>)
 80062ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <SystemInit+0x64>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <SystemInit+0x64>)
 80062f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <SystemInit+0x64>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <SystemInit+0x60>)
 8006300:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006304:	609a      	str	r2, [r3, #8]
#endif
}
 8006306:	bf00      	nop
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	e000ed00 	.word	0xe000ed00
 8006314:	40023800 	.word	0x40023800
 8006318:	24003010 	.word	0x24003010

0800631c <UART_Init>:
#include "includes.h"

UART_HandleTypeDef huart2;

void UART_Init()
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8006322:	2300      	movs	r3, #0
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <UART_Init+0x68>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <UART_Init+0x68>)
 800632c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006330:	6413      	str	r3, [r2, #64]	; 0x40
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <UART_Init+0x68>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800633e:	2303      	movs	r3, #3
 8006340:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006342:	2302      	movs	r3, #2
 8006344:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800634a:	2303      	movs	r3, #3
 800634c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800634e:	2307      	movs	r3, #7
 8006350:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	4619      	mov	r1, r3
 8006356:	480c      	ldr	r0, [pc, #48]	; (8006388 <UART_Init+0x6c>)
 8006358:	f7fa fec0 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800635c:	230c      	movs	r3, #12
 800635e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006360:	2302      	movs	r3, #2
 8006362:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006364:	2301      	movs	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006368:	2303      	movs	r3, #3
 800636a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800636c:	2307      	movs	r3, #7
 800636e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	4619      	mov	r1, r3
 8006374:	4804      	ldr	r0, [pc, #16]	; (8006388 <UART_Init+0x6c>)
 8006376:	f7fa feb1 	bl	80010dc <HAL_GPIO_Init>
}
 800637a:	bf00      	nop
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40023800 	.word	0x40023800
 8006388:	40020000 	.word	0x40020000

0800638c <USART2_UART_Init>:
  }
}

/* USART2 init function */
void USART2_UART_Init(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006390:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <USART2_UART_Init+0x44>)
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <USART2_UART_Init+0x48>)
 8006394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006396:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <USART2_UART_Init+0x44>)
 8006398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800639c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <USART2_UART_Init+0x44>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <USART2_UART_Init+0x44>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <USART2_UART_Init+0x44>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <USART2_UART_Init+0x44>)
 80063b2:	220c      	movs	r2, #12
 80063b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <USART2_UART_Init+0x44>)
 80063b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80063bc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <USART2_UART_Init+0x44>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 80063c4:	4802      	ldr	r0, [pc, #8]	; (80063d0 <USART2_UART_Init+0x44>)
 80063c6:	f7fc f95d 	bl	8002684 <HAL_UART_Init>
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200003c4 	.word	0x200003c4
 80063d4:	40004400 	.word	0x40004400

080063d8 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE();
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	4b08      	ldr	r3, [pc, #32]	; (8006408 <HAL_UART_MspInit+0x30>)
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	4a07      	ldr	r2, [pc, #28]	; (8006408 <HAL_UART_MspInit+0x30>)
 80063ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ee:	6413      	str	r3, [r2, #64]	; 0x40
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_UART_MspInit+0x30>)
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  vcom_IoInit( );
 80063fc:	f000 f806 	bl	800640c <vcom_IoInit>
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40023800 	.word	0x40023800

0800640c <vcom_IoInit>:

void vcom_IoInit(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8006412:	f107 030c 	add.w	r3, r7, #12
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	609a      	str	r2, [r3, #8]
 800641e:	60da      	str	r2, [r3, #12]
 8006420:	611a      	str	r2, [r3, #16]
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <vcom_IoInit+0x8c>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	4a1b      	ldr	r2, [pc, #108]	; (8006498 <vcom_IoInit+0x8c>)
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	6313      	str	r3, [r2, #48]	; 0x30
 8006432:	4b19      	ldr	r3, [pc, #100]	; (8006498 <vcom_IoInit+0x8c>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	4b15      	ldr	r3, [pc, #84]	; (8006498 <vcom_IoInit+0x8c>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	4a14      	ldr	r2, [pc, #80]	; (8006498 <vcom_IoInit+0x8c>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	6313      	str	r3, [r2, #48]	; 0x30
 800644e:	4b12      	ldr	r3, [pc, #72]	; (8006498 <vcom_IoInit+0x8c>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 800645a:	2304      	movs	r3, #4
 800645c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800645e:	2302      	movs	r3, #2
 8006460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006466:	2303      	movs	r3, #3
 8006468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 800646a:	2307      	movs	r3, #7
 800646c:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800646e:	f107 030c 	add.w	r3, r7, #12
 8006472:	4619      	mov	r1, r3
 8006474:	4809      	ldr	r0, [pc, #36]	; (800649c <vcom_IoInit+0x90>)
 8006476:	f7fa fe31 	bl	80010dc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 800647a:	2308      	movs	r3, #8
 800647c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 800647e:	2307      	movs	r3, #7
 8006480:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 8006482:	f107 030c 	add.w	r3, r7, #12
 8006486:	4619      	mov	r1, r3
 8006488:	4804      	ldr	r0, [pc, #16]	; (800649c <vcom_IoInit+0x90>)
 800648a:	f7fa fe27 	bl	80010dc <HAL_GPIO_Init>
}
 800648e:	bf00      	nop
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800
 800649c:	40020000 	.word	0x40020000

080064a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80064a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064a6:	e003      	b.n	80064b0 <LoopCopyDataInit>

080064a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064ae:	3104      	adds	r1, #4

080064b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064b0:	480b      	ldr	r0, [pc, #44]	; (80064e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80064b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80064b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80064b8:	d3f6      	bcc.n	80064a8 <CopyDataInit>
  ldr  r2, =_sbss
 80064ba:	4a0b      	ldr	r2, [pc, #44]	; (80064e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80064bc:	e002      	b.n	80064c4 <LoopFillZerobss>

080064be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80064be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80064c0:	f842 3b04 	str.w	r3, [r2], #4

080064c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80064c4:	4b09      	ldr	r3, [pc, #36]	; (80064ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80064c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80064c8:	d3f9      	bcc.n	80064be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064ca:	f7ff fef1 	bl	80062b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ce:	f000 f811 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064d2:	f7ff fbb1 	bl	8005c38 <main>
  bx  lr    
 80064d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80064d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80064dc:	08006a3c 	.word	0x08006a3c
  ldr  r0, =_sdata
 80064e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80064e4:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 80064e8:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 80064ec:	20000404 	.word	0x20000404

080064f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064f0:	e7fe      	b.n	80064f0 <ADC_IRQHandler>
	...

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4e0d      	ldr	r6, [pc, #52]	; (800652c <__libc_init_array+0x38>)
 80064f8:	4c0d      	ldr	r4, [pc, #52]	; (8006530 <__libc_init_array+0x3c>)
 80064fa:	1ba4      	subs	r4, r4, r6
 80064fc:	10a4      	asrs	r4, r4, #2
 80064fe:	2500      	movs	r5, #0
 8006500:	42a5      	cmp	r5, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	4e0b      	ldr	r6, [pc, #44]	; (8006534 <__libc_init_array+0x40>)
 8006506:	4c0c      	ldr	r4, [pc, #48]	; (8006538 <__libc_init_array+0x44>)
 8006508:	f000 f98c 	bl	8006824 <_init>
 800650c:	1ba4      	subs	r4, r4, r6
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	2500      	movs	r5, #0
 8006512:	42a5      	cmp	r5, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800651c:	4798      	blx	r3
 800651e:	3501      	adds	r5, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006526:	4798      	blx	r3
 8006528:	3501      	adds	r5, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	08006a34 	.word	0x08006a34
 8006530:	08006a34 	.word	0x08006a34
 8006534:	08006a34 	.word	0x08006a34
 8006538:	08006a38 	.word	0x08006a38

0800653c <memcpy>:
 800653c:	b510      	push	{r4, lr}
 800653e:	1e43      	subs	r3, r0, #1
 8006540:	440a      	add	r2, r1
 8006542:	4291      	cmp	r1, r2
 8006544:	d100      	bne.n	8006548 <memcpy+0xc>
 8006546:	bd10      	pop	{r4, pc}
 8006548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800654c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006550:	e7f7      	b.n	8006542 <memcpy+0x6>

08006552 <memset>:
 8006552:	4402      	add	r2, r0
 8006554:	4603      	mov	r3, r0
 8006556:	4293      	cmp	r3, r2
 8006558:	d100      	bne.n	800655c <memset+0xa>
 800655a:	4770      	bx	lr
 800655c:	f803 1b01 	strb.w	r1, [r3], #1
 8006560:	e7f9      	b.n	8006556 <memset+0x4>

08006562 <strncmp>:
 8006562:	b510      	push	{r4, lr}
 8006564:	b16a      	cbz	r2, 8006582 <strncmp+0x20>
 8006566:	3901      	subs	r1, #1
 8006568:	1884      	adds	r4, r0, r2
 800656a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800656e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006572:	4293      	cmp	r3, r2
 8006574:	d103      	bne.n	800657e <strncmp+0x1c>
 8006576:	42a0      	cmp	r0, r4
 8006578:	d001      	beq.n	800657e <strncmp+0x1c>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f5      	bne.n	800656a <strncmp+0x8>
 800657e:	1a98      	subs	r0, r3, r2
 8006580:	bd10      	pop	{r4, pc}
 8006582:	4610      	mov	r0, r2
 8006584:	e7fc      	b.n	8006580 <strncmp+0x1e>
	...

08006588 <ceil>:
 8006588:	ec51 0b10 	vmov	r0, r1, d0
 800658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006590:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006594:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006598:	2e13      	cmp	r6, #19
 800659a:	460c      	mov	r4, r1
 800659c:	ee10 5a10 	vmov	r5, s0
 80065a0:	4680      	mov	r8, r0
 80065a2:	dc30      	bgt.n	8006606 <ceil+0x7e>
 80065a4:	2e00      	cmp	r6, #0
 80065a6:	da12      	bge.n	80065ce <ceil+0x46>
 80065a8:	a333      	add	r3, pc, #204	; (adr r3, 8006678 <ceil+0xf0>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7f9 fe21 	bl	80001f4 <__adddf3>
 80065b2:	2200      	movs	r2, #0
 80065b4:	2300      	movs	r3, #0
 80065b6:	f7fa fa63 	bl	8000a80 <__aeabi_dcmpgt>
 80065ba:	b128      	cbz	r0, 80065c8 <ceil+0x40>
 80065bc:	2c00      	cmp	r4, #0
 80065be:	db55      	blt.n	800666c <ceil+0xe4>
 80065c0:	432c      	orrs	r4, r5
 80065c2:	d057      	beq.n	8006674 <ceil+0xec>
 80065c4:	4c2e      	ldr	r4, [pc, #184]	; (8006680 <ceil+0xf8>)
 80065c6:	2500      	movs	r5, #0
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	e025      	b.n	800661a <ceil+0x92>
 80065ce:	4f2d      	ldr	r7, [pc, #180]	; (8006684 <ceil+0xfc>)
 80065d0:	4137      	asrs	r7, r6
 80065d2:	ea01 0307 	and.w	r3, r1, r7
 80065d6:	4303      	orrs	r3, r0
 80065d8:	d01f      	beq.n	800661a <ceil+0x92>
 80065da:	a327      	add	r3, pc, #156	; (adr r3, 8006678 <ceil+0xf0>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f7f9 fe08 	bl	80001f4 <__adddf3>
 80065e4:	2200      	movs	r2, #0
 80065e6:	2300      	movs	r3, #0
 80065e8:	f7fa fa4a 	bl	8000a80 <__aeabi_dcmpgt>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0eb      	beq.n	80065c8 <ceil+0x40>
 80065f0:	2c00      	cmp	r4, #0
 80065f2:	bfc2      	ittt	gt
 80065f4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80065f8:	fa43 f606 	asrgt.w	r6, r3, r6
 80065fc:	19a4      	addgt	r4, r4, r6
 80065fe:	ea24 0407 	bic.w	r4, r4, r7
 8006602:	2500      	movs	r5, #0
 8006604:	e7e0      	b.n	80065c8 <ceil+0x40>
 8006606:	2e33      	cmp	r6, #51	; 0x33
 8006608:	dd0b      	ble.n	8006622 <ceil+0x9a>
 800660a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800660e:	d104      	bne.n	800661a <ceil+0x92>
 8006610:	ee10 2a10 	vmov	r2, s0
 8006614:	460b      	mov	r3, r1
 8006616:	f7f9 fded 	bl	80001f4 <__adddf3>
 800661a:	ec41 0b10 	vmov	d0, r0, r1
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006622:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	fa23 f707 	lsr.w	r7, r3, r7
 800662e:	4207      	tst	r7, r0
 8006630:	d0f3      	beq.n	800661a <ceil+0x92>
 8006632:	a311      	add	r3, pc, #68	; (adr r3, 8006678 <ceil+0xf0>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 fddc 	bl	80001f4 <__adddf3>
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	f7fa fa1e 	bl	8000a80 <__aeabi_dcmpgt>
 8006644:	2800      	cmp	r0, #0
 8006646:	d0bf      	beq.n	80065c8 <ceil+0x40>
 8006648:	2c00      	cmp	r4, #0
 800664a:	dd02      	ble.n	8006652 <ceil+0xca>
 800664c:	2e14      	cmp	r6, #20
 800664e:	d103      	bne.n	8006658 <ceil+0xd0>
 8006650:	3401      	adds	r4, #1
 8006652:	ea25 0507 	bic.w	r5, r5, r7
 8006656:	e7b7      	b.n	80065c8 <ceil+0x40>
 8006658:	2301      	movs	r3, #1
 800665a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800665e:	fa03 f606 	lsl.w	r6, r3, r6
 8006662:	4435      	add	r5, r6
 8006664:	4545      	cmp	r5, r8
 8006666:	bf38      	it	cc
 8006668:	18e4      	addcc	r4, r4, r3
 800666a:	e7f2      	b.n	8006652 <ceil+0xca>
 800666c:	2500      	movs	r5, #0
 800666e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006672:	e7a9      	b.n	80065c8 <ceil+0x40>
 8006674:	4625      	mov	r5, r4
 8006676:	e7a7      	b.n	80065c8 <ceil+0x40>
 8006678:	8800759c 	.word	0x8800759c
 800667c:	7e37e43c 	.word	0x7e37e43c
 8006680:	3ff00000 	.word	0x3ff00000
 8006684:	000fffff 	.word	0x000fffff

08006688 <floor>:
 8006688:	ec51 0b10 	vmov	r0, r1, d0
 800668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006694:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006698:	2e13      	cmp	r6, #19
 800669a:	460c      	mov	r4, r1
 800669c:	ee10 5a10 	vmov	r5, s0
 80066a0:	4680      	mov	r8, r0
 80066a2:	dc34      	bgt.n	800670e <floor+0x86>
 80066a4:	2e00      	cmp	r6, #0
 80066a6:	da16      	bge.n	80066d6 <floor+0x4e>
 80066a8:	a335      	add	r3, pc, #212	; (adr r3, 8006780 <floor+0xf8>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 fda1 	bl	80001f4 <__adddf3>
 80066b2:	2200      	movs	r2, #0
 80066b4:	2300      	movs	r3, #0
 80066b6:	f7fa f9e3 	bl	8000a80 <__aeabi_dcmpgt>
 80066ba:	b148      	cbz	r0, 80066d0 <floor+0x48>
 80066bc:	2c00      	cmp	r4, #0
 80066be:	da59      	bge.n	8006774 <floor+0xec>
 80066c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80066c4:	4a30      	ldr	r2, [pc, #192]	; (8006788 <floor+0x100>)
 80066c6:	432b      	orrs	r3, r5
 80066c8:	2500      	movs	r5, #0
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	bf18      	it	ne
 80066ce:	4614      	movne	r4, r2
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	e025      	b.n	8006722 <floor+0x9a>
 80066d6:	4f2d      	ldr	r7, [pc, #180]	; (800678c <floor+0x104>)
 80066d8:	4137      	asrs	r7, r6
 80066da:	ea01 0307 	and.w	r3, r1, r7
 80066de:	4303      	orrs	r3, r0
 80066e0:	d01f      	beq.n	8006722 <floor+0x9a>
 80066e2:	a327      	add	r3, pc, #156	; (adr r3, 8006780 <floor+0xf8>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 fd84 	bl	80001f4 <__adddf3>
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	f7fa f9c6 	bl	8000a80 <__aeabi_dcmpgt>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d0eb      	beq.n	80066d0 <floor+0x48>
 80066f8:	2c00      	cmp	r4, #0
 80066fa:	bfbe      	ittt	lt
 80066fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006700:	fa43 f606 	asrlt.w	r6, r3, r6
 8006704:	19a4      	addlt	r4, r4, r6
 8006706:	ea24 0407 	bic.w	r4, r4, r7
 800670a:	2500      	movs	r5, #0
 800670c:	e7e0      	b.n	80066d0 <floor+0x48>
 800670e:	2e33      	cmp	r6, #51	; 0x33
 8006710:	dd0b      	ble.n	800672a <floor+0xa2>
 8006712:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006716:	d104      	bne.n	8006722 <floor+0x9a>
 8006718:	ee10 2a10 	vmov	r2, s0
 800671c:	460b      	mov	r3, r1
 800671e:	f7f9 fd69 	bl	80001f4 <__adddf3>
 8006722:	ec41 0b10 	vmov	d0, r0, r1
 8006726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800672a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	fa23 f707 	lsr.w	r7, r3, r7
 8006736:	4207      	tst	r7, r0
 8006738:	d0f3      	beq.n	8006722 <floor+0x9a>
 800673a:	a311      	add	r3, pc, #68	; (adr r3, 8006780 <floor+0xf8>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 fd58 	bl	80001f4 <__adddf3>
 8006744:	2200      	movs	r2, #0
 8006746:	2300      	movs	r3, #0
 8006748:	f7fa f99a 	bl	8000a80 <__aeabi_dcmpgt>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0bf      	beq.n	80066d0 <floor+0x48>
 8006750:	2c00      	cmp	r4, #0
 8006752:	da02      	bge.n	800675a <floor+0xd2>
 8006754:	2e14      	cmp	r6, #20
 8006756:	d103      	bne.n	8006760 <floor+0xd8>
 8006758:	3401      	adds	r4, #1
 800675a:	ea25 0507 	bic.w	r5, r5, r7
 800675e:	e7b7      	b.n	80066d0 <floor+0x48>
 8006760:	2301      	movs	r3, #1
 8006762:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006766:	fa03 f606 	lsl.w	r6, r3, r6
 800676a:	4435      	add	r5, r6
 800676c:	4545      	cmp	r5, r8
 800676e:	bf38      	it	cc
 8006770:	18e4      	addcc	r4, r4, r3
 8006772:	e7f2      	b.n	800675a <floor+0xd2>
 8006774:	2500      	movs	r5, #0
 8006776:	462c      	mov	r4, r5
 8006778:	e7aa      	b.n	80066d0 <floor+0x48>
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	8800759c 	.word	0x8800759c
 8006784:	7e37e43c 	.word	0x7e37e43c
 8006788:	bff00000 	.word	0xbff00000
 800678c:	000fffff 	.word	0x000fffff

08006790 <round>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	ec57 6b10 	vmov	r6, r7, d0
 8006796:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800679a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800679e:	2c13      	cmp	r4, #19
 80067a0:	463b      	mov	r3, r7
 80067a2:	463d      	mov	r5, r7
 80067a4:	dc17      	bgt.n	80067d6 <round+0x46>
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	da09      	bge.n	80067be <round+0x2e>
 80067aa:	3401      	adds	r4, #1
 80067ac:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80067b0:	d103      	bne.n	80067ba <round+0x2a>
 80067b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80067b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80067ba:	2100      	movs	r1, #0
 80067bc:	e02c      	b.n	8006818 <round+0x88>
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <round+0x90>)
 80067c0:	4122      	asrs	r2, r4
 80067c2:	4217      	tst	r7, r2
 80067c4:	d100      	bne.n	80067c8 <round+0x38>
 80067c6:	b19e      	cbz	r6, 80067f0 <round+0x60>
 80067c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80067cc:	4123      	asrs	r3, r4
 80067ce:	442b      	add	r3, r5
 80067d0:	ea23 0302 	bic.w	r3, r3, r2
 80067d4:	e7f1      	b.n	80067ba <round+0x2a>
 80067d6:	2c33      	cmp	r4, #51	; 0x33
 80067d8:	dd0d      	ble.n	80067f6 <round+0x66>
 80067da:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80067de:	d107      	bne.n	80067f0 <round+0x60>
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	ee10 2a10 	vmov	r2, s0
 80067e8:	f7f9 fd04 	bl	80001f4 <__adddf3>
 80067ec:	4606      	mov	r6, r0
 80067ee:	460f      	mov	r7, r1
 80067f0:	ec47 6b10 	vmov	d0, r6, r7
 80067f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	40d0      	lsrs	r0, r2
 8006800:	4206      	tst	r6, r0
 8006802:	d0f5      	beq.n	80067f0 <round+0x60>
 8006804:	2201      	movs	r2, #1
 8006806:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800680a:	fa02 f404 	lsl.w	r4, r2, r4
 800680e:	1931      	adds	r1, r6, r4
 8006810:	bf28      	it	cs
 8006812:	189b      	addcs	r3, r3, r2
 8006814:	ea21 0100 	bic.w	r1, r1, r0
 8006818:	461f      	mov	r7, r3
 800681a:	460e      	mov	r6, r1
 800681c:	e7e8      	b.n	80067f0 <round+0x60>
 800681e:	bf00      	nop
 8006820:	000fffff 	.word	0x000fffff

08006824 <_init>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr

08006830 <_fini>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	bf00      	nop
 8006834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006836:	bc08      	pop	{r3}
 8006838:	469e      	mov	lr, r3
 800683a:	4770      	bx	lr
