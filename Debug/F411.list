
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002620  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e0  080027e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  080027fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080027fc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a023  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e1  00000000  00000000  0002a05f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002b840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014cef  00000000  00000000  0002c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d2b  00000000  00000000  00041497  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000850c1  00000000  00000000  000481c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  000cd300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800279c 	.word	0x0800279c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800279c 	.word	0x0800279c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <HAL_Init+0x40>)
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_Init+0x40>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_Init+0x40>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f90d 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f808 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f001 ff96 	bl	8002448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f917 	bl	800077a <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295
 8000564:	f000 f8ed 	bl	8000742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000008 	.word	0x20000008
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000028 	.word	0x20000028

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	; (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	; (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f7ff ff8e 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff47 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000754:	f7ff ff5c 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff8e 	bl	8000680 <NVIC_EncodePriority>
 8000764:	4602      	mov	r2, r0
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff5d 	bl	800062c <__NVIC_SetPriority>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffb0 	bl	80006e8 <SysTick_Config>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	e159      	b.n	8000a64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b0:	2201      	movs	r2, #1
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	f040 8148 	bne.w	8000a5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d003      	beq.n	80007de <HAL_GPIO_Init+0x4a>
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b12      	cmp	r3, #18
 80007dc:	d123      	bne.n	8000826 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	08da      	lsrs	r2, r3, #3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3208      	adds	r2, #8
 80007e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	220f      	movs	r2, #15
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	4013      	ands	r3, r2
 8000800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	691a      	ldr	r2, [r3, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	f003 0307 	and.w	r3, r3, #7
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4313      	orrs	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	08da      	lsrs	r2, r3, #3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3208      	adds	r2, #8
 8000820:	69b9      	ldr	r1, [r7, #24]
 8000822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	2203      	movs	r2, #3
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	4013      	ands	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f003 0203 	and.w	r2, r3, #3
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4313      	orrs	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d00b      	beq.n	800087a <HAL_GPIO_Init+0xe6>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d007      	beq.n	800087a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	2b11      	cmp	r3, #17
 8000870:	d003      	beq.n	800087a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b12      	cmp	r3, #18
 8000878:	d130      	bne.n	80008dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2203      	movs	r2, #3
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4013      	ands	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	091b      	lsrs	r3, r3, #4
 80008c6:	f003 0201 	and.w	r2, r3, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	2b00      	cmp	r3, #0
 8000916:	f000 80a2 	beq.w	8000a5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <HAL_GPIO_Init+0x2e4>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a55      	ldr	r2, [pc, #340]	; (8000a78 <HAL_GPIO_Init+0x2e4>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <HAL_GPIO_Init+0x2e4>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000936:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <HAL_GPIO_Init+0x2e8>)
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	3302      	adds	r3, #2
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	220f      	movs	r2, #15
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a48      	ldr	r2, [pc, #288]	; (8000a80 <HAL_GPIO_Init+0x2ec>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0x202>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a47      	ldr	r2, [pc, #284]	; (8000a84 <HAL_GPIO_Init+0x2f0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0x1fe>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a46      	ldr	r2, [pc, #280]	; (8000a88 <HAL_GPIO_Init+0x2f4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00d      	beq.n	800098e <HAL_GPIO_Init+0x1fa>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a45      	ldr	r2, [pc, #276]	; (8000a8c <HAL_GPIO_Init+0x2f8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0x1f6>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <HAL_GPIO_Init+0x2fc>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_GPIO_Init+0x1f2>
 8000982:	2304      	movs	r3, #4
 8000984:	e008      	b.n	8000998 <HAL_GPIO_Init+0x204>
 8000986:	2307      	movs	r3, #7
 8000988:	e006      	b.n	8000998 <HAL_GPIO_Init+0x204>
 800098a:	2303      	movs	r3, #3
 800098c:	e004      	b.n	8000998 <HAL_GPIO_Init+0x204>
 800098e:	2302      	movs	r3, #2
 8000990:	e002      	b.n	8000998 <HAL_GPIO_Init+0x204>
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <HAL_GPIO_Init+0x204>
 8000996:	2300      	movs	r3, #0
 8000998:	69fa      	ldr	r2, [r7, #28]
 800099a:	f002 0203 	and.w	r2, r2, #3
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	4093      	lsls	r3, r2
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009a8:	4934      	ldr	r1, [pc, #208]	; (8000a7c <HAL_GPIO_Init+0x2e8>)
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <HAL_GPIO_Init+0x300>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009da:	4a2e      	ldr	r2, [pc, #184]	; (8000a94 <HAL_GPIO_Init+0x300>)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <HAL_GPIO_Init+0x300>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <HAL_GPIO_Init+0x300>)
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <HAL_GPIO_Init+0x300>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a2e:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_GPIO_Init+0x300>)
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_GPIO_Init+0x300>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_GPIO_Init+0x300>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3301      	adds	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	f67f aea2 	bls.w	80007b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3724      	adds	r7, #36	; 0x24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40013c00 	.word	0x40013c00

08000a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e22d      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d075      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ab6:	4ba3      	ldr	r3, [pc, #652]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d00c      	beq.n	8000adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ac2:	4ba0      	ldr	r3, [pc, #640]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d112      	bne.n	8000af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ace:	4b9d      	ldr	r3, [pc, #628]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ada:	d10b      	bne.n	8000af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000adc:	4b99      	ldr	r3, [pc, #612]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d05b      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x108>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d157      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e208      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000afc:	d106      	bne.n	8000b0c <HAL_RCC_OscConfig+0x74>
 8000afe:	4b91      	ldr	r3, [pc, #580]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a90      	ldr	r2, [pc, #576]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e01d      	b.n	8000b48 <HAL_RCC_OscConfig+0xb0>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b14:	d10c      	bne.n	8000b30 <HAL_RCC_OscConfig+0x98>
 8000b16:	4b8b      	ldr	r3, [pc, #556]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a8a      	ldr	r2, [pc, #552]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	4b88      	ldr	r3, [pc, #544]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a87      	ldr	r2, [pc, #540]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	e00b      	b.n	8000b48 <HAL_RCC_OscConfig+0xb0>
 8000b30:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a83      	ldr	r2, [pc, #524]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b81      	ldr	r3, [pc, #516]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a80      	ldr	r2, [pc, #512]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d013      	beq.n	8000b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b50:	f7ff fd2e 	bl	80005b0 <HAL_GetTick>
 8000b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b56:	e008      	b.n	8000b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b58:	f7ff fd2a 	bl	80005b0 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b64      	cmp	r3, #100	; 0x64
 8000b64:	d901      	bls.n	8000b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b66:	2303      	movs	r3, #3
 8000b68:	e1cd      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6a:	4b76      	ldr	r3, [pc, #472]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f0      	beq.n	8000b58 <HAL_RCC_OscConfig+0xc0>
 8000b76:	e014      	b.n	8000ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fd1a 	bl	80005b0 <HAL_GetTick>
 8000b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff fd16 	bl	80005b0 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b64      	cmp	r3, #100	; 0x64
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e1b9      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b92:	4b6c      	ldr	r3, [pc, #432]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f0      	bne.n	8000b80 <HAL_RCC_OscConfig+0xe8>
 8000b9e:	e000      	b.n	8000ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d063      	beq.n	8000c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bae:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00b      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d11c      	bne.n	8000c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc6:	4b5f      	ldr	r3, [pc, #380]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d116      	bne.n	8000c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd2:	4b5c      	ldr	r3, [pc, #368]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d005      	beq.n	8000bea <HAL_RCC_OscConfig+0x152>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d001      	beq.n	8000bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e18d      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4952      	ldr	r1, [pc, #328]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfe:	e03a      	b.n	8000c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d020      	beq.n	8000c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <HAL_RCC_OscConfig+0x2b0>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fccf 	bl	80005b0 <HAL_GetTick>
 8000c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c16:	f7ff fccb 	bl	80005b0 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e16e      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c28:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f0      	beq.n	8000c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4940      	ldr	r1, [pc, #256]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	4313      	orrs	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
 8000c48:	e015      	b.n	8000c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c4a:	4b3f      	ldr	r3, [pc, #252]	; (8000d48 <HAL_RCC_OscConfig+0x2b0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c50:	f7ff fcae 	bl	80005b0 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c58:	f7ff fcaa 	bl	80005b0 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e14d      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f0      	bne.n	8000c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d030      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d016      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <HAL_RCC_OscConfig+0x2b4>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c90:	f7ff fc8e 	bl	80005b0 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c98:	f7ff fc8a 	bl	80005b0 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e12d      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f0      	beq.n	8000c98 <HAL_RCC_OscConfig+0x200>
 8000cb6:	e015      	b.n	8000ce4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_RCC_OscConfig+0x2b4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fc77 	bl	80005b0 <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fc73 	bl	80005b0 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e116      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f0      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80a0 	beq.w	8000e32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_RCC_OscConfig+0x2ac>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_RCC_OscConfig+0x2b8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d121      	bne.n	8000d72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_RCC_OscConfig+0x2b8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_RCC_OscConfig+0x2b8>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d3a:	f7ff fc39 	bl	80005b0 <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d40:	e011      	b.n	8000d66 <HAL_RCC_OscConfig+0x2ce>
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	42470000 	.word	0x42470000
 8000d4c:	42470e80 	.word	0x42470e80
 8000d50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d54:	f7ff fc2c 	bl	80005b0 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e0cf      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d66:	4b6a      	ldr	r3, [pc, #424]	; (8000f10 <HAL_RCC_OscConfig+0x478>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d106      	bne.n	8000d88 <HAL_RCC_OscConfig+0x2f0>
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d7e:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6713      	str	r3, [r2, #112]	; 0x70
 8000d86:	e01c      	b.n	8000dc2 <HAL_RCC_OscConfig+0x32a>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d10c      	bne.n	8000daa <HAL_RCC_OscConfig+0x312>
 8000d90:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d94:	4a5f      	ldr	r2, [pc, #380]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000d9c:	4b5d      	ldr	r3, [pc, #372]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da0:	4a5c      	ldr	r2, [pc, #368]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6713      	str	r3, [r2, #112]	; 0x70
 8000da8:	e00b      	b.n	8000dc2 <HAL_RCC_OscConfig+0x32a>
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dae:	4a59      	ldr	r2, [pc, #356]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	6713      	str	r3, [r2, #112]	; 0x70
 8000db6:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dba:	4a56      	ldr	r2, [pc, #344]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000dbc:	f023 0304 	bic.w	r3, r3, #4
 8000dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d015      	beq.n	8000df6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dca:	f7ff fbf1 	bl	80005b0 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd0:	e00a      	b.n	8000de8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fbed 	bl	80005b0 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e08e      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de8:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0ee      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x33a>
 8000df4:	e014      	b.n	8000e20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fbdb 	bl	80005b0 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fbd7 	bl	80005b0 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e078      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e14:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ee      	bne.n	8000dfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d105      	bne.n	8000e32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e26:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a3a      	ldr	r2, [pc, #232]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d064      	beq.n	8000f04 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d05c      	beq.n	8000f00 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d141      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <HAL_RCC_OscConfig+0x480>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fbac 	bl	80005b0 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e5c:	f7ff fba8 	bl	80005b0 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e04b      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69da      	ldr	r2, [r3, #28]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	3b01      	subs	r3, #1
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	491d      	ldr	r1, [pc, #116]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_RCC_OscConfig+0x480>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fb81 	bl	80005b0 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb2:	f7ff fb7d 	bl	80005b0 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e020      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x41a>
 8000ed0:	e018      	b.n	8000f04 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_RCC_OscConfig+0x480>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fb6a 	bl	80005b0 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff fb66 	bl	80005b0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e009      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_RCC_OscConfig+0x47c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x448>
 8000efe:	e001      	b.n	8000f04 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40007000 	.word	0x40007000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	42470060 	.word	0x42470060

08000f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e0ca      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f30:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_ClockConfig+0x1b4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d90c      	bls.n	8000f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3e:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <HAL_RCC_ClockConfig+0x1b4>)
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f46:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <HAL_RCC_ClockConfig+0x1b4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d001      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0b6      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d020      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f88:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4a51      	ldr	r2, [pc, #324]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	494c      	ldr	r1, [pc, #304]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d044      	beq.n	800103c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d107      	bne.n	8000fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d119      	bne.n	8000ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e07d      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d003      	beq.n	8000fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d107      	bne.n	8000fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e06d      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e065      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f023 0203 	bic.w	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4933      	ldr	r1, [pc, #204]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001008:	4313      	orrs	r3, r2
 800100a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800100c:	f7ff fad0 	bl	80005b0 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001012:	e00a      	b.n	800102a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001014:	f7ff facc 	bl	80005b0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001022:	4293      	cmp	r3, r2
 8001024:	d901      	bls.n	800102a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e04d      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 020c 	and.w	r2, r3, #12
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	429a      	cmp	r2, r3
 800103a:	d1eb      	bne.n	8001014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <HAL_RCC_ClockConfig+0x1b4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d20c      	bcs.n	8001064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <HAL_RCC_ClockConfig+0x1b4>)
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d001      	beq.n	8001064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e030      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4915      	ldr	r1, [pc, #84]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 800107e:	4313      	orrs	r3, r2
 8001080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	490d      	ldr	r1, [pc, #52]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a2:	f000 f81d 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 80010a6:	4601      	mov	r1, r0
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_RCC_ClockConfig+0x1b8>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fa32 	bl	8000528 <HAL_InitTick>

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	080027c8 	.word	0x080027c8
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010f6:	4b50      	ldr	r3, [pc, #320]	; (8001238 <HAL_RCC_GetSysClockFreq+0x158>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d007      	beq.n	8001112 <HAL_RCC_GetSysClockFreq+0x32>
 8001102:	2b08      	cmp	r3, #8
 8001104:	d008      	beq.n	8001118 <HAL_RCC_GetSysClockFreq+0x38>
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 808d 	bne.w	8001226 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <HAL_RCC_GetSysClockFreq+0x15c>)
 800110e:	60bb      	str	r3, [r7, #8]
       break;
 8001110:	e08c      	b.n	800122c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001112:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <HAL_RCC_GetSysClockFreq+0x160>)
 8001114:	60bb      	str	r3, [r7, #8]
      break;
 8001116:	e089      	b.n	800122c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001118:	4b47      	ldr	r3, [pc, #284]	; (8001238 <HAL_RCC_GetSysClockFreq+0x158>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <HAL_RCC_GetSysClockFreq+0x158>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d023      	beq.n	8001176 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <HAL_RCC_GetSysClockFreq+0x158>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	f04f 0400 	mov.w	r4, #0
 8001138:	f240 11ff 	movw	r1, #511	; 0x1ff
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	ea03 0501 	and.w	r5, r3, r1
 8001144:	ea04 0602 	and.w	r6, r4, r2
 8001148:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <HAL_RCC_GetSysClockFreq+0x160>)
 800114a:	fb02 f106 	mul.w	r1, r2, r6
 800114e:	2200      	movs	r2, #0
 8001150:	fb02 f205 	mul.w	r2, r2, r5
 8001154:	440a      	add	r2, r1
 8001156:	493a      	ldr	r1, [pc, #232]	; (8001240 <HAL_RCC_GetSysClockFreq+0x160>)
 8001158:	fba5 0101 	umull	r0, r1, r5, r1
 800115c:	1853      	adds	r3, r2, r1
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	461a      	mov	r2, r3
 8001168:	4623      	mov	r3, r4
 800116a:	f7ff f83b 	bl	80001e4 <__aeabi_uldivmod>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e049      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_RCC_GetSysClockFreq+0x158>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	099b      	lsrs	r3, r3, #6
 800117c:	f04f 0400 	mov.w	r4, #0
 8001180:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	ea03 0501 	and.w	r5, r3, r1
 800118c:	ea04 0602 	and.w	r6, r4, r2
 8001190:	4629      	mov	r1, r5
 8001192:	4632      	mov	r2, r6
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	f04f 0400 	mov.w	r4, #0
 800119c:	0154      	lsls	r4, r2, #5
 800119e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011a2:	014b      	lsls	r3, r1, #5
 80011a4:	4619      	mov	r1, r3
 80011a6:	4622      	mov	r2, r4
 80011a8:	1b49      	subs	r1, r1, r5
 80011aa:	eb62 0206 	sbc.w	r2, r2, r6
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	f04f 0400 	mov.w	r4, #0
 80011b6:	0194      	lsls	r4, r2, #6
 80011b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011bc:	018b      	lsls	r3, r1, #6
 80011be:	1a5b      	subs	r3, r3, r1
 80011c0:	eb64 0402 	sbc.w	r4, r4, r2
 80011c4:	f04f 0100 	mov.w	r1, #0
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	00e2      	lsls	r2, r4, #3
 80011ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011d2:	00d9      	lsls	r1, r3, #3
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	195b      	adds	r3, r3, r5
 80011da:	eb44 0406 	adc.w	r4, r4, r6
 80011de:	f04f 0100 	mov.w	r1, #0
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	02a2      	lsls	r2, r4, #10
 80011e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80011ec:	0299      	lsls	r1, r3, #10
 80011ee:	460b      	mov	r3, r1
 80011f0:	4614      	mov	r4, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f04f 0400 	mov.w	r4, #0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4623      	mov	r3, r4
 8001200:	f7fe fff0 	bl	80001e4 <__aeabi_uldivmod>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_RCC_GetSysClockFreq+0x158>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	0c1b      	lsrs	r3, r3, #16
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	3301      	adds	r3, #1
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	60bb      	str	r3, [r7, #8]
      break;
 8001224:	e002      	b.n	800122c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001228:	60bb      	str	r3, [r7, #8]
      break;
 800122a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800122c:	68bb      	ldr	r3, [r7, #8]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	00f42400 	.word	0x00f42400
 8001240:	017d7840 	.word	0x017d7840

08001244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_RCC_GetHCLKFreq+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001260:	f7ff fff0 	bl	8001244 <HAL_RCC_GetHCLKFreq>
 8001264:	4601      	mov	r1, r0
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0a9b      	lsrs	r3, r3, #10
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	080027d8 	.word	0x080027d8

08001284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001288:	f7ff ffdc 	bl	8001244 <HAL_RCC_GetHCLKFreq>
 800128c:	4601      	mov	r1, r0
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	0b5b      	lsrs	r3, r3, #13
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	080027d8 	.word	0x080027d8

080012ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e056      	b.n	800136c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f001 f8dd 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2202      	movs	r2, #2
 80012e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	ea42 0103 	orr.w	r1, r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	f003 0104 	and.w	r1, r3, #4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800135a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001390:	d112      	bne.n	80013b8 <HAL_SPI_Receive+0x44>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10e      	bne.n	80013b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2204      	movs	r2, #4
 800139e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f8e9 	bl	8001586 <HAL_SPI_TransmitReceive>
 80013b4:	4603      	mov	r3, r0
 80013b6:	e0e2      	b.n	800157e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <HAL_SPI_Receive+0x52>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e0db      	b.n	800157e <HAL_SPI_Receive+0x20a>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80013ce:	f7ff f8ef 	bl	80005b0 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d002      	beq.n	80013e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
 80013e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80013e4:	e0c2      	b.n	800156c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_SPI_Receive+0x7e>
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80013f6:	e0b9      	b.n	800156c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2204      	movs	r2, #4
 80013fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800143e:	d107      	bne.n	8001450 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800144e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	2b40      	cmp	r3, #64	; 0x40
 800145c:	d007      	beq.n	800146e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d162      	bne.n	800153c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001476:	e02e      	b.n	80014d6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d115      	bne.n	80014b2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f103 020c 	add.w	r2, r3, #12
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80014b0:	e011      	b.n	80014d6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014b2:	f7ff f87d 	bl	80005b0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d803      	bhi.n	80014ca <HAL_SPI_Receive+0x156>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d102      	bne.n	80014d0 <HAL_SPI_Receive+0x15c>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80014d4:	e04a      	b.n	800156c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014da:	b29b      	uxth	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1cb      	bne.n	8001478 <HAL_SPI_Receive+0x104>
 80014e0:	e031      	b.n	8001546 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d113      	bne.n	8001518 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	b292      	uxth	r2, r2
 80014fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	1c9a      	adds	r2, r3, #2
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800150c:	b29b      	uxth	r3, r3
 800150e:	3b01      	subs	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001516:	e011      	b.n	800153c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001518:	f7ff f84a 	bl	80005b0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d803      	bhi.n	8001530 <HAL_SPI_Receive+0x1bc>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152e:	d102      	bne.n	8001536 <HAL_SPI_Receive+0x1c2>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800153a:	e017      	b.n	800156c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1cd      	bne.n	80014e2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fa35 	bl	80019ba <SPI_EndRxTransaction>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2220      	movs	r2, #32
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	75fb      	strb	r3, [r7, #23]
 8001568:	e000      	b.n	800156c <HAL_SPI_Receive+0x1f8>
  }

error :
 800156a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800157c:	7dfb      	ldrb	r3, [r7, #23]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b08c      	sub	sp, #48	; 0x30
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_SPI_TransmitReceive+0x26>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e18a      	b.n	80018c2 <HAL_SPI_TransmitReceive+0x33c>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015b4:	f7fe fffc 	bl	80005b0 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80015ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d00f      	beq.n	80015f6 <HAL_SPI_TransmitReceive+0x70>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015dc:	d107      	bne.n	80015ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <HAL_SPI_TransmitReceive+0x68>
 80015e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d003      	beq.n	80015f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80015f4:	e15b      	b.n	80018ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_SPI_TransmitReceive+0x82>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_SPI_TransmitReceive+0x82>
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800160e:	e14e      	b.n	80018ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b04      	cmp	r3, #4
 800161a:	d003      	beq.n	8001624 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2205      	movs	r2, #5
 8001620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	887a      	ldrh	r2, [r7, #2]
 800163a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001664:	2b40      	cmp	r3, #64	; 0x40
 8001666:	d007      	beq.n	8001678 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001680:	d178      	bne.n	8001774 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <HAL_SPI_TransmitReceive+0x10a>
 800168a:	8b7b      	ldrh	r3, [r7, #26]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d166      	bne.n	800175e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	1c9a      	adds	r2, r3, #2
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016b4:	e053      	b.n	800175e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d11b      	bne.n	80016fc <HAL_SPI_TransmitReceive+0x176>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d016      	beq.n	80016fc <HAL_SPI_TransmitReceive+0x176>
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d113      	bne.n	80016fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	1c9a      	adds	r2, r3, #2
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d119      	bne.n	800173e <HAL_SPI_TransmitReceive+0x1b8>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d014      	beq.n	800173e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171e:	b292      	uxth	r2, r2
 8001720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	1c9a      	adds	r2, r3, #2
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800173a:	2301      	movs	r3, #1
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800173e:	f7fe ff37 	bl	80005b0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800174a:	429a      	cmp	r2, r3
 800174c:	d807      	bhi.n	800175e <HAL_SPI_TransmitReceive+0x1d8>
 800174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d003      	beq.n	800175e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800175c:	e0a7      	b.n	80018ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001762:	b29b      	uxth	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1a6      	bne.n	80016b6 <HAL_SPI_TransmitReceive+0x130>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1a1      	bne.n	80016b6 <HAL_SPI_TransmitReceive+0x130>
 8001772:	e07c      	b.n	800186e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_SPI_TransmitReceive+0x1fc>
 800177c:	8b7b      	ldrh	r3, [r7, #26]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d16b      	bne.n	800185a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	330c      	adds	r3, #12
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017a8:	e057      	b.n	800185a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d11c      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x26c>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d017      	beq.n	80017f2 <HAL_SPI_TransmitReceive+0x26c>
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d114      	bne.n	80017f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	330c      	adds	r3, #12
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d119      	bne.n	8001834 <HAL_SPI_TransmitReceive+0x2ae>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d014      	beq.n	8001834 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001826:	b29b      	uxth	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001830:	2301      	movs	r3, #1
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001834:	f7fe febc 	bl	80005b0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001840:	429a      	cmp	r2, r3
 8001842:	d803      	bhi.n	800184c <HAL_SPI_TransmitReceive+0x2c6>
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d102      	bne.n	8001852 <HAL_SPI_TransmitReceive+0x2cc>
 800184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001858:	e029      	b.n	80018ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800185e:	b29b      	uxth	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1a2      	bne.n	80017aa <HAL_SPI_TransmitReceive+0x224>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d19d      	bne.n	80017aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f906 	bl	8001a84 <SPI_EndRxTxTransaction>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2220      	movs	r2, #32
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800188a:	e010      	b.n	80018ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10b      	bne.n	80018ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	e000      	b.n	80018ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80018ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3730      	adds	r7, #48	; 0x30
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018d8:	b2db      	uxtb	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018f6:	e04c      	b.n	8001992 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fe:	d048      	beq.n	8001992 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001900:	f7fe fe56 	bl	80005b0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d902      	bls.n	8001916 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d13d      	bne.n	8001992 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800192e:	d111      	bne.n	8001954 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001938:	d004      	beq.n	8001944 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001942:	d107      	bne.n	8001954 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800195c:	d10f      	bne.n	800197e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800197c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e00f      	b.n	80019b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4013      	ands	r3, r2
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1a3      	bne.n	80018f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af02      	add	r7, sp, #8
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ce:	d111      	bne.n	80019f4 <SPI_EndRxTransaction+0x3a>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d8:	d004      	beq.n	80019e4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d107      	bne.n	80019f4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019fc:	d12a      	bne.n	8001a54 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d012      	beq.n	8001a2e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff ff67 	bl	80018e6 <SPI_WaitFlagStateUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d02d      	beq.n	8001a7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f043 0220 	orr.w	r2, r3, #32
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e026      	b.n	8001a7c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff ff54 	bl	80018e6 <SPI_WaitFlagStateUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01a      	beq.n	8001a7a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f043 0220 	orr.w	r2, r3, #32
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e013      	b.n	8001a7c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f7ff ff41 	bl	80018e6 <SPI_WaitFlagStateUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	f043 0220 	orr.w	r2, r3, #32
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e000      	b.n	8001a7c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <SPI_EndRxTxTransaction+0x7c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <SPI_EndRxTxTransaction+0x80>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0d5b      	lsrs	r3, r3, #21
 8001a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aae:	d112      	bne.n	8001ad6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ff13 	bl	80018e6 <SPI_WaitFlagStateUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d016      	beq.n	8001af4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e00f      	b.n	8001af6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	2b80      	cmp	r3, #128	; 0x80
 8001aee:	d0f2      	beq.n	8001ad6 <SPI_EndRxTxTransaction+0x52>
 8001af0:	e000      	b.n	8001af4 <SPI_EndRxTxTransaction+0x70>
        break;
 8001af2:	bf00      	nop
  }

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000008 	.word	0x20000008
 8001b04:	165e9f81 	.word	0x165e9f81

08001b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e03f      	b.n	8001b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fd0c 	bl	800254c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f90b 	bl	8001d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b088      	sub	sp, #32
 8001ba6:	af02      	add	r7, sp, #8
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	f040 8083 	bne.w	8001cca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_UART_Transmit+0x2e>
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e07b      	b.n	8001ccc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_UART_Transmit+0x40>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e074      	b.n	8001ccc <HAL_UART_Transmit+0x12a>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2221      	movs	r2, #33	; 0x21
 8001bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bf8:	f7fe fcda 	bl	80005b0 <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c0a:	e042      	b.n	8001c92 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c22:	d122      	bne.n	8001c6a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f850 	bl	8001cd4 <UART_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e046      	b.n	8001ccc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	e017      	b.n	8001c92 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	e013      	b.n	8001c92 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2200      	movs	r2, #0
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f82d 	bl	8001cd4 <UART_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e023      	b.n	8001ccc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1b7      	bne.n	8001c0c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2140      	movs	r1, #64	; 0x40
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f814 	bl	8001cd4 <UART_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e00a      	b.n	8001ccc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce4:	e02c      	b.n	8001d40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d028      	beq.n	8001d40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cf4:	f7fe fc5c 	bl	80005b0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d21d      	bcs.n	8001d40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e00f      	b.n	8001d60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d0c3      	beq.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001da8:	f023 030c 	bic.w	r3, r3, #12
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	430b      	orrs	r3, r1
 8001db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd4:	f040 80e4 	bne.w	8001fa0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4aab      	ldr	r2, [pc, #684]	; (800208c <UART_SetConfig+0x324>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d004      	beq.n	8001dec <UART_SetConfig+0x84>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4aaa      	ldr	r2, [pc, #680]	; (8002090 <UART_SetConfig+0x328>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d16c      	bne.n	8001ec6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001dec:	f7ff fa4a 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009a      	lsls	r2, r3, #2
 8001dfa:	441a      	add	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4aa3      	ldr	r2, [pc, #652]	; (8002094 <UART_SetConfig+0x32c>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	011c      	lsls	r4, r3, #4
 8001e10:	f7ff fa38 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009a      	lsls	r2, r3, #2
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e2a:	f7ff fa2b 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009a      	lsls	r2, r3, #2
 8001e38:	441a      	add	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	4a93      	ldr	r2, [pc, #588]	; (8002094 <UART_SetConfig+0x32c>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2264      	movs	r2, #100	; 0x64
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	1aeb      	subs	r3, r5, r3
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	3332      	adds	r3, #50	; 0x32
 8001e58:	4a8e      	ldr	r2, [pc, #568]	; (8002094 <UART_SetConfig+0x32c>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e66:	441c      	add	r4, r3
 8001e68:	f7ff fa0c 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	009a      	lsls	r2, r3, #2
 8001e76:	441a      	add	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e82:	f7ff f9ff 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	4a7d      	ldr	r2, [pc, #500]	; (8002094 <UART_SetConfig+0x32c>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2264      	movs	r2, #100	; 0x64
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	1aeb      	subs	r3, r5, r3
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	3332      	adds	r3, #50	; 0x32
 8001eb0:	4a78      	ldr	r2, [pc, #480]	; (8002094 <UART_SetConfig+0x32c>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4422      	add	r2, r4
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e154      	b.n	8002170 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ec6:	f7ff f9c9 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <UART_SetConfig+0x32c>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	011c      	lsls	r4, r3, #4
 8001eea:	f7ff f9b7 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009a      	lsls	r2, r3, #2
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f04:	f7ff f9aa 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	441a      	add	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <UART_SetConfig+0x32c>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	2264      	movs	r2, #100	; 0x64
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	1aeb      	subs	r3, r5, r3
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	3332      	adds	r3, #50	; 0x32
 8001f32:	4a58      	ldr	r2, [pc, #352]	; (8002094 <UART_SetConfig+0x32c>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f40:	441c      	add	r4, r3
 8001f42:	f7ff f98b 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009a      	lsls	r2, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f5c:	f7ff f97e 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4a47      	ldr	r2, [pc, #284]	; (8002094 <UART_SetConfig+0x32c>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	2264      	movs	r2, #100	; 0x64
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	1aeb      	subs	r3, r5, r3
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	3332      	adds	r3, #50	; 0x32
 8001f8a:	4a42      	ldr	r2, [pc, #264]	; (8002094 <UART_SetConfig+0x32c>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	f003 0207 	and.w	r2, r3, #7
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4422      	add	r2, r4
 8001f9c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001f9e:	e0e7      	b.n	8002170 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a39      	ldr	r2, [pc, #228]	; (800208c <UART_SetConfig+0x324>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <UART_SetConfig+0x24c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a38      	ldr	r2, [pc, #224]	; (8002090 <UART_SetConfig+0x328>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d171      	bne.n	8002098 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fb4:	f7ff f966 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009a      	lsls	r2, r3, #2
 8001fc2:	441a      	add	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4a31      	ldr	r2, [pc, #196]	; (8002094 <UART_SetConfig+0x32c>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	011c      	lsls	r4, r3, #4
 8001fd8:	f7ff f954 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009a      	lsls	r2, r3, #2
 8001fe6:	441a      	add	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ff2:	f7ff f947 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009a      	lsls	r2, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <UART_SetConfig+0x32c>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2264      	movs	r2, #100	; 0x64
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	1aeb      	subs	r3, r5, r3
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	3332      	adds	r3, #50	; 0x32
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <UART_SetConfig+0x32c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	441c      	add	r4, r3
 800202e:	f7ff f929 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8002032:	4602      	mov	r2, r0
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009a      	lsls	r2, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fbb2 f5f3 	udiv	r5, r2, r3
 8002048:	f7ff f91c 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 800204c:	4602      	mov	r2, r0
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009a      	lsls	r2, r3, #2
 8002056:	441a      	add	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <UART_SetConfig+0x32c>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	2264      	movs	r2, #100	; 0x64
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	1aeb      	subs	r3, r5, r3
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	3332      	adds	r3, #50	; 0x32
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <UART_SetConfig+0x32c>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4422      	add	r2, r4
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	e071      	b.n	8002170 <UART_SetConfig+0x408>
 800208c:	40011000 	.word	0x40011000
 8002090:	40011400 	.word	0x40011400
 8002094:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002098:	f7ff f8e0 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 800209c:	4602      	mov	r2, r0
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	009a      	lsls	r2, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4a31      	ldr	r2, [pc, #196]	; (8002178 <UART_SetConfig+0x410>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	011c      	lsls	r4, r3, #4
 80020bc:	f7ff f8ce 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009a      	lsls	r2, r3, #2
 80020ca:	441a      	add	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80020d6:	f7ff f8c1 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009a      	lsls	r2, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	4a21      	ldr	r2, [pc, #132]	; (8002178 <UART_SetConfig+0x410>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2264      	movs	r2, #100	; 0x64
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	1aeb      	subs	r3, r5, r3
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	3332      	adds	r3, #50	; 0x32
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <UART_SetConfig+0x410>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	441c      	add	r4, r3
 8002112:	f7ff f8a3 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8002116:	4602      	mov	r2, r0
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009a      	lsls	r2, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fbb2 f5f3 	udiv	r5, r2, r3
 800212c:	f7ff f896 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8002130:	4602      	mov	r2, r0
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009a      	lsls	r2, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <UART_SetConfig+0x410>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	2264      	movs	r2, #100	; 0x64
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	1aeb      	subs	r3, r5, r3
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	3332      	adds	r3, #50	; 0x32
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <UART_SetConfig+0x410>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4422      	add	r2, r4
 800216c:	609a      	str	r2, [r3, #8]
}
 800216e:	e7ff      	b.n	8002170 <UART_SetConfig+0x408>
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bdb0      	pop	{r4, r5, r7, pc}
 8002178:	51eb851f 	.word	0x51eb851f

0800217c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002182:	f7fe f9af 	bl	80004e4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002186:	f000 f83f 	bl	8002208 <SystemClock_Config>


	/* Initialize all configured peripherals */
	//GPIO_Init();
	SPI_Init(&hspi2);
 800218a:	4817      	ldr	r0, [pc, #92]	; (80021e8 <main+0x6c>)
 800218c:	f000 f89c 	bl	80022c8 <SPI_Init>
	SPI2_Init();
 8002190:	f000 f92a 	bl	80023e8 <SPI2_Init>
	USART2_UART_Init();
 8002194:	f000 fa86 	bl	80026a4 <USART2_UART_Init>

	char *msg = "\n\rPROGRAMA SPI\n\r";
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <main+0x70>)
 800219a:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 0xFFFF);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7fe f819 	bl	80001d4 <strlen>
 80021a2:	4603      	mov	r3, r0
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4810      	ldr	r0, [pc, #64]	; (80021f0 <main+0x74>)
 80021ae:	f7ff fcf8 	bl	8001ba2 <HAL_UART_Transmit>

	while (1) {
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
		//HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) buffTX, (uint8_t*) buffRX, 8, 1000);
		HAL_SPI_Receive(&hspi2, buffRX, 9, 1000);
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	2209      	movs	r2, #9
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <main+0x78>)
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <main+0x6c>)
 80021bc:	f7ff f8da 	bl	8001374 <HAL_SPI_Receive>
		//HAL_SPI_Transmit(&hspi2, buffTX, 5, 1000);
		while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 80021c0:	bf00      	nop
 80021c2:	4809      	ldr	r0, [pc, #36]	; (80021e8 <main+0x6c>)
 80021c4:	f7ff fb81 	bl	80018ca <HAL_SPI_GetState>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d1f9      	bne.n	80021c2 <main+0x46>
		}
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_UART_Transmit(&huart2, (uint8_t*) buffRX, strlen(buffRX), 1000);
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <main+0x78>)
 80021d0:	f7fe f800 	bl	80001d4 <strlen>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021dc:	4905      	ldr	r1, [pc, #20]	; (80021f4 <main+0x78>)
 80021de:	4804      	ldr	r0, [pc, #16]	; (80021f0 <main+0x74>)
 80021e0:	f7ff fcdf 	bl	8001ba2 <HAL_UART_Transmit>
		HAL_SPI_Receive(&hspi2, buffRX, 9, 1000);
 80021e4:	e7e5      	b.n	80021b2 <main+0x36>
 80021e6:	bf00      	nop
 80021e8:	20000038 	.word	0x20000038
 80021ec:	080027b4 	.word	0x080027b4
 80021f0:	20000140 	.word	0x20000140
 80021f4:	2000002c 	.word	0x2000002c

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b094      	sub	sp, #80	; 0x50
 800220c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220e:	f107 0320 	add.w	r3, r7, #32
 8002212:	2230      	movs	r2, #48	; 0x30
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fab8 	bl	800278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <SystemClock_Config+0xb8>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <SystemClock_Config+0xb8>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <SystemClock_Config+0xb8>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <SystemClock_Config+0xbc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <SystemClock_Config+0xbc>)
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <SystemClock_Config+0xbc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800226c:	2301      	movs	r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002270:	2310      	movs	r3, #16
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002274:	2300      	movs	r3, #0
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002278:	f107 0320 	add.w	r3, r7, #32
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fc0b 	bl	8000a98 <HAL_RCC_OscConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002288:	f7ff ffb6 	bl	80021f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228c:	230f      	movs	r3, #15
 800228e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fe38 	bl	8000f1c <HAL_RCC_ClockConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022b2:	f7ff ffa1 	bl	80021f8 <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3750      	adds	r7, #80	; 0x50
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000

080022c8 <SPI_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

void SPI_Init(SPI_HandleTypeDef* hspi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

    /* Peripheral clock enable */
    __SPI1_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <SPI_Init+0x110>)
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <SPI_Init+0x110>)
 80022da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022de:	6453      	str	r3, [r2, #68]	; 0x44
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <SPI_Init+0x110>)
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022ec:	2310      	movs	r3, #16
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4837      	ldr	r0, [pc, #220]	; (80023dc <SPI_Init+0x114>)
 8002300:	f7fe fa48 	bl	8000794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002304:	23e0      	movs	r3, #224	; 0xe0
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002314:	2305      	movs	r3, #5
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	482f      	ldr	r0, [pc, #188]	; (80023dc <SPI_Init+0x114>)
 8002320:	f7fe fa38 	bl	8000794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __SPI2_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <SPI_Init+0x110>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <SPI_Init+0x110>)
 800232e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <SPI_Init+0x110>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4822      	ldr	r0, [pc, #136]	; (80023e0 <SPI_Init+0x118>)
 8002356:	f7fe fa1d 	bl	8000794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800235a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800236c:	2305      	movs	r3, #5
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	481a      	ldr	r0, [pc, #104]	; (80023e0 <SPI_Init+0x118>)
 8002378:	f7fe fa0c 	bl	8000794 <HAL_GPIO_Init>


    /* Peripheral clock enable */
    __SPI4_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <SPI_Init+0x110>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <SPI_Init+0x110>)
 8002386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800238a:	6453      	str	r3, [r2, #68]	; 0x44
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <SPI_Init+0x110>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80023a8:	2305      	movs	r3, #5
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	480c      	ldr	r0, [pc, #48]	; (80023e4 <SPI_Init+0x11c>)
 80023b4:	f7fe f9ee 	bl	8000794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023b8:	2310      	movs	r3, #16
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4806      	ldr	r0, [pc, #24]	; (80023e4 <SPI_Init+0x11c>)
 80023cc:	f7fe f9e2 	bl	8000794 <HAL_GPIO_Init>


}
 80023d0:	bf00      	nop
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40021000 	.word	0x40021000

080023e8 <SPI2_Init>:

}

/* SPI2 init function */
void SPI2_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <SPI2_Init+0x58>)
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <SPI2_Init+0x5c>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <SPI2_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <SPI2_Init+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <SPI2_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <SPI2_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <SPI2_Init+0x58>)
 800240c:	2201      	movs	r2, #1
 800240e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT; //SPI_NSS_HARD_INPUT
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <SPI2_Init+0x58>)
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <SPI2_Init+0x58>)
 800241a:	2238      	movs	r2, #56	; 0x38
 800241c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SPI2_Init+0x58>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SPI2_Init+0x58>)
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SPI2_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <SPI2_Init+0x58>)
 8002432:	220a      	movs	r2, #10
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi2);
 8002436:	4802      	ldr	r0, [pc, #8]	; (8002440 <SPI2_Init+0x58>)
 8002438:	f7fe ff38 	bl	80012ac <HAL_SPI_Init>

}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000038 	.word	0x20000038
 8002444:	40003800 	.word	0x40003800

08002448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_MspInit+0x4c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_MspInit+0x4c>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_MspInit+0x4c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_MspInit+0x4c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_MspInit+0x4c>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_SPI_MspInit+0xa8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d13d      	bne.n	8002536 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_SPI_MspInit+0xac>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_SPI_MspInit+0xac>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_SPI_MspInit+0xac>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_SPI_MspInit+0xac>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_SPI_MspInit+0xac>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_SPI_MspInit+0xac>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80024f2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002500:	2302      	movs	r3, #2
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002504:	2305      	movs	r3, #5
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	480e      	ldr	r0, [pc, #56]	; (8002548 <HAL_SPI_MspInit+0xb0>)
 8002510:	f7fe f940 	bl	8000794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800251e:	2302      	movs	r3, #2
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002526:	2305      	movs	r3, #5
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_SPI_MspInit+0xb0>)
 8002532:	f7fe f92f 	bl	8000794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40003800 	.word	0x40003800
 8002544:	40023800 	.word	0x40023800
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_UART_MspInit+0x84>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12b      	bne.n	80025c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0x88>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_UART_MspInit+0x88>)
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0x88>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_UART_MspInit+0x88>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_UART_MspInit+0x88>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_UART_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025a6:	230c      	movs	r3, #12
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b6:	2307      	movs	r3, #7
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <HAL_UART_MspInit+0x8c>)
 80025c2:	f7fe f8e7 	bl	8000794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40004400 	.word	0x40004400
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020000 	.word	0x40020000

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <MemManage_Handler+0x4>

080025f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler+0x4>

08002602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f7fd ffaa 	bl	8000588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <SystemInit+0x60>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	4a15      	ldr	r2, [pc, #84]	; (8002698 <SystemInit+0x60>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <SystemInit+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a12      	ldr	r2, [pc, #72]	; (800269c <SystemInit+0x64>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <SystemInit+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <SystemInit+0x64>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <SystemInit+0x64>)
 8002664:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <SystemInit+0x64>)
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <SystemInit+0x68>)
 8002672:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <SystemInit+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <SystemInit+0x64>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SystemInit+0x64>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SystemInit+0x60>)
 8002688:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800268c:	609a      	str	r2, [r3, #8]
#endif
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	40023800 	.word	0x40023800
 80026a0:	24003010 	.word	0x24003010

080026a4 <USART2_UART_Init>:
  }
}

/* USART2 init function */
void USART2_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <USART2_UART_Init+0x44>)
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <USART2_UART_Init+0x48>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <USART2_UART_Init+0x44>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <USART2_UART_Init+0x44>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <USART2_UART_Init+0x44>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <USART2_UART_Init+0x44>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <USART2_UART_Init+0x44>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <USART2_UART_Init+0x44>)
 80026d0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <USART2_UART_Init+0x44>)
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <USART2_UART_Init+0x44>)
 80026de:	f7ff fa13 	bl	8001b08 <HAL_UART_Init>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000140 	.word	0x20000140
 80026ec:	40004400 	.word	0x40004400

080026f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026f6:	e003      	b.n	8002700 <LoopCopyDataInit>

080026f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026fe:	3104      	adds	r1, #4

08002700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002700:	480b      	ldr	r0, [pc, #44]	; (8002730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002708:	d3f6      	bcc.n	80026f8 <CopyDataInit>
  ldr  r2, =_sbss
 800270a:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800270c:	e002      	b.n	8002714 <LoopFillZerobss>

0800270e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800270e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002710:	f842 3b04 	str.w	r3, [r2], #4

08002714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002718:	d3f9      	bcc.n	800270e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800271a:	f7ff ff8d 	bl	8002638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800271e:	f000 f811 	bl	8002744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002722:	f7ff fd2b 	bl	800217c <main>
  bx  lr    
 8002726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002728:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800272c:	080027f0 	.word	0x080027f0
  ldr  r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002734:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002738:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800273c:	20000180 	.word	0x20000180

08002740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC_IRQHandler>
	...

08002744 <__libc_init_array>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4e0d      	ldr	r6, [pc, #52]	; (800277c <__libc_init_array+0x38>)
 8002748:	4c0d      	ldr	r4, [pc, #52]	; (8002780 <__libc_init_array+0x3c>)
 800274a:	1ba4      	subs	r4, r4, r6
 800274c:	10a4      	asrs	r4, r4, #2
 800274e:	2500      	movs	r5, #0
 8002750:	42a5      	cmp	r5, r4
 8002752:	d109      	bne.n	8002768 <__libc_init_array+0x24>
 8002754:	4e0b      	ldr	r6, [pc, #44]	; (8002784 <__libc_init_array+0x40>)
 8002756:	4c0c      	ldr	r4, [pc, #48]	; (8002788 <__libc_init_array+0x44>)
 8002758:	f000 f820 	bl	800279c <_init>
 800275c:	1ba4      	subs	r4, r4, r6
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	2500      	movs	r5, #0
 8002762:	42a5      	cmp	r5, r4
 8002764:	d105      	bne.n	8002772 <__libc_init_array+0x2e>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800276c:	4798      	blx	r3
 800276e:	3501      	adds	r5, #1
 8002770:	e7ee      	b.n	8002750 <__libc_init_array+0xc>
 8002772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002776:	4798      	blx	r3
 8002778:	3501      	adds	r5, #1
 800277a:	e7f2      	b.n	8002762 <__libc_init_array+0x1e>
 800277c:	080027e8 	.word	0x080027e8
 8002780:	080027e8 	.word	0x080027e8
 8002784:	080027e8 	.word	0x080027e8
 8002788:	080027ec 	.word	0x080027ec

0800278c <memset>:
 800278c:	4402      	add	r2, r0
 800278e:	4603      	mov	r3, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <_init>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr

080027a8 <_fini>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr
