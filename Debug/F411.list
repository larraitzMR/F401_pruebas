
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e5c  08007e5c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e64  08007e64  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200000b4  08007f20  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08007f20  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018257  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039c4  00000000  00000000  0003833b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  0003bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  0003cb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aa20  00000000  00000000  0003d810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010200  00000000  00000000  00058230  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096e0a  00000000  00000000  00068430  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff23a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d2c  00000000  00000000  000ff2b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c04 	.word	0x08007c04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08007c04 	.word	0x08007c04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f967 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f005 fd7e 	bl	80069a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f97f 	bl	80011d2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f947 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000004c 	.word	0x2000004c
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	20000000 	.word	0x20000000

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000004 	.word	0x20000004
 8000f34:	2000045c 	.word	0x2000045c

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000045c 	.word	0x2000045c

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0c      	blt.n	800101c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_SetPendingIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	3340      	adds	r3, #64	; 0x40
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0c      	blt.n	8001058 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_ClearPendingIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	3360      	adds	r3, #96	; 0x60
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff feed 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff02 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fef5 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fef9 	bl	8000ff0 <__NVIC_SetPendingIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff09 	bl	800102c <__NVIC_ClearPendingIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	e159      	b.n	80014f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8148 	bne.w	80014ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x4a>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b12      	cmp	r3, #18
 800126c:	d123      	bne.n	80012b6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	69b9      	ldr	r1, [r7, #24]
 80012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0203 	and.w	r2, r3, #3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d00b      	beq.n	800130a <HAL_GPIO_Init+0xe6>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b12      	cmp	r3, #18
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a2 	beq.w	80014ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_GPIO_Init+0x2e4>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a55      	ldr	r2, [pc, #340]	; (8001508 <HAL_GPIO_Init+0x2e4>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_GPIO_Init+0x2e4>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_GPIO_Init+0x2e8>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a48      	ldr	r2, [pc, #288]	; (8001510 <HAL_GPIO_Init+0x2ec>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d019      	beq.n	8001426 <HAL_GPIO_Init+0x202>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a47      	ldr	r2, [pc, #284]	; (8001514 <HAL_GPIO_Init+0x2f0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x1fe>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_GPIO_Init+0x2f4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x1fa>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a45      	ldr	r2, [pc, #276]	; (800151c <HAL_GPIO_Init+0x2f8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x1f6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a44      	ldr	r2, [pc, #272]	; (8001520 <HAL_GPIO_Init+0x2fc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x1f2>
 8001412:	2304      	movs	r3, #4
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x204>
 8001416:	2307      	movs	r3, #7
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x204>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x204>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x204>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x204>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4934      	ldr	r1, [pc, #208]	; (800150c <HAL_GPIO_Init+0x2e8>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <HAL_GPIO_Init+0x300>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x300>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_GPIO_Init+0x300>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001494:	4a23      	ldr	r2, [pc, #140]	; (8001524 <HAL_GPIO_Init+0x300>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_GPIO_Init+0x300>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_GPIO_Init+0x300>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_GPIO_Init+0x300>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_GPIO_Init+0x300>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f aea2 	bls.w	8001240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	3724      	adds	r7, #36	; 0x24
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40013c00 	.word	0x40013c00

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fa92 	bl	8006aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e22d      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d075      	beq.n	8001696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015aa:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d00c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4ba0      	ldr	r3, [pc, #640]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d112      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4b9d      	ldr	r3, [pc, #628]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b99      	ldr	r3, [pc, #612]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d05b      	beq.n	8001694 <HAL_RCC_OscConfig+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d157      	bne.n	8001694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e208      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x74>
 80015f2:	4b91      	ldr	r3, [pc, #580]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a90      	ldr	r2, [pc, #576]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160a:	4b8b      	ldr	r3, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a8a      	ldr	r2, [pc, #552]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a87      	ldr	r2, [pc, #540]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001624:	4b84      	ldr	r3, [pc, #528]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a83      	ldr	r2, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b81      	ldr	r3, [pc, #516]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a80      	ldr	r2, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fc78 	bl	8000f38 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fc74 	bl	8000f38 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1cd      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xc0>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc64 	bl	8000f38 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fc60 	bl	8000f38 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1b9      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0xe8>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b62      	ldr	r3, [pc, #392]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e18d      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b56      	ldr	r3, [pc, #344]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4952      	ldr	r1, [pc, #328]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e03a      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x2b0>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fc19 	bl	8000f38 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fc15 	bl	8000f38 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e16e      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	4b46      	ldr	r3, [pc, #280]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4940      	ldr	r1, [pc, #256]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_OscConfig+0x2b0>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fbf8 	bl	8000f38 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fbf4 	bl	8000f38 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e14d      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b36      	ldr	r3, [pc, #216]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d030      	beq.n	80017d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_RCC_OscConfig+0x2b4>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fbd8 	bl	8000f38 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fbd4 	bl	8000f38 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e12d      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x200>
 80017aa:	e015      	b.n	80017d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_RCC_OscConfig+0x2b4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fbc1 	bl	8000f38 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fbbd 	bl	8000f38 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e116      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a0 	beq.w	8001926 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x2b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d121      	bne.n	8001866 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_RCC_OscConfig+0x2b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_RCC_OscConfig+0x2b8>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff fb83 	bl	8000f38 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e011      	b.n	800185a <HAL_RCC_OscConfig+0x2ce>
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	42470000 	.word	0x42470000
 8001840:	42470e80 	.word	0x42470e80
 8001844:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7ff fb76 	bl	8000f38 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e0cf      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x478>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <HAL_RCC_OscConfig+0x2f0>
 800186e:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	e01c      	b.n	80018b6 <HAL_RCC_OscConfig+0x32a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d10c      	bne.n	800189e <HAL_RCC_OscConfig+0x312>
 8001884:	4b60      	ldr	r3, [pc, #384]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a5f      	ldr	r2, [pc, #380]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a5c      	ldr	r2, [pc, #368]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	e00b      	b.n	80018b6 <HAL_RCC_OscConfig+0x32a>
 800189e:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a59      	ldr	r2, [pc, #356]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d015      	beq.n	80018ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff fb3b 	bl	8000f38 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff fb37 	bl	8000f38 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e08e      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ee      	beq.n	80018c6 <HAL_RCC_OscConfig+0x33a>
 80018e8:	e014      	b.n	8001914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb25 	bl	8000f38 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fb21 	bl	8000f38 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e078      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ee      	bne.n	80018f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d064      	beq.n	80019f8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	d05c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d141      	bne.n	80019c6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_RCC_OscConfig+0x480>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff faf6 	bl	8000f38 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff faf2 	bl	8000f38 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e04b      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	3b01      	subs	r3, #1
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	491d      	ldr	r1, [pc, #116]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_RCC_OscConfig+0x480>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff facb 	bl	8000f38 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fac7 	bl	8000f38 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e020      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x41a>
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x480>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fab4 	bl	8000f38 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fab0 	bl	8000f38 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e009      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_RCC_OscConfig+0x47c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x448>
 80019f2:	e001      	b.n	80019f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	42470060 	.word	0x42470060

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0ca      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d90c      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b6      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494c      	ldr	r1, [pc, #304]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d044      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07d      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06d      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e065      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4933      	ldr	r1, [pc, #204]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fa1a 	bl	8000f38 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fa16 	bl	8000f38 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04d      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e030      	b.n	8001bba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4915      	ldr	r1, [pc, #84]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f81d 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	fa21 f303 	lsr.w	r3, r1, r3
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff f97c 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08007e10 	.word	0x08007e10
 8001bd0:	2000004c 	.word	0x2000004c

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bea:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d007      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x32>
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d008      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x38>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 808d 	bne.w	8001d1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c02:	60bb      	str	r3, [r7, #8]
       break;
 8001c04:	e08c      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c06:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c08:	60bb      	str	r3, [r7, #8]
      break;
 8001c0a:	e089      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c16:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d023      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	f04f 0400 	mov.w	r4, #0
 8001c2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	ea03 0501 	and.w	r5, r3, r1
 8001c38:	ea04 0602 	and.w	r6, r4, r2
 8001c3c:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c3e:	fb02 f106 	mul.w	r1, r2, r6
 8001c42:	2200      	movs	r2, #0
 8001c44:	fb02 f205 	mul.w	r2, r2, r5
 8001c48:	440a      	add	r2, r1
 8001c4a:	493a      	ldr	r1, [pc, #232]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c4c:	fba5 0101 	umull	r0, r1, r5, r1
 8001c50:	1853      	adds	r3, r2, r1
 8001c52:	4619      	mov	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f04f 0400 	mov.w	r4, #0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	f7fe ff85 	bl	8000b6c <__aeabi_uldivmod>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e049      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	f04f 0400 	mov.w	r4, #0
 8001c74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	ea03 0501 	and.w	r5, r3, r1
 8001c80:	ea04 0602 	and.w	r6, r4, r2
 8001c84:	4629      	mov	r1, r5
 8001c86:	4632      	mov	r2, r6
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	0154      	lsls	r4, r2, #5
 8001c92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c96:	014b      	lsls	r3, r1, #5
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	1b49      	subs	r1, r1, r5
 8001c9e:	eb62 0206 	sbc.w	r2, r2, r6
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	f04f 0400 	mov.w	r4, #0
 8001caa:	0194      	lsls	r4, r2, #6
 8001cac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cb0:	018b      	lsls	r3, r1, #6
 8001cb2:	1a5b      	subs	r3, r3, r1
 8001cb4:	eb64 0402 	sbc.w	r4, r4, r2
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	00e2      	lsls	r2, r4, #3
 8001cc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cc6:	00d9      	lsls	r1, r3, #3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4614      	mov	r4, r2
 8001ccc:	195b      	adds	r3, r3, r5
 8001cce:	eb44 0406 	adc.w	r4, r4, r6
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	02a2      	lsls	r2, r4, #10
 8001cdc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ce0:	0299      	lsls	r1, r3, #10
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f04f 0400 	mov.w	r4, #0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	f7fe ff3a 	bl	8000b6c <__aeabi_uldivmod>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	60bb      	str	r3, [r7, #8]
      break;
 8001d18:	e002      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d1c:	60bb      	str	r3, [r7, #8]
      break;
 8001d1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d20:	68bb      	ldr	r3, [r7, #8]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	017d7840 	.word	0x017d7840

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2000004c 	.word	0x2000004c

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4601      	mov	r1, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08007e20 	.word	0x08007e20

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08007e20 	.word	0x08007e20

08001da0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001dd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	0c1b      	lsrs	r3, r3, #16
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11a      	bne.n	8001e52 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa1a 	bl	800225a <RTC_Bcd2ToByte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fa11 	bl	800225a <RTC_Bcd2ToByte>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	789b      	ldrb	r3, [r3, #2]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fa08 	bl	800225a <RTC_Bcd2ToByte>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001e70:	4ba1      	ldr	r3, [pc, #644]	; (80020f8 <HAL_RTC_SetAlarm_IT+0x29c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4aa1      	ldr	r2, [pc, #644]	; (80020fc <HAL_RTC_SetAlarm_IT+0x2a0>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0adb      	lsrs	r3, r3, #11
 8001e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_RTC_SetAlarm_IT+0x36>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e12e      	b.n	80020f0 <HAL_RTC_SetAlarm_IT+0x294>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d137      	bne.n	8001f14 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f9ae 	bl	800221e <RTC_ByteToBcd2>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f9a7 	bl	800221e <RTC_ByteToBcd2>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ed4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f99f 	bl	800221e <RTC_ByteToBcd2>
 8001ee0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ee2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	78db      	ldrb	r3, [r3, #3]
 8001eea:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001eec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f991 	bl	800221e <RTC_ByteToBcd2>
 8001efc:	4603      	mov	r3, r0
 8001efe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e040      	b.n	8001f96 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f997 	bl	800225a <RTC_Bcd2ToByte>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e002      	b.n	8001f38 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f987 	bl	800225a <RTC_Bcd2ToByte>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	e007      	b.n	8001f62 <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f97e 	bl	800225a <RTC_Bcd2ToByte>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f6e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001f74:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	78db      	ldrb	r3, [r3, #3]
 8001f7a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001f7c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f86:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	22ca      	movs	r2, #202	; 0xca
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2253      	movs	r2, #83	; 0x53
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fba:	d141      	bne.n	8002040 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fca:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001fdc:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	617a      	str	r2, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22ff      	movs	r2, #255	; 0xff
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e077      	b.n	80020f0 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0e7      	beq.n	8001fde <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	e040      	b.n	80020c2 <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800204e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002060:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	617a      	str	r2, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	22ff      	movs	r2, #255	; 0xff
 8002072:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2203      	movs	r2, #3
 8002078:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e035      	b.n	80020f0 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0e7      	beq.n	8002062 <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020c0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_RTC_SetAlarm_IT+0x2a4>)
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	22ff      	movs	r2, #255	; 0xff
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3724      	adds	r7, #36	; 0x24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	2000004c 	.word	0x2000004c
 80020fc:	10624dd3 	.word	0x10624dd3
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7f1b      	ldrb	r3, [r3, #28]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_RTC_DeactivateAlarm+0x1a>
 800211a:	2302      	movs	r3, #2
 800211c:	e07b      	b.n	8002216 <HAL_RTC_DeactivateAlarm+0x112>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	775a      	strb	r2, [r3, #29]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	22ca      	movs	r2, #202	; 0xca
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2253      	movs	r2, #83	; 0x53
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
  
  if(Alarm == RTC_ALARM_A)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002140:	d12f      	bne.n	80021a2 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002150:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002160:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002162:	f7fe fee9 	bl	8000f38 <HAL_GetTick>
 8002166:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002168:	e013      	b.n	8002192 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800216a:	f7fe fee5 	bl	8000f38 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002178:	d90b      	bls.n	8002192 <HAL_RTC_DeactivateAlarm+0x8e>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e041      	b.n	8002216 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0e4      	beq.n	800216a <HAL_RTC_DeactivateAlarm+0x66>
 80021a0:	e02e      	b.n	8002200 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021b0:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021c2:	f7fe feb9 	bl	8000f38 <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80021c8:	e013      	b.n	80021f2 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80021ca:	f7fe feb5 	bl	8000f38 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d8:	d90b      	bls.n	80021f2 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e011      	b.n	8002216 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0e4      	beq.n	80021ca <HAL_RTC_DeactivateAlarm+0xc6>
      }    
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK; 
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 800222c:	e005      	b.n	800223a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	3b0a      	subs	r3, #10
 8002238:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d8f6      	bhi.n	800222e <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	b2da      	uxtb	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4313      	orrs	r3, r2
 800224c:	b2db      	uxtb	r3, r3
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4413      	add	r3, r2
 8002288:	b2db      	uxtb	r3, r3
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e056      	b.n	8002356 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f004 fb94 	bl	80069f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0104 	and.w	r1, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002344:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b088      	sub	sp, #32
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_SPI_Transmit+0x22>
 800237c:	2302      	movs	r3, #2
 800237e:	e11e      	b.n	80025be <HAL_SPI_Transmit+0x260>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002388:	f7fe fdd6 	bl	8000f38 <HAL_GetTick>
 800238c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023a2:	e103      	b.n	80025ac <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_SPI_Transmit+0x52>
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023b4:	e0fa      	b.n	80025ac <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2203      	movs	r2, #3
 80023ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	d107      	bne.n	800240e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d007      	beq.n	800242c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002434:	d14b      	bne.n	80024ce <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_SPI_Transmit+0xe6>
 800243e:	8afb      	ldrh	r3, [r7, #22]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d13e      	bne.n	80024c2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	1c9a      	adds	r2, r3, #2
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002468:	e02b      	b.n	80024c2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d112      	bne.n	800249e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	1c9a      	adds	r2, r3, #2
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	86da      	strh	r2, [r3, #54]	; 0x36
 800249c:	e011      	b.n	80024c2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249e:	f7fe fd4b 	bl	8000f38 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d803      	bhi.n	80024b6 <HAL_SPI_Transmit+0x158>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d102      	bne.n	80024bc <HAL_SPI_Transmit+0x15e>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024c0:	e074      	b.n	80025ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ce      	bne.n	800246a <HAL_SPI_Transmit+0x10c>
 80024cc:	e04c      	b.n	8002568 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_Transmit+0x17e>
 80024d6:	8afb      	ldrh	r3, [r7, #22]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d140      	bne.n	800255e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002502:	e02c      	b.n	800255e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d113      	bne.n	800253a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
 8002538:	e011      	b.n	800255e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800253a:	f7fe fcfd 	bl	8000f38 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d803      	bhi.n	8002552 <HAL_SPI_Transmit+0x1f4>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d102      	bne.n	8002558 <HAL_SPI_Transmit+0x1fa>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800255c:	e026      	b.n	80025ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1cd      	bne.n	8002504 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fba5 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
 80025a8:	e000      	b.n	80025ac <HAL_SPI_Transmit+0x24e>
  }

error:
 80025aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b088      	sub	sp, #32
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e2:	d112      	bne.n	800260a <HAL_SPI_Receive+0x44>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10e      	bne.n	800260a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2204      	movs	r2, #4
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f8e9 	bl	80027d8 <HAL_SPI_TransmitReceive>
 8002606:	4603      	mov	r3, r0
 8002608:	e0e2      	b.n	80027d0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_SPI_Receive+0x52>
 8002614:	2302      	movs	r3, #2
 8002616:	e0db      	b.n	80027d0 <HAL_SPI_Receive+0x20a>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002620:	f7fe fc8a 	bl	8000f38 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002636:	e0c2      	b.n	80027be <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_SPI_Receive+0x7e>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002648:	e0b9      	b.n	80027be <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2204      	movs	r2, #4
 800264e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	d107      	bne.n	80026a2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d007      	beq.n	80026c0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d162      	bne.n	800278e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026c8:	e02e      	b.n	8002728 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d115      	bne.n	8002704 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f103 020c 	add.w	r2, r3, #12
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002702:	e011      	b.n	8002728 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002704:	f7fe fc18 	bl	8000f38 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d803      	bhi.n	800271c <HAL_SPI_Receive+0x156>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d102      	bne.n	8002722 <HAL_SPI_Receive+0x15c>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002726:	e04a      	b.n	80027be <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1cb      	bne.n	80026ca <HAL_SPI_Receive+0x104>
 8002732:	e031      	b.n	8002798 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d113      	bne.n	800276a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	b292      	uxth	r2, r2
 800274e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	1c9a      	adds	r2, r3, #2
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002768:	e011      	b.n	800278e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276a:	f7fe fbe5 	bl	8000f38 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d803      	bhi.n	8002782 <HAL_SPI_Receive+0x1bc>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d102      	bne.n	8002788 <HAL_SPI_Receive+0x1c2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800278c:	e017      	b.n	80027be <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1cd      	bne.n	8002734 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fa27 	bl	8002bf0 <SPI_EndRxTransaction>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
 80027ba:	e000      	b.n	80027be <HAL_SPI_Receive+0x1f8>
  }

error :
 80027bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027e6:	2301      	movs	r3, #1
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_TransmitReceive+0x26>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e18a      	b.n	8002b14 <HAL_SPI_TransmitReceive+0x33c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002806:	f7fe fb97 	bl	8000f38 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002824:	2b01      	cmp	r3, #1
 8002826:	d00f      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x70>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282e:	d107      	bne.n	8002840 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <HAL_SPI_TransmitReceive+0x68>
 8002838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800283c:	2b04      	cmp	r3, #4
 800283e:	d003      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002840:	2302      	movs	r3, #2
 8002842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002846:	e15b      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_SPI_TransmitReceive+0x82>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_SPI_TransmitReceive+0x82>
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002860:	e14e      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	887a      	ldrh	r2, [r7, #2]
 8002886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	887a      	ldrh	r2, [r7, #2]
 800289e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d007      	beq.n	80028ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d2:	d178      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x10a>
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d166      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002906:	e053      	b.n	80029b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d11b      	bne.n	800294e <HAL_SPI_TransmitReceive+0x176>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d016      	beq.n	800294e <HAL_SPI_TransmitReceive+0x176>
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d113      	bne.n	800294e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	1c9a      	adds	r2, r3, #2
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d119      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x1b8>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d014      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	b292      	uxth	r2, r2
 8002972:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800298c:	2301      	movs	r3, #1
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002990:	f7fe fad2 	bl	8000f38 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800299c:	429a      	cmp	r2, r3
 800299e:	d807      	bhi.n	80029b0 <HAL_SPI_TransmitReceive+0x1d8>
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d003      	beq.n	80029b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029ae:	e0a7      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1a6      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x130>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1a1      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x130>
 80029c4:	e07c      	b.n	8002ac0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x1fc>
 80029ce:	8b7b      	ldrh	r3, [r7, #26]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d16b      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fa:	e057      	b.n	8002aac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11c      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x26c>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x26c>
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d114      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d119      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x2ae>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d014      	beq.n	8002a86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a82:	2301      	movs	r3, #1
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a86:	f7fe fa57 	bl	8000f38 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d803      	bhi.n	8002a9e <HAL_SPI_TransmitReceive+0x2c6>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d102      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2cc>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aaa:	e029      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1a2      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x224>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d19d      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f8f9 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002adc:	e010      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	e000      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3730      	adds	r7, #48	; 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b2c:	e04c      	b.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d048      	beq.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b36:	f7fe f9ff 	bl	8000f38 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d902      	bls.n	8002b4c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13d      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b64:	d111      	bne.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6e:	d004      	beq.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	d107      	bne.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	d10f      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e00f      	b.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d1a3      	bne.n	8002b2e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c04:	d111      	bne.n	8002c2a <SPI_EndRxTransaction+0x3a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0e:	d004      	beq.n	8002c1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d107      	bne.n	8002c2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c32:	d12a      	bne.n	8002c8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d012      	beq.n	8002c64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ff67 	bl	8002b1c <SPI_WaitFlagStateUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02d      	beq.n	8002cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e026      	b.n	8002cb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff ff54 	bl	8002b1c <SPI_WaitFlagStateUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01a      	beq.n	8002cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e013      	b.n	8002cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2101      	movs	r1, #1
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff ff41 	bl	8002b1c <SPI_WaitFlagStateUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e000      	b.n	8002cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <SPI_EndRxTxTransaction+0x7c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <SPI_EndRxTxTransaction+0x80>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce6:	d112      	bne.n	8002d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff ff12 	bl	8002b1c <SPI_WaitFlagStateUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e00f      	b.n	8002d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b80      	cmp	r3, #128	; 0x80
 8002d26:	d0f2      	beq.n	8002d0e <SPI_EndRxTxTransaction+0x52>
 8002d28:	e000      	b.n	8002d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d2a:	bf00      	nop
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000004c 	.word	0x2000004c
 8002d3c:	165e9f81 	.word	0x165e9f81

08002d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e03f      	b.n	8002dd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f004 f91a 	bl	8006fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f90b 	bl	8002fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b088      	sub	sp, #32
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	f040 8083 	bne.w	8002f02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Transmit+0x2e>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e07b      	b.n	8002f04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Transmit+0x40>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e074      	b.n	8002f04 <HAL_UART_Transmit+0x12a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2221      	movs	r2, #33	; 0x21
 8002e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e30:	f7fe f882 	bl	8000f38 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e42:	e042      	b.n	8002eca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d122      	bne.n	8002ea2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f850 	bl	8002f0c <UART_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e046      	b.n	8002f04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3302      	adds	r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	e017      	b.n	8002eca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	e013      	b.n	8002eca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f82d 	bl	8002f0c <UART_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e023      	b.n	8002f04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1b7      	bne.n	8002e44 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f814 	bl	8002f0c <UART_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e00a      	b.n	8002f04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1c:	e02c      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d028      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f2c:	f7fe f804 	bl	8000f38 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d21d      	bcs.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e00f      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d0c3      	beq.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fe0:	f023 030c 	bic.w	r3, r3, #12
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	430b      	orrs	r3, r1
 8002fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300c:	f040 80e4 	bne.w	80031d8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4aab      	ldr	r2, [pc, #684]	; (80032c4 <UART_SetConfig+0x324>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <UART_SetConfig+0x84>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4aaa      	ldr	r2, [pc, #680]	; (80032c8 <UART_SetConfig+0x328>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d16c      	bne.n	80030fe <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003024:	f7fe fea8 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8003028:	4602      	mov	r2, r0
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009a      	lsls	r2, r3, #2
 8003032:	441a      	add	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4aa3      	ldr	r2, [pc, #652]	; (80032cc <UART_SetConfig+0x32c>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	011c      	lsls	r4, r3, #4
 8003048:	f7fe fe96 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 800304c:	4602      	mov	r2, r0
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003062:	f7fe fe89 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8003066:	4602      	mov	r2, r0
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	4a93      	ldr	r2, [pc, #588]	; (80032cc <UART_SetConfig+0x32c>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2264      	movs	r2, #100	; 0x64
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	1aeb      	subs	r3, r5, r3
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	3332      	adds	r3, #50	; 0x32
 8003090:	4a8e      	ldr	r2, [pc, #568]	; (80032cc <UART_SetConfig+0x32c>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800309e:	441c      	add	r4, r3
 80030a0:	f7fe fe6a 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80030ba:	f7fe fe5d 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	4a7d      	ldr	r2, [pc, #500]	; (80032cc <UART_SetConfig+0x32c>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2264      	movs	r2, #100	; 0x64
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	1aeb      	subs	r3, r5, r3
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a78      	ldr	r2, [pc, #480]	; (80032cc <UART_SetConfig+0x32c>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4422      	add	r2, r4
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e154      	b.n	80033a8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80030fe:	f7fe fe27 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003102:	4602      	mov	r2, r0
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009a      	lsls	r2, r3, #2
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	4a6c      	ldr	r2, [pc, #432]	; (80032cc <UART_SetConfig+0x32c>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	011c      	lsls	r4, r3, #4
 8003122:	f7fe fe15 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003126:	4602      	mov	r2, r0
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fbb2 f5f3 	udiv	r5, r2, r3
 800313c:	f7fe fe08 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003140:	4602      	mov	r2, r0
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <UART_SetConfig+0x32c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2264      	movs	r2, #100	; 0x64
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	1aeb      	subs	r3, r5, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a58      	ldr	r2, [pc, #352]	; (80032cc <UART_SetConfig+0x32c>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003178:	441c      	add	r4, r3
 800317a:	f7fe fde9 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb2 f5f3 	udiv	r5, r2, r3
 8003194:	f7fe fddc 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003198:	4602      	mov	r2, r0
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009a      	lsls	r2, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	4a47      	ldr	r2, [pc, #284]	; (80032cc <UART_SetConfig+0x32c>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	2264      	movs	r2, #100	; 0x64
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	1aeb      	subs	r3, r5, r3
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3332      	adds	r3, #50	; 0x32
 80031c2:	4a42      	ldr	r2, [pc, #264]	; (80032cc <UART_SetConfig+0x32c>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	f003 0207 	and.w	r2, r3, #7
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4422      	add	r2, r4
 80031d4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80031d6:	e0e7      	b.n	80033a8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a39      	ldr	r2, [pc, #228]	; (80032c4 <UART_SetConfig+0x324>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <UART_SetConfig+0x24c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <UART_SetConfig+0x328>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d171      	bne.n	80032d0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031ec:	f7fe fdc4 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009a      	lsls	r2, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <UART_SetConfig+0x32c>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	011c      	lsls	r4, r3, #4
 8003210:	f7fe fdb2 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8003214:	4602      	mov	r2, r0
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	009a      	lsls	r2, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	fbb2 f5f3 	udiv	r5, r2, r3
 800322a:	f7fe fda5 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 800322e:	4602      	mov	r2, r0
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <UART_SetConfig+0x32c>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2264      	movs	r2, #100	; 0x64
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	1aeb      	subs	r3, r5, r3
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	3332      	adds	r3, #50	; 0x32
 8003258:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <UART_SetConfig+0x32c>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003264:	441c      	add	r4, r3
 8003266:	f7fe fd87 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 800326a:	4602      	mov	r2, r0
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009a      	lsls	r2, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003280:	f7fe fd7a 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8003284:	4602      	mov	r2, r0
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009a      	lsls	r2, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <UART_SetConfig+0x32c>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2264      	movs	r2, #100	; 0x64
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	1aeb      	subs	r3, r5, r3
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <UART_SetConfig+0x32c>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4422      	add	r2, r4
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	e071      	b.n	80033a8 <UART_SetConfig+0x408>
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032d0:	f7fe fd3e 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <UART_SetConfig+0x410>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	011c      	lsls	r4, r3, #4
 80032f4:	f7fe fd2c 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009a      	lsls	r2, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	fbb2 f5f3 	udiv	r5, r2, r3
 800330e:	f7fe fd1f 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003312:	4602      	mov	r2, r0
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009a      	lsls	r2, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <UART_SetConfig+0x410>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2264      	movs	r2, #100	; 0x64
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	1aeb      	subs	r3, r5, r3
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	3332      	adds	r3, #50	; 0x32
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <UART_SetConfig+0x410>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003348:	441c      	add	r4, r3
 800334a:	f7fe fd01 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800334e:	4602      	mov	r2, r0
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009a      	lsls	r2, r3, #2
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	fbb2 f5f3 	udiv	r5, r2, r3
 8003364:	f7fe fcf4 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003368:	4602      	mov	r2, r0
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <UART_SetConfig+0x410>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2264      	movs	r2, #100	; 0x64
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	1aeb      	subs	r3, r5, r3
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	3332      	adds	r3, #50	; 0x32
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <UART_SetConfig+0x410>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4422      	add	r2, r4
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	e7ff      	b.n	80033a8 <UART_SetConfig+0x408>
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bdb0      	pop	{r4, r5, r7, pc}
 80033b0:	51eb851f 	.word	0x51eb851f

080033b4 <SX1272BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1272BoardInit( LoRaBoardCallback_t *callbacks )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <SX1272BoardInit+0x1c>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	200001d4 	.word	0x200001d4

080033d4 <SX1272Init>:

uint32_t SX1272Init( RadioEvents_t *events )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80033dc:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <SX1272Init+0xb4>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80033e2:	492a      	ldr	r1, [pc, #168]	; (800348c <SX1272Init+0xb8>)
 80033e4:	482a      	ldr	r0, [pc, #168]	; (8003490 <SX1272Init+0xbc>)
 80033e6:	f001 fff9 	bl	80053dc <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1272OnTimeoutIrq );
 80033ea:	4928      	ldr	r1, [pc, #160]	; (800348c <SX1272Init+0xb8>)
 80033ec:	4829      	ldr	r0, [pc, #164]	; (8003494 <SX1272Init+0xc0>)
 80033ee:	f001 fff5 	bl	80053dc <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 80033f2:	4926      	ldr	r1, [pc, #152]	; (800348c <SX1272Init+0xb8>)
 80033f4:	4828      	ldr	r0, [pc, #160]	; (8003498 <SX1272Init+0xc4>)
 80033f6:	f001 fff1 	bl	80053dc <TimerInit>

    LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 80033fa:	4b28      	ldr	r3, [pc, #160]	; (800349c <SX1272Init+0xc8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2001      	movs	r0, #1
 8003402:	4798      	blx	r3

    SX1272Reset( );
 8003404:	f001 f968 	bl	80046d8 <SX1272Reset>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003408:	2000      	movs	r0, #0
 800340a:	f001 f995 	bl	8004738 <SX1272SetOpMode>

    LoRaBoardCallbacks->SX1272BoardIoIrqInit( DioIrq );
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <SX1272Init+0xc8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4822      	ldr	r0, [pc, #136]	; (80034a0 <SX1272Init+0xcc>)
 8003416:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e020      	b.n	8003460 <SX1272Init+0x8c>
    {
        SX1272SetModem( RadioRegsInit[i].Modem );
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	4920      	ldr	r1, [pc, #128]	; (80034a4 <SX1272Init+0xd0>)
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	440b      	add	r3, r1
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f001 f9b9 	bl	80047a4 <SX1272SetModem>
        SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	491b      	ldr	r1, [pc, #108]	; (80034a4 <SX1272Init+0xd0>)
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	440b      	add	r3, r1
 800343e:	3301      	adds	r3, #1
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b298      	uxth	r0, r3
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	4917      	ldr	r1, [pc, #92]	; (80034a4 <SX1272Init+0xd0>)
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	440b      	add	r3, r1
 8003450:	3302      	adds	r3, #2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	f001 f9f9 	bl	800484c <SX1272Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b10      	cmp	r3, #16
 8003464:	d9db      	bls.n	800341e <SX1272Init+0x4a>
    }

    SX1272SetModem( MODEM_FSK );
 8003466:	2000      	movs	r0, #0
 8003468:	f001 f99c 	bl	80047a4 <SX1272SetModem>

    SX1272.Settings.State = RF_IDLE;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <SX1272Init+0xd4>)
 800346e:	2200      	movs	r2, #0
 8003470:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <SX1272Init+0xc8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4798      	blx	r3
 800347a:	4603      	mov	r3, r0
 800347c:	3302      	adds	r3, #2
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200000d0 	.word	0x200000d0
 800348c:	08004a39 	.word	0x08004a39
 8003490:	200004c8 	.word	0x200004c8
 8003494:	200004f8 	.word	0x200004f8
 8003498:	200004e0 	.word	0x200004e0
 800349c:	200001d4 	.word	0x200001d4
 80034a0:	20000008 	.word	0x20000008
 80034a4:	08007cb0 	.word	0x08007cb0
 80034a8:	20000460 	.word	0x20000460

080034ac <SX1272GetStatus>:

RadioState_t SX1272GetStatus( void )
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
    return SX1272.Settings.State;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <SX1272GetStatus+0x14>)
 80034b2:	791b      	ldrb	r3, [r3, #4]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000460 	.word	0x20000460

080034c4 <SX1272SetChannel>:

void SX1272SetChannel( uint32_t freq )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1272.Settings.Channel = freq;
 80034cc:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <SX1272SetChannel+0x74>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6093      	str	r3, [r2, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <SX1272SetChannel+0x78>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0b1b      	lsrs	r3, r3, #12
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f643 5209 	movw	r2, #15625	; 0x3d09
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80034fa:	3304      	adds	r3, #4
 80034fc:	490f      	ldr	r1, [pc, #60]	; (800353c <SX1272SetChannel+0x78>)
 80034fe:	fba1 1303 	umull	r1, r3, r1, r3
 8003502:	0b1b      	lsrs	r3, r3, #12
 8003504:	4413      	add	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

    SX1272Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	2006      	movs	r0, #6
 8003512:	f001 f99b 	bl	800484c <SX1272Write>
    SX1272Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4619      	mov	r1, r3
 800351e:	2007      	movs	r0, #7
 8003520:	f001 f994 	bl	800484c <SX1272Write>
    SX1272Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	2008      	movs	r0, #8
 800352c:	f001 f98e 	bl	800484c <SX1272Write>
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000460 	.word	0x20000460
 800353c:	431bde83 	.word	0x431bde83

08003540 <SX1272IsChannelFree>:

bool SX1272IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	4603      	mov	r3, r0
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	4613      	mov	r3, r2
 8003550:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]

    if( SX1272GetStatus( ) != RF_IDLE )
 800355e:	f7ff ffa5 	bl	80034ac <SX1272GetStatus>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <SX1272IsChannelFree+0x2c>
    {
        return false;
 8003568:	2300      	movs	r3, #0
 800356a:	e029      	b.n	80035c0 <SX1272IsChannelFree+0x80>
    }

    SX1272SetModem( modem );
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f918 	bl	80047a4 <SX1272SetModem>

    SX1272SetChannel( freq );
 8003574:	68b8      	ldr	r0, [r7, #8]
 8003576:	f7ff ffa5 	bl	80034c4 <SX1272SetChannel>

    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 800357a:	2005      	movs	r0, #5
 800357c:	f001 f8dc 	bl	8004738 <SX1272SetOpMode>

    DelayMs( 1 );
 8003580:	2001      	movs	r0, #1
 8003582:	f001 fec7 	bl	8005314 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8003586:	f002 f834 	bl	80055f2 <TimerGetCurrentTime>
 800358a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800358c:	e00e      	b.n	80035ac <SX1272IsChannelFree+0x6c>
    {
        rssi = SX1272ReadRssi( modem );
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	4618      	mov	r0, r3
 8003592:	f001 f875 	bl	8004680 <SX1272ReadRssi>
 8003596:	4603      	mov	r3, r0
 8003598:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800359a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800359e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	dd02      	ble.n	80035ac <SX1272IsChannelFree+0x6c>
        {
            status = false;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
            break;
 80035aa:	e006      	b.n	80035ba <SX1272IsChannelFree+0x7a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80035ac:	6938      	ldr	r0, [r7, #16]
 80035ae:	f002 f82e 	bl	800560e <TimerGetElapsedTime>
 80035b2:	4602      	mov	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d8e9      	bhi.n	800358e <SX1272IsChannelFree+0x4e>
        }
    }
    SX1272SetSleep( );
 80035ba:	f000 fe59 	bl	8004270 <SX1272SetSleep>
    return status;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <SX1272Random>:

uint32_t SX1272Random( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1272SetModem( MODEM_LORA );
 80035d2:	2001      	movs	r0, #1
 80035d4:	f001 f8e6 	bl	80047a4 <SX1272SetModem>

    // Disable LoRa modem interrupts
    SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80035d8:	21ff      	movs	r1, #255	; 0xff
 80035da:	2011      	movs	r0, #17
 80035dc:	f001 f936 	bl	800484c <SX1272Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80035e0:	2005      	movs	r0, #5
 80035e2:	f001 f8a9 	bl	8004738 <SX1272SetOpMode>

    for( i = 0; i < 32; i++ )
 80035e6:	2300      	movs	r3, #0
 80035e8:	71fb      	strb	r3, [r7, #7]
 80035ea:	e011      	b.n	8003610 <SX1272Random+0x48>
    {
        DelayMs( 1 );
 80035ec:	2001      	movs	r0, #1
 80035ee:	f001 fe91 	bl	8005314 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1272Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80035f2:	202c      	movs	r0, #44	; 0x2c
 80035f4:	f001 f93c 	bl	8004870 <SX1272Read>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 0201 	and.w	r2, r3, #1
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	3301      	adds	r3, #1
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	2b1f      	cmp	r3, #31
 8003614:	d9ea      	bls.n	80035ec <SX1272Random+0x24>
    }

    SX1272SetSleep( );
 8003616:	f000 fe2b 	bl	8004270 <SX1272SetSleep>

    return rnd;
 800361a:	683b      	ldr	r3, [r7, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e017      	b.n	8003662 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	4a10      	ldr	r2, [pc, #64]	; (8003678 <GetFskBandwidthRegValue+0x54>)
 8003636:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d30d      	bcc.n	800365c <GetFskBandwidthRegValue+0x38>
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	3301      	adds	r3, #1
 8003644:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <GetFskBandwidthRegValue+0x54>)
 8003646:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d205      	bcs.n	800365c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <GetFskBandwidthRegValue+0x54>)
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	791b      	ldrb	r3, [r3, #4]
 800365a:	e006      	b.n	800366a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	3301      	adds	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b14      	cmp	r3, #20
 8003666:	d9e4      	bls.n	8003632 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8003668:	e7fe      	b.n	8003668 <GetFskBandwidthRegValue+0x44>
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	08007ce4 	.word	0x08007ce4
 800367c:	00000000 	.word	0x00000000

08003680 <SX1272SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	4613      	mov	r3, r2
 8003692:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4618      	mov	r0, r3
 8003698:	f001 f884 	bl	80047a4 <SX1272SetModem>

    switch( modem )
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <SX1272SetRxConfig+0x2a>
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f000 80cf 	beq.w	8003846 <SX1272SetRxConfig+0x1c6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80036a8:	e1cb      	b.n	8003a42 <SX1272SetRxConfig+0x3c2>
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 80036aa:	4a91      	ldr	r2, [pc, #580]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6153      	str	r3, [r2, #20]
            SX1272.Settings.Fsk.Datarate = datarate;
 80036b0:	4a8f      	ldr	r2, [pc, #572]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	61d3      	str	r3, [r2, #28]
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80036b6:	4a8e      	ldr	r2, [pc, #568]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	6193      	str	r3, [r2, #24]
            SX1272.Settings.Fsk.FixLen = fixLen;
 80036bc:	4a8c      	ldr	r2, [pc, #560]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036c2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1272.Settings.Fsk.PayloadLen = payloadLen;
 80036c6:	4a8a      	ldr	r2, [pc, #552]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80036cc:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            SX1272.Settings.Fsk.CrcOn = crcOn;
 80036d0:	4a87      	ldr	r2, [pc, #540]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 80036da:	4a85      	ldr	r2, [pc, #532]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80036e0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 80036e4:	4a82      	ldr	r2, [pc, #520]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036ea:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 80036ee:	4a80      	ldr	r2, [pc, #512]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80036f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036f2:	8413      	strh	r3, [r2, #32]
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80036f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff14 	bl	8000524 <__aeabi_i2d>
 80036fc:	4604      	mov	r4, r0
 80036fe:	460d      	mov	r5, r1
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fc feff 	bl	8000504 <__aeabi_ui2d>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	f04f 0000 	mov.w	r0, #0
 800370e:	4979      	ldr	r1, [pc, #484]	; (80038f4 <SX1272SetRxConfig+0x274>)
 8003710:	f7fd f89c 	bl	800084c <__aeabi_ddiv>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	4b75      	ldr	r3, [pc, #468]	; (80038f8 <SX1272SetRxConfig+0x278>)
 8003722:	f7fc ff69 	bl	80005f8 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4620      	mov	r0, r4
 800372c:	4629      	mov	r1, r5
 800372e:	f7fc ff63 	bl	80005f8 <__aeabi_dmul>
 8003732:	4603      	mov	r3, r0
 8003734:	460c      	mov	r4, r1
 8003736:	4618      	mov	r0, r3
 8003738:	4621      	mov	r1, r4
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <SX1272SetRxConfig+0x27c>)
 8003740:	f7fc ff5a 	bl	80005f8 <__aeabi_dmul>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	f7fd f9ee 	bl	8000b2c <__aeabi_d2uiz>
 8003750:	4602      	mov	r2, r0
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003754:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fc fed4 	bl	8000504 <__aeabi_ui2d>
 800375c:	4603      	mov	r3, r0
 800375e:	460c      	mov	r4, r1
 8003760:	461a      	mov	r2, r3
 8003762:	4623      	mov	r3, r4
 8003764:	a160      	add	r1, pc, #384	; (adr r1, 80038e8 <SX1272SetRxConfig+0x268>)
 8003766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800376a:	f7fd f86f 	bl	800084c <__aeabi_ddiv>
 800376e:	4603      	mov	r3, r0
 8003770:	460c      	mov	r4, r1
 8003772:	4618      	mov	r0, r3
 8003774:	4621      	mov	r1, r4
 8003776:	f7fd f9d9 	bl	8000b2c <__aeabi_d2uiz>
 800377a:	4603      	mov	r3, r0
 800377c:	b29b      	uxth	r3, r3
 800377e:	607b      	str	r3, [r7, #4]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	2002      	movs	r0, #2
 800378a:	f001 f85f 	bl	800484c <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4619      	mov	r1, r3
 8003794:	2003      	movs	r0, #3
 8003796:	f001 f859 	bl	800484c <SX1272Write>
            SX1272Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800379a:	68b8      	ldr	r0, [r7, #8]
 800379c:	f7ff ff42 	bl	8003624 <GetFskBandwidthRegValue>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4619      	mov	r1, r3
 80037a4:	2012      	movs	r0, #18
 80037a6:	f001 f851 	bl	800484c <SX1272Write>
            SX1272Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80037aa:	6a38      	ldr	r0, [r7, #32]
 80037ac:	f7ff ff3a 	bl	8003624 <GetFskBandwidthRegValue>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4619      	mov	r1, r3
 80037b4:	2013      	movs	r0, #19
 80037b6:	f001 f849 	bl	800484c <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80037ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b29b      	uxth	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4619      	mov	r1, r3
 80037c4:	2025      	movs	r0, #37	; 0x25
 80037c6:	f001 f841 	bl	800484c <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80037ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	2026      	movs	r0, #38	; 0x26
 80037d2:	f001 f83b 	bl	800484c <SX1272Write>
            if( fixLen == 1 )
 80037d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <SX1272SetRxConfig+0x16c>
                SX1272Write( REG_PAYLOADLENGTH, payloadLen );
 80037de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80037e2:	4619      	mov	r1, r3
 80037e4:	2032      	movs	r0, #50	; 0x32
 80037e6:	f001 f831 	bl	800484c <SX1272Write>
 80037ea:	e003      	b.n	80037f4 <SX1272SetRxConfig+0x174>
                SX1272Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80037ec:	21ff      	movs	r1, #255	; 0xff
 80037ee:	2032      	movs	r0, #50	; 0x32
 80037f0:	f001 f82c 	bl	800484c <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 80037f4:	2030      	movs	r0, #48	; 0x30
 80037f6:	f001 f83b 	bl	8004870 <SX1272Read>
 80037fa:	4603      	mov	r3, r0
 80037fc:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80037fe:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003802:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003804:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003808:	2a00      	cmp	r2, #0
 800380a:	d001      	beq.n	8003810 <SX1272SetRxConfig+0x190>
 800380c:	2200      	movs	r2, #0
 800380e:	e001      	b.n	8003814 <SX1272SetRxConfig+0x194>
 8003810:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003814:	4313      	orrs	r3, r2
 8003816:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003818:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800381c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800381e:	b25b      	sxtb	r3, r3
 8003820:	4313      	orrs	r3, r2
 8003822:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	2030      	movs	r0, #48	; 0x30
 800382a:	f001 f80f 	bl	800484c <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800382e:	2031      	movs	r0, #49	; 0x31
 8003830:	f001 f81e 	bl	8004870 <SX1272Read>
 8003834:	4603      	mov	r3, r0
 8003836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383a:	b2db      	uxtb	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	2031      	movs	r0, #49	; 0x31
 8003840:	f001 f804 	bl	800484c <SX1272Write>
        break;
 8003844:	e0fd      	b.n	8003a42 <SX1272SetRxConfig+0x3c2>
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6453      	str	r3, [r2, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <SX1272SetRxConfig+0x270>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6493      	str	r3, [r2, #72]	; 0x48
            SX1272.Settings.LoRa.Coderate = coderate;
 8003852:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003854:	7bbb      	ldrb	r3, [r7, #14]
 8003856:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 800385a:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <SX1272SetRxConfig+0x270>)
 800385c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800385e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1272.Settings.LoRa.FixLen = fixLen;
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003864:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003868:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1272.Settings.LoRa.PayloadLen = payloadLen;
 800386c:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <SX1272SetRxConfig+0x270>)
 800386e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003872:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003878:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800387c:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003882:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003886:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <SX1272SetRxConfig+0x270>)
 800388c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003890:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <SX1272SetRxConfig+0x270>)
 8003896:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800389a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80038a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80038a4:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
            if( datarate > 12 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d902      	bls.n	80038b4 <SX1272SetRxConfig+0x234>
                datarate = 12;
 80038ae:	230c      	movs	r3, #12
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	e004      	b.n	80038be <SX1272SetRxConfig+0x23e>
            else if( datarate < 6 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d801      	bhi.n	80038be <SX1272SetRxConfig+0x23e>
                datarate = 6;
 80038ba:	2306      	movs	r3, #6
 80038bc:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <SX1272SetRxConfig+0x250>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b0b      	cmp	r3, #11
 80038c8:	d008      	beq.n	80038dc <SX1272SetRxConfig+0x25c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d005      	beq.n	80038dc <SX1272SetRxConfig+0x25c>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d114      	bne.n	8003900 <SX1272SetRxConfig+0x280>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d111      	bne.n	8003900 <SX1272SetRxConfig+0x280>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <SX1272SetRxConfig+0x270>)
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80038e4:	e010      	b.n	8003908 <SX1272SetRxConfig+0x288>
 80038e6:	bf00      	nop
 80038e8:	00000000 	.word	0x00000000
 80038ec:	417e8480 	.word	0x417e8480
 80038f0:	20000460 	.word	0x20000460
 80038f4:	3ff00000 	.word	0x3ff00000
 80038f8:	40200000 	.word	0x40200000
 80038fc:	408f4000 	.word	0x408f4000
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003900:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <SX1272SetRxConfig+0x3cc>)
 8003902:	2200      	movs	r2, #0
 8003904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8003908:	201d      	movs	r0, #29
 800390a:	f000 ffb1 	bl	8004870 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	019b      	lsls	r3, r3, #6
 8003914:	b2da      	uxtb	r2, r3
 8003916:	7bbb      	ldrb	r3, [r7, #14]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003920:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003928:	4313      	orrs	r3, r2
 800392a:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 800392c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8003938:	4a44      	ldr	r2, [pc, #272]	; (8003a4c <SX1272SetRxConfig+0x3cc>)
 800393a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 800393e:	4313      	orrs	r3, r2
 8003940:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003942:	4619      	mov	r1, r3
 8003944:	201d      	movs	r0, #29
 8003946:	f000 ff81 	bl	800484c <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 800394a:	201e      	movs	r0, #30
 800394c:	f000 ff90 	bl	8004870 <SX1272Read>
 8003950:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8003960:	4313      	orrs	r3, r2
 8003962:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003964:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b29b      	uxth	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8003972:	4313      	orrs	r3, r2
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	201e      	movs	r0, #30
 800397a:	f000 ff67 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800397e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	201f      	movs	r0, #31
 8003986:	f000 ff61 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800398a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	b29b      	uxth	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4619      	mov	r1, r3
 8003994:	2020      	movs	r0, #32
 8003996:	f000 ff59 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800399a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	2021      	movs	r0, #33	; 0x21
 80039a2:	f000 ff53 	bl	800484c <SX1272Write>
            if( fixLen == 1 )
 80039a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <SX1272SetRxConfig+0x33a>
                SX1272Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80039ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80039b2:	4619      	mov	r1, r3
 80039b4:	2022      	movs	r0, #34	; 0x22
 80039b6:	f000 ff49 	bl	800484c <SX1272Write>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <SX1272SetRxConfig+0x3cc>)
 80039bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d011      	beq.n	80039e8 <SX1272SetRxConfig+0x368>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80039c4:	204b      	movs	r0, #75	; 0x4b
 80039c6:	f000 ff53 	bl	8004870 <SX1272Read>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	204b      	movs	r0, #75	; 0x4b
 80039d6:	f000 ff39 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <SX1272SetRxConfig+0x3cc>)
 80039dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039e0:	4619      	mov	r1, r3
 80039e2:	2024      	movs	r0, #36	; 0x24
 80039e4:	f000 ff32 	bl	800484c <SX1272Write>
            if( datarate == 6 )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d114      	bne.n	8003a18 <SX1272SetRxConfig+0x398>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 80039ee:	2031      	movs	r0, #49	; 0x31
 80039f0:	f000 ff3e 	bl	8004870 <SX1272Read>
 80039f4:	4603      	mov	r3, r0
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	f023 0307 	bic.w	r3, r3, #7
 80039fc:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80039fe:	f043 0305 	orr.w	r3, r3, #5
 8003a02:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	2031      	movs	r0, #49	; 0x31
 8003a0a:	f000 ff1f 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003a0e:	210c      	movs	r1, #12
 8003a10:	2037      	movs	r0, #55	; 0x37
 8003a12:	f000 ff1b 	bl	800484c <SX1272Write>
        break;
 8003a16:	e013      	b.n	8003a40 <SX1272SetRxConfig+0x3c0>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003a18:	2031      	movs	r0, #49	; 0x31
 8003a1a:	f000 ff29 	bl	8004870 <SX1272Read>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003a28:	f043 0303 	orr.w	r3, r3, #3
 8003a2c:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	2031      	movs	r0, #49	; 0x31
 8003a34:	f000 ff0a 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003a38:	210a      	movs	r1, #10
 8003a3a:	2037      	movs	r0, #55	; 0x37
 8003a3c:	f000 ff06 	bl	800484c <SX1272Write>
        break;
 8003a40:	bf00      	nop
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000460 	.word	0x20000460

08003a50 <SX1272SetTxConfig>:
void SX1272SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fe9d 	bl	80047a4 <SX1272SetModem>

    LoRaBoardCallbacks->SX1272BoardSetRfTxPower( power );
 8003a6a:	4bb9      	ldr	r3, [pc, #740]	; (8003d50 <SX1272SetTxConfig+0x300>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3

    switch( modem )
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <SX1272SetTxConfig+0x36>
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	f000 8099 	beq.w	8003bb6 <SX1272SetTxConfig+0x166>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003a84:	e17d      	b.n	8003d82 <SX1272SetTxConfig+0x332>
            SX1272.Settings.Fsk.Power = power;
 8003a86:	4ab3      	ldr	r2, [pc, #716]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	7313      	strb	r3, [r2, #12]
            SX1272.Settings.Fsk.Fdev = fdev;
 8003a8c:	4ab1      	ldr	r2, [pc, #708]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6113      	str	r3, [r2, #16]
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8003a92:	4ab0      	ldr	r2, [pc, #704]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6153      	str	r3, [r2, #20]
            SX1272.Settings.Fsk.Datarate = datarate;
 8003a98:	4aae      	ldr	r2, [pc, #696]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	61d3      	str	r3, [r2, #28]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8003a9e:	4aad      	ldr	r2, [pc, #692]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003aa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003aa2:	8413      	strh	r3, [r2, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8003aa4:	4aab      	ldr	r2, [pc, #684]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003aa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003aaa:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8003aae:	4aa9      	ldr	r2, [pc, #676]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003ab0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ab4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8003ab8:	4aa6      	ldr	r2, [pc, #664]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003aba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003abe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8003ac2:	4aa4      	ldr	r2, [pc, #656]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	6293      	str	r3, [r2, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8003ac8:	68b8      	ldr	r0, [r7, #8]
 8003aca:	f7fc fd1b 	bl	8000504 <__aeabi_ui2d>
 8003ace:	a39c      	add	r3, pc, #624	; (adr r3, 8003d40 <SX1272SetTxConfig+0x2f0>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f7fc feba 	bl	800084c <__aeabi_ddiv>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4618      	mov	r0, r3
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f7fd f824 	bl	8000b2c <__aeabi_d2uiz>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
            SX1272Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	2004      	movs	r0, #4
 8003af4:	f000 feaa 	bl	800484c <SX1272Write>
            SX1272Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	2005      	movs	r0, #5
 8003b00:	f000 fea4 	bl	800484c <SX1272Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003b04:	6a38      	ldr	r0, [r7, #32]
 8003b06:	f7fc fcfd 	bl	8000504 <__aeabi_ui2d>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4623      	mov	r3, r4
 8003b12:	a18d      	add	r1, pc, #564	; (adr r1, 8003d48 <SX1272SetTxConfig+0x2f8>)
 8003b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b18:	f7fc fe98 	bl	800084c <__aeabi_ddiv>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	460c      	mov	r4, r1
 8003b20:	4618      	mov	r0, r3
 8003b22:	4621      	mov	r1, r4
 8003b24:	f7fd f802 	bl	8000b2c <__aeabi_d2uiz>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	623b      	str	r3, [r7, #32]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	4619      	mov	r1, r3
 8003b36:	2002      	movs	r0, #2
 8003b38:	f000 fe88 	bl	800484c <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	2003      	movs	r0, #3
 8003b44:	f000 fe82 	bl	800484c <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003b48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	2025      	movs	r0, #37	; 0x25
 8003b54:	f000 fe7a 	bl	800484c <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8003b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	2026      	movs	r0, #38	; 0x26
 8003b60:	f000 fe74 	bl	800484c <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8003b64:	2030      	movs	r0, #48	; 0x30
 8003b66:	f000 fe83 	bl	8004870 <SX1272Read>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8003b6e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003b72:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003b74:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d001      	beq.n	8003b80 <SX1272SetTxConfig+0x130>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	e001      	b.n	8003b84 <SX1272SetTxConfig+0x134>
 8003b80:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003b88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b8c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	4313      	orrs	r3, r2
 8003b92:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4619      	mov	r1, r3
 8003b98:	2030      	movs	r0, #48	; 0x30
 8003b9a:	f000 fe57 	bl	800484c <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003b9e:	2031      	movs	r0, #49	; 0x31
 8003ba0:	f000 fe66 	bl	8004870 <SX1272Read>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4619      	mov	r1, r3
 8003bae:	2031      	movs	r0, #49	; 0x31
 8003bb0:	f000 fe4c 	bl	800484c <SX1272Write>
        break;
 8003bb4:	e0e5      	b.n	8003d82 <SX1272SetTxConfig+0x332>
            SX1272.Settings.LoRa.Power = power;
 8003bb6:	4a67      	ldr	r2, [pc, #412]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8003bbe:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6453      	str	r3, [r2, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8003bc4:	4a63      	ldr	r2, [pc, #396]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	6493      	str	r3, [r2, #72]	; 0x48
            SX1272.Settings.LoRa.Coderate = coderate;
 8003bca:	4a62      	ldr	r2, [pc, #392]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bd0:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8003bd4:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bd8:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1272.Settings.LoRa.FixLen = fixLen;
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003be2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8003be6:	4a5b      	ldr	r2, [pc, #364]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003be8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bec:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bf2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003bf6:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8003bfa:	4a56      	ldr	r2, [pc, #344]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003bfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c00:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8003c04:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003c06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003c0a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8003c0e:	4a51      	ldr	r2, [pc, #324]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c12:	6593      	str	r3, [r2, #88]	; 0x58
            if( datarate > 12 )
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d902      	bls.n	8003c20 <SX1272SetTxConfig+0x1d0>
                datarate = 12;
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	623b      	str	r3, [r7, #32]
 8003c1e:	e004      	b.n	8003c2a <SX1272SetTxConfig+0x1da>
            else if( datarate < 6 )
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d801      	bhi.n	8003c2a <SX1272SetTxConfig+0x1da>
                datarate = 6;
 8003c26:	2306      	movs	r3, #6
 8003c28:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <SX1272SetTxConfig+0x1ec>
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	2b0b      	cmp	r3, #11
 8003c34:	d008      	beq.n	8003c48 <SX1272SetTxConfig+0x1f8>
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d005      	beq.n	8003c48 <SX1272SetTxConfig+0x1f8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d107      	bne.n	8003c52 <SX1272SetTxConfig+0x202>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d104      	bne.n	8003c52 <SX1272SetTxConfig+0x202>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003c48:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003c50:	e003      	b.n	8003c5a <SX1272SetTxConfig+0x20a>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003c52:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003c5c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d011      	beq.n	8003c88 <SX1272SetTxConfig+0x238>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003c64:	204b      	movs	r0, #75	; 0x4b
 8003c66:	f000 fe03 	bl	8004870 <SX1272Read>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4619      	mov	r1, r3
 8003c74:	204b      	movs	r0, #75	; 0x4b
 8003c76:	f000 fde9 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8003c7a:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003c7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003c80:	4619      	mov	r1, r3
 8003c82:	2024      	movs	r0, #36	; 0x24
 8003c84:	f000 fde2 	bl	800484c <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8003c88:	201d      	movs	r0, #29
 8003c8a:	f000 fdf1 	bl	8004870 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	019b      	lsls	r3, r3, #6
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003ca2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003cae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <SX1272SetTxConfig+0x304>)
 8003cbc:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	201d      	movs	r0, #29
 8003cc8:	f000 fdc0 	bl	800484c <SX1272Write>
                        ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8003ccc:	201e      	movs	r0, #30
 8003cce:	f000 fdcf 	bl	8004870 <SX1272Read>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
                          ( datarate << 4 ) );
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	201e      	movs	r0, #30
 8003cea:	f000 fdaf 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	2020      	movs	r0, #32
 8003cfa:	f000 fda7 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8003cfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	2021      	movs	r0, #33	; 0x21
 8003d06:	f000 fda1 	bl	800484c <SX1272Write>
            if( datarate == 6 )
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d123      	bne.n	8003d58 <SX1272SetTxConfig+0x308>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003d10:	2031      	movs	r0, #49	; 0x31
 8003d12:	f000 fdad 	bl	8004870 <SX1272Read>
 8003d16:	4603      	mov	r3, r0
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	f023 0307 	bic.w	r3, r3, #7
 8003d1e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003d20:	f043 0305 	orr.w	r3, r3, #5
 8003d24:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	2031      	movs	r0, #49	; 0x31
 8003d2c:	f000 fd8e 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003d30:	210c      	movs	r1, #12
 8003d32:	2037      	movs	r0, #55	; 0x37
 8003d34:	f000 fd8a 	bl	800484c <SX1272Write>
        break;
 8003d38:	e022      	b.n	8003d80 <SX1272SetTxConfig+0x330>
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	00000000 	.word	0x00000000
 8003d44:	404e8480 	.word	0x404e8480
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	417e8480 	.word	0x417e8480
 8003d50:	200001d4 	.word	0x200001d4
 8003d54:	20000460 	.word	0x20000460
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8003d58:	2031      	movs	r0, #49	; 0x31
 8003d5a:	f000 fd89 	bl	8004870 <SX1272Read>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003d68:	f043 0303 	orr.w	r3, r3, #3
 8003d6c:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	2031      	movs	r0, #49	; 0x31
 8003d74:	f000 fd6a 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8003d78:	210a      	movs	r1, #10
 8003d7a:	2037      	movs	r0, #55	; 0x37
 8003d7c:	f000 fd66 	bl	800484c <SX1272Write>
        break;
 8003d80:	bf00      	nop
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	0000      	movs	r0, r0
	...

08003d90 <SX1272GetTimeOnAir>:

uint32_t SX1272GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	b095      	sub	sp, #84	; 0x54
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	460a      	mov	r2, r1
 8003d9a:	71fb      	strb	r3, [r7, #7]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <SX1272GetTimeOnAir+0x22>
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f000 8092 	beq.w	8003ed4 <SX1272GetTimeOnAir+0x144>
 8003db0:	e1a0      	b.n	80040f4 <SX1272GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003db2:	4bad      	ldr	r3, [pc, #692]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003db4:	8c1b      	ldrh	r3, [r3, #32]
 8003db6:	461c      	mov	r4, r3
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003db8:	2027      	movs	r0, #39	; 0x27
 8003dba:	f000 fd59 	bl	8004870 <SX1272Read>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003dc4:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003dc6:	4423      	add	r3, r4
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fbab 	bl	8000524 <__aeabi_i2d>
 8003dce:	4604      	mov	r4, r0
 8003dd0:	460d      	mov	r5, r1
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003dd2:	4ba5      	ldr	r3, [pc, #660]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003dd4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <SX1272GetTimeOnAir+0x56>
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	e002      	b.n	8003dec <SX1272GetTimeOnAir+0x5c>
 8003de6:	f04f 0000 	mov.w	r0, #0
 8003dea:	49a0      	ldr	r1, [pc, #640]	; (800406c <SX1272GetTimeOnAir+0x2dc>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003dec:	4622      	mov	r2, r4
 8003dee:	462b      	mov	r3, r5
 8003df0:	f7fc fa4c 	bl	800028c <__adddf3>
 8003df4:	4603      	mov	r3, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4625      	mov	r5, r4
 8003dfa:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003dfc:	2030      	movs	r0, #48	; 0x30
 8003dfe:	f000 fd37 	bl	8004870 <SX1272Read>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <SX1272GetTimeOnAir+0x84>
 8003e0c:	f04f 0000 	mov.w	r0, #0
 8003e10:	4996      	ldr	r1, [pc, #600]	; (800406c <SX1272GetTimeOnAir+0x2dc>)
 8003e12:	e003      	b.n	8003e1c <SX1272GetTimeOnAir+0x8c>
 8003e14:	f04f 0000 	mov.w	r0, #0
 8003e18:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	462b      	mov	r3, r5
 8003e20:	f7fc fa34 	bl	800028c <__adddf3>
 8003e24:	4603      	mov	r3, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	4625      	mov	r5, r4
 8003e2a:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003e2c:	79bb      	ldrb	r3, [r7, #6]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fb78 	bl	8000524 <__aeabi_i2d>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc fa26 	bl	800028c <__adddf3>
 8003e40:	4603      	mov	r3, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4625      	mov	r5, r4
 8003e46:	461c      	mov	r4, r3
                                     pktLen +
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003e48:	4b87      	ldr	r3, [pc, #540]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <SX1272GetTimeOnAir+0xcc>
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e5a:	e003      	b.n	8003e64 <SX1272GetTimeOnAir+0xd4>
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8003e64:	4622      	mov	r2, r4
 8003e66:	462b      	mov	r3, r5
 8003e68:	f7fc fa10 	bl	800028c <__adddf3>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	4618      	mov	r0, r3
 8003e72:	4621      	mov	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	4b7d      	ldr	r3, [pc, #500]	; (8004070 <SX1272GetTimeOnAir+0x2e0>)
 8003e7a:	f7fc fbbd 	bl	80005f8 <__aeabi_dmul>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	4625      	mov	r5, r4
 8003e84:	461c      	mov	r4, r3
                                     SX1272.Settings.Fsk.Datarate ) * 1000 );
 8003e86:	4b78      	ldr	r3, [pc, #480]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003e88:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fb3a 	bl	8000504 <__aeabi_ui2d>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc fcd8 	bl	800084c <__aeabi_ddiv>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	4621      	mov	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	4b72      	ldr	r3, [pc, #456]	; (8004074 <SX1272GetTimeOnAir+0x2e4>)
 8003eaa:	f7fc fba5 	bl	80005f8 <__aeabi_dmul>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	ec44 3b17 	vmov	d7, r3, r4
 8003eb6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eba:	eef0 0a67 	vmov.f32	s1, s15
 8003ebe:	f003 fe57 	bl	8007b70 <round>
 8003ec2:	ec54 3b10 	vmov	r3, r4, d0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f7fc fe2f 	bl	8000b2c <__aeabi_d2uiz>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8003ed2:	e10f      	b.n	80040f4 <SX1272GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f04f 0400 	mov.w	r4, #0
 8003edc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            switch( SX1272.Settings.LoRa.Bandwidth )
 8003ee0:	4b61      	ldr	r3, [pc, #388]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d00a      	beq.n	8003efe <SX1272GetTimeOnAir+0x16e>
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d302      	bcc.n	8003ef2 <SX1272GetTimeOnAir+0x162>
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d00c      	beq.n	8003f0a <SX1272GetTimeOnAir+0x17a>
 8003ef0:	e011      	b.n	8003f16 <SX1272GetTimeOnAir+0x186>
            {
            case 0: // 125 kHz
                bw = 125000;
 8003ef2:	a457      	add	r4, pc, #348	; (adr r4, 8004050 <SX1272GetTimeOnAir+0x2c0>)
 8003ef4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003ef8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003efc:	e00b      	b.n	8003f16 <SX1272GetTimeOnAir+0x186>
            case 1: // 250 kHz
                bw = 250000;
 8003efe:	a456      	add	r4, pc, #344	; (adr r4, 8004058 <SX1272GetTimeOnAir+0x2c8>)
 8003f00:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f04:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003f08:	e005      	b.n	8003f16 <SX1272GetTimeOnAir+0x186>
            case 2: // 500 kHz
                bw = 500000;
 8003f0a:	a455      	add	r4, pc, #340	; (adr r4, 8004060 <SX1272GetTimeOnAir+0x2d0>)
 8003f0c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f10:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003f14:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc faff 	bl	8000524 <__aeabi_i2d>
 8003f26:	4603      	mov	r3, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003f32:	f7fc fc8b 	bl	800084c <__aeabi_ddiv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
            double ts = 1 / rs;
 8003f3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	4949      	ldr	r1, [pc, #292]	; (800406c <SX1272GetTimeOnAir+0x2dc>)
 8003f48:	f7fc fc80 	bl	800084c <__aeabi_ddiv>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8003f54:	4b44      	ldr	r3, [pc, #272]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003f56:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc fae2 	bl	8000524 <__aeabi_i2d>
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	4b44      	ldr	r3, [pc, #272]	; (8004078 <SX1272GetTimeOnAir+0x2e8>)
 8003f66:	f7fc f991 	bl	800028c <__adddf3>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4623      	mov	r3, r4
 8003f72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f76:	f7fc fb3f 	bl	80005f8 <__aeabi_dmul>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003f82:	79bb      	ldrb	r3, [r7, #6]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b37      	ldr	r3, [pc, #220]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 8003f90:	4a35      	ldr	r2, [pc, #212]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003f92:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8003f96:	0112      	lsls	r2, r2, #4
 8003f98:	441a      	add	r2, r3
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8003f9a:	4b33      	ldr	r3, [pc, #204]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SX1272GetTimeOnAir+0x218>
 8003fa4:	2314      	movs	r3, #20
 8003fa6:	e000      	b.n	8003faa <SX1272GetTimeOnAir+0x21a>
 8003fa8:	2300      	movs	r3, #0
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc faa8 	bl	8000504 <__aeabi_ui2d>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003fbe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <SX1272GetTimeOnAir+0x23a>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e000      	b.n	8003fcc <SX1272GetTimeOnAir+0x23c>
 8003fca:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fa97 	bl	8000504 <__aeabi_ui2d>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc fc35 	bl	800084c <__aeabi_ddiv>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	ec44 3b17 	vmov	d7, r3, r4
 8003fea:	eeb0 0a47 	vmov.f32	s0, s14
 8003fee:	eef0 0a67 	vmov.f32	s1, s15
 8003ff2:	f003 fcb9 	bl	8007968 <ceil>
 8003ff6:	ec56 5b10 	vmov	r5, r6, d0
                                 ( SX1272.Settings.LoRa.Coderate + 4 );
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <SX1272GetTimeOnAir+0x2d8>)
 8003ffc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004000:	3304      	adds	r3, #4
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fa8e 	bl	8000524 <__aeabi_i2d>
 8004008:	4603      	mov	r3, r0
 800400a:	460c      	mov	r4, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800400c:	461a      	mov	r2, r3
 800400e:	4623      	mov	r3, r4
 8004010:	4628      	mov	r0, r5
 8004012:	4631      	mov	r1, r6
 8004014:	f7fc faf0 	bl	80005f8 <__aeabi_dmul>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	e9c7 3408 	strd	r3, r4, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800402c:	f7fc fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d022      	beq.n	800407c <SX1272GetTimeOnAir+0x2ec>
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <SX1272GetTimeOnAir+0x2e0>)
 800403c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004040:	f7fc f924 	bl	800028c <__adddf3>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	e01b      	b.n	8004082 <SX1272GetTimeOnAir+0x2f2>
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w
 8004050:	00000000 	.word	0x00000000
 8004054:	40fe8480 	.word	0x40fe8480
 8004058:	00000000 	.word	0x00000000
 800405c:	410e8480 	.word	0x410e8480
 8004060:	00000000 	.word	0x00000000
 8004064:	411e8480 	.word	0x411e8480
 8004068:	20000460 	.word	0x20000460
 800406c:	3ff00000 	.word	0x3ff00000
 8004070:	40200000 	.word	0x40200000
 8004074:	408f4000 	.word	0x408f4000
 8004078:	40110000 	.word	0x40110000
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	4c21      	ldr	r4, [pc, #132]	; (8004108 <SX1272GetTimeOnAir+0x378>)
 8004082:	e9c7 3406 	strd	r3, r4, [r7, #24]
            double tPayload = nPayload * ts;
 8004086:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800408a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800408e:	f7fc fab3 	bl	80005f8 <__aeabi_dmul>
 8004092:	4603      	mov	r3, r0
 8004094:	460c      	mov	r4, r1
 8004096:	e9c7 3404 	strd	r3, r4, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800409a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800409e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040a2:	f7fc f8f3 	bl	800028c <__adddf3>
 80040a6:	4603      	mov	r3, r0
 80040a8:	460c      	mov	r4, r1
 80040aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <SX1272GetTimeOnAir+0x37c>)
 80040b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040b8:	f7fc fa9e 	bl	80005f8 <__aeabi_dmul>
 80040bc:	4603      	mov	r3, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	4618      	mov	r0, r3
 80040c2:	4621      	mov	r1, r4
 80040c4:	a30e      	add	r3, pc, #56	; (adr r3, 8004100 <SX1272GetTimeOnAir+0x370>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f7fc f8df 	bl	800028c <__adddf3>
 80040ce:	4603      	mov	r3, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	ec44 3b17 	vmov	d7, r3, r4
 80040d6:	eeb0 0a47 	vmov.f32	s0, s14
 80040da:	eef0 0a67 	vmov.f32	s1, s15
 80040de:	f003 fcc3 	bl	8007a68 <floor>
 80040e2:	ec54 3b10 	vmov	r3, r4, d0
 80040e6:	4618      	mov	r0, r3
 80040e8:	4621      	mov	r1, r4
 80040ea:	f7fc fd1f 	bl	8000b2c <__aeabi_d2uiz>
 80040ee:	4603      	mov	r3, r0
 80040f0:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80040f2:	bf00      	nop
    }
    return airTime;
 80040f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3754      	adds	r7, #84	; 0x54
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fe:	bf00      	nop
 8004100:	d916872b 	.word	0xd916872b
 8004104:	3feff7ce 	.word	0x3feff7ce
 8004108:	40200000 	.word	0x40200000
 800410c:	408f4000 	.word	0x408f4000

08004110 <SX1272Send>:

void SX1272Send( uint8_t *buffer, uint8_t size )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

    switch( SX1272.Settings.Modem )
 8004120:	4b51      	ldr	r3, [pc, #324]	; (8004268 <SX1272Send+0x158>)
 8004122:	795b      	ldrb	r3, [r3, #5]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <SX1272Send+0x1e>
 8004128:	2b01      	cmp	r3, #1
 800412a:	d045      	beq.n	80041b8 <SX1272Send+0xa8>
 800412c:	e094      	b.n	8004258 <SX1272Send+0x148>
    {
    case MODEM_FSK:
        {
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 800412e:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <SX1272Send+0x158>)
 8004130:	2200      	movs	r2, #0
 8004132:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = size;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	b29a      	uxth	r2, r3
 8004138:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <SX1272Send+0x158>)
 800413a:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1272.Settings.Fsk.FixLen == false )
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <SX1272Send+0x158>)
 800413e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <SX1272Send+0x48>
            {
                SX1272WriteFifo( ( uint8_t* )&size, 1 );
 800414c:	1cfb      	adds	r3, r7, #3
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fc05 	bl	8004960 <SX1272WriteFifo>
 8004156:	e004      	b.n	8004162 <SX1272Send+0x52>
            }
            else
            {
                SX1272Write( REG_PAYLOADLENGTH, size );
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	4619      	mov	r1, r3
 800415c:	2032      	movs	r0, #50	; 0x32
 800415e:	f000 fb75 	bl	800484c <SX1272Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <SX1272Send+0x68>
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d804      	bhi.n	8004178 <SX1272Send+0x68>
            {
                SX1272.Settings.FskPacketHandler.ChunkSize = size;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <SX1272Send+0x158>)
 8004172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004176:	e00a      	b.n	800418e <SX1272Send+0x7e>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	483a      	ldr	r0, [pc, #232]	; (800426c <SX1272Send+0x15c>)
 8004182:	f001 faef 	bl	8005764 <memcpy1>
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <SX1272Send+0x158>)
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
            }

            // Write payload buffer
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <SX1272Send+0x158>)
 8004190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fbe2 	bl	8004960 <SX1272WriteFifo>
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <SX1272Send+0x158>)
 800419e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80041a0:	4b31      	ldr	r3, [pc, #196]	; (8004268 <SX1272Send+0x158>)
 80041a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <SX1272Send+0x158>)
 80041ae:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1272.Settings.Fsk.TxTimeout;
 80041b0:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <SX1272Send+0x158>)
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041b6:	e04f      	b.n	8004258 <SX1272Send+0x148>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 80041b8:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <SX1272Send+0x158>)
 80041ba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00f      	beq.n	80041e2 <SX1272Send+0xd2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80041c2:	2033      	movs	r0, #51	; 0x33
 80041c4:	f000 fb54 	bl	8004870 <SX1272Read>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	2033      	movs	r0, #51	; 0x33
 80041d4:	f000 fb3a 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80041d8:	2119      	movs	r1, #25
 80041da:	203b      	movs	r0, #59	; 0x3b
 80041dc:	f000 fb36 	bl	800484c <SX1272Write>
 80041e0:	e013      	b.n	800420a <SX1272Send+0xfa>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80041e2:	2033      	movs	r0, #51	; 0x33
 80041e4:	f000 fb44 	bl	8004870 <SX1272Read>
 80041e8:	4603      	mov	r3, r0
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	4619      	mov	r1, r3
 80041fc:	2033      	movs	r0, #51	; 0x33
 80041fe:	f000 fb25 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004202:	211d      	movs	r1, #29
 8004204:	203b      	movs	r0, #59	; 0x3b
 8004206:	f000 fb21 	bl	800484c <SX1272Write>
            }

            SX1272.Settings.LoRaPacketHandler.Size = size;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4b16      	ldr	r3, [pc, #88]	; (8004268 <SX1272Send+0x158>)
 800420e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

            // Initializes the payload size
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	4619      	mov	r1, r3
 8004216:	2022      	movs	r0, #34	; 0x22
 8004218:	f000 fb18 	bl	800484c <SX1272Write>

            // Full buffer used for Tx
            SX1272Write( REG_LR_FIFOTXBASEADDR, 0 );
 800421c:	2100      	movs	r1, #0
 800421e:	200e      	movs	r0, #14
 8004220:	f000 fb14 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8004224:	2100      	movs	r1, #0
 8004226:	200d      	movs	r0, #13
 8004228:	f000 fb10 	bl	800484c <SX1272Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1272Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800422c:	2001      	movs	r0, #1
 800422e:	f000 fb1f 	bl	8004870 <SX1272Read>
 8004232:	4603      	mov	r3, r0
 8004234:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <SX1272Send+0x136>
            {
                SX1272SetStby( );
 800423c:	f000 f836 	bl	80042ac <SX1272SetStby>
                DelayMs( 1 );
 8004240:	2001      	movs	r0, #1
 8004242:	f001 f867 	bl	8005314 <DelayMs>
            }
            // Write payload buffer
            SX1272WriteFifo( buffer, size );
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb88 	bl	8004960 <SX1272WriteFifo>
            txTimeout = SX1272.Settings.LoRa.TxTimeout;
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <SX1272Send+0x158>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004256:	bf00      	nop
    }

    SX1272SetTx( txTimeout );
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f91f 	bl	800449c <SX1272SetTx>
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000460 	.word	0x20000460
 800426c:	200000d4 	.word	0x200000d4

08004270 <SX1272SetSleep>:

void SX1272SetSleep( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8004274:	4809      	ldr	r0, [pc, #36]	; (800429c <SX1272SetSleep+0x2c>)
 8004276:	f001 f921 	bl	80054bc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800427a:	4809      	ldr	r0, [pc, #36]	; (80042a0 <SX1272SetSleep+0x30>)
 800427c:	f001 f91e 	bl	80054bc <TimerStop>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8004280:	2000      	movs	r0, #0
 8004282:	f000 fa59 	bl	8004738 <SX1272SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1272BoardSetXO( RESET );
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <SX1272SetSleep+0x34>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2000      	movs	r0, #0
 800428e:	4798      	blx	r3

    SX1272.Settings.State = RF_IDLE;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <SX1272SetSleep+0x38>)
 8004292:	2200      	movs	r2, #0
 8004294:	711a      	strb	r2, [r3, #4]
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200004f8 	.word	0x200004f8
 80042a0:	200004c8 	.word	0x200004c8
 80042a4:	200001d4 	.word	0x200001d4
 80042a8:	20000460 	.word	0x20000460

080042ac <SX1272SetStby>:

void SX1272SetStby( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80042b0:	4806      	ldr	r0, [pc, #24]	; (80042cc <SX1272SetStby+0x20>)
 80042b2:	f001 f903 	bl	80054bc <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80042b6:	4806      	ldr	r0, [pc, #24]	; (80042d0 <SX1272SetStby+0x24>)
 80042b8:	f001 f900 	bl	80054bc <TimerStop>

    SX1272SetOpMode( RF_OPMODE_STANDBY );
 80042bc:	2001      	movs	r0, #1
 80042be:	f000 fa3b 	bl	8004738 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <SX1272SetStby+0x28>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	711a      	strb	r2, [r3, #4]
}
 80042c8:	bf00      	nop
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	200004f8 	.word	0x200004f8
 80042d0:	200004c8 	.word	0x200004c8
 80042d4:	20000460 	.word	0x20000460

080042d8 <SX1272SetRx>:

void SX1272SetRx( uint32_t timeout )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 80042e4:	4868      	ldr	r0, [pc, #416]	; (8004488 <SX1272SetRx+0x1b0>)
 80042e6:	f001 f8e9 	bl	80054bc <TimerStop>

    switch( SX1272.Settings.Modem )
 80042ea:	4b68      	ldr	r3, [pc, #416]	; (800448c <SX1272SetRx+0x1b4>)
 80042ec:	795b      	ldrb	r3, [r3, #5]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <SX1272SetRx+0x20>
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d03c      	beq.n	8004370 <SX1272SetRx+0x98>
 80042f6:	e095      	b.n	8004424 <SX1272SetRx+0x14c>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 80042f8:	4b64      	ldr	r3, [pc, #400]	; (800448c <SX1272SetRx+0x1b4>)
 80042fa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80042fe:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004300:	2040      	movs	r0, #64	; 0x40
 8004302:	f000 fab5 	bl	8004870 <SX1272Read>
 8004306:	4603      	mov	r3, r0
 8004308:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8004310:	f043 030c 	orr.w	r3, r3, #12
 8004314:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	2040      	movs	r0, #64	; 0x40
 800431c:	f000 fa96 	bl	800484c <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004320:	2041      	movs	r0, #65	; 0x41
 8004322:	f000 faa5 	bl	8004870 <SX1272Read>
 8004326:	4603      	mov	r3, r0
 8004328:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800432c:	b2db      	uxtb	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	2041      	movs	r0, #65	; 0x41
 8004332:	f000 fa8b 	bl	800484c <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 8004336:	2035      	movs	r0, #53	; 0x35
 8004338:	f000 fa9a 	bl	8004870 <SX1272Read>
 800433c:	4603      	mov	r3, r0
 800433e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b51      	ldr	r3, [pc, #324]	; (800448c <SX1272SetRx+0x1b4>)
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

            SX1272Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800434a:	211e      	movs	r1, #30
 800434c:	200d      	movs	r0, #13
 800434e:	f000 fa7d 	bl	800484c <SX1272Write>

            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004352:	4b4e      	ldr	r3, [pc, #312]	; (800448c <SX1272SetRx+0x1b4>)
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800435a:	4b4c      	ldr	r3, [pc, #304]	; (800448c <SX1272SetRx+0x1b4>)
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <SX1272SetRx+0x1b4>)
 8004364:	2200      	movs	r2, #0
 8004366:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 8004368:	4b48      	ldr	r3, [pc, #288]	; (800448c <SX1272SetRx+0x1b4>)
 800436a:	2200      	movs	r2, #0
 800436c:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 800436e:	e059      	b.n	8004424 <SX1272SetRx+0x14c>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 8004370:	4b46      	ldr	r3, [pc, #280]	; (800448c <SX1272SetRx+0x1b4>)
 8004372:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00f      	beq.n	800439a <SX1272SetRx+0xc2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800437a:	2033      	movs	r0, #51	; 0x33
 800437c:	f000 fa78 	bl	8004870 <SX1272Read>
 8004380:	4603      	mov	r3, r0
 8004382:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8004386:	b2db      	uxtb	r3, r3
 8004388:	4619      	mov	r1, r3
 800438a:	2033      	movs	r0, #51	; 0x33
 800438c:	f000 fa5e 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004390:	2119      	movs	r1, #25
 8004392:	203b      	movs	r0, #59	; 0x3b
 8004394:	f000 fa5a 	bl	800484c <SX1272Write>
 8004398:	e013      	b.n	80043c2 <SX1272SetRx+0xea>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800439a:	2033      	movs	r0, #51	; 0x33
 800439c:	f000 fa68 	bl	8004870 <SX1272Read>
 80043a0:	4603      	mov	r3, r0
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	b25b      	sxtb	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	2033      	movs	r0, #51	; 0x33
 80043b6:	f000 fa49 	bl	800484c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80043ba:	211d      	movs	r1, #29
 80043bc:	203b      	movs	r0, #59	; 0x3b
 80043be:	f000 fa45 	bl	800484c <SX1272Write>
            }

            rxContinuous = SX1272.Settings.LoRa.RxContinuous;
 80043c2:	4b32      	ldr	r3, [pc, #200]	; (800448c <SX1272SetRx+0x1b4>)
 80043c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80043c8:	73fb      	strb	r3, [r7, #15]

            if( SX1272.Settings.LoRa.FreqHopOn == true )
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <SX1272SetRx+0x1b4>)
 80043cc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00f      	beq.n	80043f4 <SX1272SetRx+0x11c>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80043d4:	211d      	movs	r1, #29
 80043d6:	2011      	movs	r0, #17
 80043d8:	f000 fa38 	bl	800484c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80043dc:	2040      	movs	r0, #64	; 0x40
 80043de:	f000 fa47 	bl	8004870 <SX1272Read>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4619      	mov	r1, r3
 80043ec:	2040      	movs	r0, #64	; 0x40
 80043ee:	f000 fa2d 	bl	800484c <SX1272Write>
 80043f2:	e00e      	b.n	8004412 <SX1272SetRx+0x13a>
            }
            else
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80043f4:	211f      	movs	r1, #31
 80043f6:	2011      	movs	r0, #17
 80043f8:	f000 fa28 	bl	800484c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80043fc:	2040      	movs	r0, #64	; 0x40
 80043fe:	f000 fa37 	bl	8004870 <SX1272Read>
 8004402:	4603      	mov	r3, r0
 8004404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	2040      	movs	r0, #64	; 0x40
 800440e:	f000 fa1d 	bl	800484c <SX1272Write>
            }
            SX1272Write( REG_LR_FIFORXBASEADDR, 0 );
 8004412:	2100      	movs	r1, #0
 8004414:	200f      	movs	r0, #15
 8004416:	f000 fa19 	bl	800484c <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 800441a:	2100      	movs	r1, #0
 800441c:	200d      	movs	r0, #13
 800441e:	f000 fa15 	bl	800484c <SX1272Write>
        }
        break;
 8004422:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8004424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004428:	2100      	movs	r1, #0
 800442a:	4819      	ldr	r0, [pc, #100]	; (8004490 <SX1272SetRx+0x1b8>)
 800442c:	f002 fe7b 	bl	8007126 <memset>

    SX1272.Settings.State = RF_RX_RUNNING;
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <SX1272SetRx+0x1b4>)
 8004432:	2201      	movs	r2, #1
 8004434:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d006      	beq.n	800444a <SX1272SetRx+0x172>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4815      	ldr	r0, [pc, #84]	; (8004494 <SX1272SetRx+0x1bc>)
 8004440:	f001 f8b6 	bl	80055b0 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8004444:	4813      	ldr	r0, [pc, #76]	; (8004494 <SX1272SetRx+0x1bc>)
 8004446:	f000 ffe9 	bl	800541c <TimerStart>
    }

    if( SX1272.Settings.Modem == MODEM_FSK )
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <SX1272SetRx+0x1b4>)
 800444c:	795b      	ldrb	r3, [r3, #5]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10c      	bne.n	800446c <SX1272SetRx+0x194>
    {
        SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8004452:	2005      	movs	r0, #5
 8004454:	f000 f970 	bl	8004738 <SX1272SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1272.Settings.Fsk.RxSingleTimeout );
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <SX1272SetRx+0x1b4>)
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4619      	mov	r1, r3
 800445e:	480e      	ldr	r0, [pc, #56]	; (8004498 <SX1272SetRx+0x1c0>)
 8004460:	f001 f8a6 	bl	80055b0 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8004464:	480c      	ldr	r0, [pc, #48]	; (8004498 <SX1272SetRx+0x1c0>)
 8004466:	f000 ffd9 	bl	800541c <TimerStart>
        else
        {
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800446a:	e009      	b.n	8004480 <SX1272SetRx+0x1a8>
        if( rxContinuous == true )
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <SX1272SetRx+0x1a2>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER );
 8004472:	2005      	movs	r0, #5
 8004474:	f000 f960 	bl	8004738 <SX1272SetOpMode>
}
 8004478:	e002      	b.n	8004480 <SX1272SetRx+0x1a8>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800447a:	2006      	movs	r0, #6
 800447c:	f000 f95c 	bl	8004738 <SX1272SetOpMode>
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200004c8 	.word	0x200004c8
 800448c:	20000460 	.word	0x20000460
 8004490:	200000d4 	.word	0x200000d4
 8004494:	200004f8 	.word	0x200004f8
 8004498:	200004e0 	.word	0x200004e0

0800449c <SX1272SetTx>:

void SX1272SetTx( uint32_t timeout )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 80044a4:	4837      	ldr	r0, [pc, #220]	; (8004584 <SX1272SetTx+0xe8>)
 80044a6:	f001 f809 	bl	80054bc <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4836      	ldr	r0, [pc, #216]	; (8004588 <SX1272SetTx+0xec>)
 80044ae:	f001 f87f 	bl	80055b0 <TimerSetValue>

    switch( SX1272.Settings.Modem )
 80044b2:	4b36      	ldr	r3, [pc, #216]	; (800458c <SX1272SetTx+0xf0>)
 80044b4:	795b      	ldrb	r3, [r3, #5]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <SX1272SetTx+0x24>
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d026      	beq.n	800450c <SX1272SetTx+0x70>
 80044be:	e054      	b.n	800456a <SX1272SetTx+0xce>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80044c0:	2040      	movs	r0, #64	; 0x40
 80044c2:	f000 f9d5 	bl	8004870 <SX1272Read>
 80044c6:	4603      	mov	r3, r0
 80044c8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 80044d0:	f043 0310 	orr.w	r3, r3, #16
 80044d4:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	2040      	movs	r0, #64	; 0x40
 80044dc:	f000 f9b6 	bl	800484c <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80044e0:	2041      	movs	r0, #65	; 0x41
 80044e2:	f000 f9c5 	bl	8004870 <SX1272Read>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4619      	mov	r1, r3
 80044f0:	2041      	movs	r0, #65	; 0x41
 80044f2:	f000 f9ab 	bl	800484c <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 80044f6:	2035      	movs	r0, #53	; 0x35
 80044f8:	f000 f9ba 	bl	8004870 <SX1272Read>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004502:	b2da      	uxtb	r2, r3
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <SX1272SetTx+0xf0>)
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
        break;
 800450a:	e02e      	b.n	800456a <SX1272SetTx+0xce>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 800450c:	4b1f      	ldr	r3, [pc, #124]	; (800458c <SX1272SetTx+0xf0>)
 800450e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004512:	2b00      	cmp	r3, #0
 8004514:	d014      	beq.n	8004540 <SX1272SetTx+0xa4>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004516:	21f5      	movs	r1, #245	; 0xf5
 8004518:	2011      	movs	r0, #17
 800451a:	f000 f997 	bl	800484c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800451e:	2040      	movs	r0, #64	; 0x40
 8004520:	f000 f9a6 	bl	8004870 <SX1272Read>
 8004524:	4603      	mov	r3, r0
 8004526:	b25b      	sxtb	r3, r3
 8004528:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800452c:	b25b      	sxtb	r3, r3
 800452e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004532:	b25b      	sxtb	r3, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	4619      	mov	r1, r3
 8004538:	2040      	movs	r0, #64	; 0x40
 800453a:	f000 f987 	bl	800484c <SX1272Write>

                // DIO0=TxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800453e:	e013      	b.n	8004568 <SX1272SetTx+0xcc>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004540:	21f7      	movs	r1, #247	; 0xf7
 8004542:	2011      	movs	r0, #17
 8004544:	f000 f982 	bl	800484c <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004548:	2040      	movs	r0, #64	; 0x40
 800454a:	f000 f991 	bl	8004870 <SX1272Read>
 800454e:	4603      	mov	r3, r0
 8004550:	b25b      	sxtb	r3, r3
 8004552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004556:	b25b      	sxtb	r3, r3
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	b25b      	sxtb	r3, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	4619      	mov	r1, r3
 8004562:	2040      	movs	r0, #64	; 0x40
 8004564:	f000 f972 	bl	800484c <SX1272Write>
        break;
 8004568:	bf00      	nop
    }

    SX1272.Settings.State = RF_TX_RUNNING;
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <SX1272SetTx+0xf0>)
 800456c:	2202      	movs	r2, #2
 800456e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8004570:	4805      	ldr	r0, [pc, #20]	; (8004588 <SX1272SetTx+0xec>)
 8004572:	f000 ff53 	bl	800541c <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8004576:	2003      	movs	r0, #3
 8004578:	f000 f8de 	bl	8004738 <SX1272SetOpMode>
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200004f8 	.word	0x200004f8
 8004588:	200004c8 	.word	0x200004c8
 800458c:	20000460 	.word	0x20000460

08004590 <SX1272StartCad>:

void SX1272StartCad( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.Modem )
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <SX1272StartCad+0x44>)
 8004596:	795b      	ldrb	r3, [r3, #5]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d018      	beq.n	80045ce <SX1272StartCad+0x3e>
 800459c:	2b01      	cmp	r3, #1
 800459e:	d000      	beq.n	80045a2 <SX1272StartCad+0x12>
            SX1272.Settings.State = RF_CAD;
            SX1272SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80045a0:	e016      	b.n	80045d0 <SX1272StartCad+0x40>
            SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80045a2:	21fa      	movs	r1, #250	; 0xfa
 80045a4:	2011      	movs	r0, #17
 80045a6:	f000 f951 	bl	800484c <SX1272Write>
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80045aa:	2040      	movs	r0, #64	; 0x40
 80045ac:	f000 f960 	bl	8004870 <SX1272Read>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4619      	mov	r1, r3
 80045ba:	2040      	movs	r0, #64	; 0x40
 80045bc:	f000 f946 	bl	800484c <SX1272Write>
            SX1272.Settings.State = RF_CAD;
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <SX1272StartCad+0x44>)
 80045c2:	2203      	movs	r2, #3
 80045c4:	711a      	strb	r2, [r3, #4]
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 80045c6:	2007      	movs	r0, #7
 80045c8:	f000 f8b6 	bl	8004738 <SX1272SetOpMode>
        break;
 80045cc:	e000      	b.n	80045d0 <SX1272StartCad+0x40>
        break;
 80045ce:	bf00      	nop
    }
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000460 	.word	0x20000460

080045d8 <SX1272SetTxContinuousWave>:

void SX1272SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af0a      	add	r7, sp, #40	; 0x28
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
 80045e4:	4613      	mov	r3, r2
 80045e6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80045e8:	883b      	ldrh	r3, [r7, #0]
 80045ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	60fb      	str	r3, [r7, #12]

    SX1272SetChannel( freq );
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fe ff65 	bl	80034c4 <SX1272SetChannel>

    SX1272SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80045fa:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	9308      	str	r3, [sp, #32]
 8004602:	2300      	movs	r3, #0
 8004604:	9307      	str	r3, [sp, #28]
 8004606:	2300      	movs	r3, #0
 8004608:	9306      	str	r3, [sp, #24]
 800460a:	2300      	movs	r3, #0
 800460c:	9305      	str	r3, [sp, #20]
 800460e:	2300      	movs	r3, #0
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	2300      	movs	r3, #0
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	2305      	movs	r3, #5
 8004618:	9302      	str	r3, [sp, #8]
 800461a:	2300      	movs	r3, #0
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	2200      	movs	r2, #0
 8004628:	2000      	movs	r0, #0
 800462a:	f7ff fa11 	bl	8003a50 <SX1272SetTxConfig>

    SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800462e:	2031      	movs	r0, #49	; 0x31
 8004630:	f000 f91e 	bl	8004870 <SX1272Read>
 8004634:	4603      	mov	r3, r0
 8004636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	2031      	movs	r0, #49	; 0x31
 8004640:	f000 f904 	bl	800484c <SX1272Write>
    // Disable radio interrupts
    SX1272Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8004644:	21f0      	movs	r1, #240	; 0xf0
 8004646:	2040      	movs	r0, #64	; 0x40
 8004648:	f000 f900 	bl	800484c <SX1272Write>
    SX1272Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800464c:	21a0      	movs	r1, #160	; 0xa0
 800464e:	2041      	movs	r0, #65	; 0x41
 8004650:	f000 f8fc 	bl	800484c <SX1272Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	4808      	ldr	r0, [pc, #32]	; (8004678 <SX1272SetTxContinuousWave+0xa0>)
 8004658:	f000 ffaa 	bl	80055b0 <TimerSetValue>

    SX1272.Settings.State = RF_TX_RUNNING;
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <SX1272SetTxContinuousWave+0xa4>)
 800465e:	2202      	movs	r2, #2
 8004660:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8004662:	4805      	ldr	r0, [pc, #20]	; (8004678 <SX1272SetTxContinuousWave+0xa0>)
 8004664:	f000 feda 	bl	800541c <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8004668:	2003      	movs	r0, #3
 800466a:	f000 f865 	bl	8004738 <SX1272SetOpMode>
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200004c8 	.word	0x200004c8
 800467c:	20000460 	.word	0x20000460

08004680 <SX1272ReadRssi>:

int16_t SX1272ReadRssi( RadioModems_t modem )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <SX1272ReadRssi+0x1a>
 8004694:	2b01      	cmp	r3, #1
 8004696:	d00b      	beq.n	80046b0 <SX1272ReadRssi+0x30>
 8004698:	e013      	b.n	80046c2 <SX1272ReadRssi+0x42>
    {
    case MODEM_FSK:
        rssi = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 800469a:	2011      	movs	r0, #17
 800469c:	f000 f8e8 	bl	8004870 <SX1272Read>
 80046a0:	4603      	mov	r3, r0
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	425b      	negs	r3, r3
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	81fb      	strh	r3, [r7, #14]
        break;
 80046ae:	e00c      	b.n	80046ca <SX1272ReadRssi+0x4a>
    case MODEM_LORA:
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 80046b0:	201b      	movs	r0, #27
 80046b2:	f000 f8dd 	bl	8004870 <SX1272Read>
 80046b6:	4603      	mov	r3, r0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b8b      	subs	r3, #139	; 0x8b
 80046bc:	b29b      	uxth	r3, r3
 80046be:	81fb      	strh	r3, [r7, #14]
        break;
 80046c0:	e003      	b.n	80046ca <SX1272ReadRssi+0x4a>
    default:
        rssi = -1;
 80046c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046c6:	81fb      	strh	r3, [r7, #14]
        break;
 80046c8:	bf00      	nop
    }
    return rssi;
 80046ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <SX1272Reset>:

void SX1272Reset( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80046ec:	2301      	movs	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 80046f4:	2303      	movs	r3, #3
 80046f6:	613b      	str	r3, [r7, #16]

    // Set RESET pin to 1
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	461a      	mov	r2, r3
 80046fc:	2101      	movs	r1, #1
 80046fe:	480d      	ldr	r0, [pc, #52]	; (8004734 <SX1272Reset+0x5c>)
 8004700:	f001 f84e 	bl	80057a0 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 1 );
 8004704:	2201      	movs	r2, #1
 8004706:	2101      	movs	r1, #1
 8004708:	480a      	ldr	r0, [pc, #40]	; (8004734 <SX1272Reset+0x5c>)
 800470a:	f001 f913 	bl	8005934 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 800470e:	2001      	movs	r0, #1
 8004710:	f000 fe00 	bl	8005314 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	461a      	mov	r2, r3
 800471c:	2101      	movs	r1, #1
 800471e:	4805      	ldr	r0, [pc, #20]	; (8004734 <SX1272Reset+0x5c>)
 8004720:	f001 f83e 	bl	80057a0 <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8004724:	2006      	movs	r0, #6
 8004726:	f000 fdf5 	bl	8005314 <DelayMs>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40020000 	.word	0x40020000

08004738 <SX1272SetOpMode>:

void SX1272SetOpMode( uint8_t opMode )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <SX1272SetOpMode+0x1c>
    {
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( true );
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <SX1272SetOpMode+0x68>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2001      	movs	r0, #1
 8004750:	4798      	blx	r3
 8004752:	e00f      	b.n	8004774 <SX1272SetOpMode+0x3c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <SX1272SetOpMode+0x68>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2001      	movs	r0, #1
 800475c:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( false );
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <SX1272SetOpMode+0x68>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2000      	movs	r0, #0
 8004766:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSw( opMode );
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <SX1272SetOpMode+0x68>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	79fa      	ldrb	r2, [r7, #7]
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
    }
    SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004774:	2001      	movs	r0, #1
 8004776:	f000 f87b 	bl	8004870 <SX1272Read>
 800477a:	4603      	mov	r3, r0
 800477c:	b25b      	sxtb	r3, r3
 800477e:	f023 0307 	bic.w	r3, r3, #7
 8004782:	b25a      	sxtb	r2, r3
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	4313      	orrs	r3, r2
 800478a:	b25b      	sxtb	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4619      	mov	r1, r3
 8004790:	2001      	movs	r0, #1
 8004792:	f000 f85b 	bl	800484c <SX1272Write>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200001d4 	.word	0x200001d4

080047a4 <SX1272SetModem>:

void SX1272SetModem( RadioModems_t modem )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
    if( ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80047ae:	2001      	movs	r0, #1
 80047b0:	f000 f85e 	bl	8004870 <SX1272Read>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b25b      	sxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da03      	bge.n	80047c4 <SX1272SetModem+0x20>
    {
        SX1272.Settings.Modem = MODEM_LORA;
 80047bc:	4b22      	ldr	r3, [pc, #136]	; (8004848 <SX1272SetModem+0xa4>)
 80047be:	2201      	movs	r2, #1
 80047c0:	715a      	strb	r2, [r3, #5]
 80047c2:	e002      	b.n	80047ca <SX1272SetModem+0x26>
    }
    else
    {
        SX1272.Settings.Modem = MODEM_FSK;
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <SX1272SetModem+0xa4>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	715a      	strb	r2, [r3, #5]
    }

    if( SX1272.Settings.Modem == modem )
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <SX1272SetModem+0xa4>)
 80047cc:	795b      	ldrb	r3, [r3, #5]
 80047ce:	79fa      	ldrb	r2, [r7, #7]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d035      	beq.n	8004840 <SX1272SetModem+0x9c>
    {
        return;
    }

    SX1272.Settings.Modem = modem;
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <SX1272SetModem+0xa4>)
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	7153      	strb	r3, [r2, #5]
    switch( SX1272.Settings.Modem )
 80047da:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <SX1272SetModem+0xa4>)
 80047dc:	795b      	ldrb	r3, [r3, #5]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d016      	beq.n	8004810 <SX1272SetModem+0x6c>
    {
    default:
    case MODEM_FSK:
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7ff ffa8 	bl	8004738 <SX1272SetOpMode>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80047e8:	2001      	movs	r0, #1
 80047ea:	f000 f841 	bl	8004870 <SX1272Read>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	4619      	mov	r1, r3
 80047f8:	2001      	movs	r0, #1
 80047fa:	f000 f827 	bl	800484c <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 80047fe:	2100      	movs	r1, #0
 8004800:	2040      	movs	r0, #64	; 0x40
 8004802:	f000 f823 	bl	800484c <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004806:	2130      	movs	r1, #48	; 0x30
 8004808:	2041      	movs	r0, #65	; 0x41
 800480a:	f000 f81f 	bl	800484c <SX1272Write>
        break;
 800480e:	e018      	b.n	8004842 <SX1272SetModem+0x9e>
    case MODEM_LORA:
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8004810:	2000      	movs	r0, #0
 8004812:	f7ff ff91 	bl	8004738 <SX1272SetOpMode>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004816:	2001      	movs	r0, #1
 8004818:	f000 f82a 	bl	8004870 <SX1272Read>
 800481c:	4603      	mov	r3, r0
 800481e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4619      	mov	r1, r3
 8004826:	2001      	movs	r0, #1
 8004828:	f000 f810 	bl	800484c <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 800482c:	2100      	movs	r1, #0
 800482e:	2040      	movs	r0, #64	; 0x40
 8004830:	f000 f80c 	bl	800484c <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 8004834:	2100      	movs	r1, #0
 8004836:	2041      	movs	r0, #65	; 0x41
 8004838:	f000 f808 	bl	800484c <SX1272Write>
        break;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <SX1272SetModem+0x9e>
        return;
 8004840:	bf00      	nop
    }
}
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000460 	.word	0x20000460

0800484c <SX1272Write>:

void SX1272Write( uint16_t addr, uint8_t data )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	460a      	mov	r2, r1
 8004856:	80fb      	strh	r3, [r7, #6]
 8004858:	4613      	mov	r3, r2
 800485a:	717b      	strb	r3, [r7, #5]
	SX1272WriteBuffer( addr, &data, 1 );
 800485c:	1d79      	adds	r1, r7, #5
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2201      	movs	r2, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f816 	bl	8004894 <SX1272WriteBuffer>
	//PRINTF("WRITE\r\n");
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <SX1272Read>:

uint8_t SX1272Read( uint16_t addr )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX1272ReadBuffer( addr, &data, 1 );
 800487a:	f107 010f 	add.w	r1, r7, #15
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2201      	movs	r2, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f838 	bl	80048f8 <SX1272ReadBuffer>
    return data;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	80fb      	strh	r3, [r7, #6]
 80048a0:	4613      	mov	r3, r2
 80048a2:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80048a4:	2200      	movs	r2, #0
 80048a6:	2140      	movs	r1, #64	; 0x40
 80048a8:	4812      	ldr	r0, [pc, #72]	; (80048f4 <SX1272WriteBuffer+0x60>)
 80048aa:	f001 f843 	bl	8005934 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 fb4e 	bl	8005f58 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	e00a      	b.n	80048d8 <SX1272WriteBuffer+0x44>
    {
        HW_SPI_InOut( buffer[i] );
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fb43 	bl	8005f58 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	3301      	adds	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	7bfa      	ldrb	r2, [r7, #15]
 80048da:	797b      	ldrb	r3, [r7, #5]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d3f0      	bcc.n	80048c2 <SX1272WriteBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80048e0:	2201      	movs	r2, #1
 80048e2:	2140      	movs	r1, #64	; 0x40
 80048e4:	4803      	ldr	r0, [pc, #12]	; (80048f4 <SX1272WriteBuffer+0x60>)
 80048e6:	f001 f825 	bl	8005934 <HW_GPIO_Write>
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40020400 	.word	0x40020400

080048f8 <SX1272ReadBuffer>:

void SX1272ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	80fb      	strh	r3, [r7, #6]
 8004904:	4613      	mov	r3, r2
 8004906:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8004908:	2200      	movs	r2, #0
 800490a:	2140      	movs	r1, #64	; 0x40
 800490c:	4813      	ldr	r0, [pc, #76]	; (800495c <SX1272ReadBuffer+0x64>)
 800490e:	f001 f811 	bl	8005934 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	b29b      	uxth	r3, r3
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fb1c 	bl	8005f58 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e00c      	b.n	8004940 <SX1272ReadBuffer+0x48>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 8004926:	2000      	movs	r0, #0
 8004928:	f001 fb16 	bl	8005f58 <HW_SPI_InOut>
 800492c:	4603      	mov	r3, r0
 800492e:	4619      	mov	r1, r3
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	4413      	add	r3, r2
 8004936:	b2ca      	uxtb	r2, r1
 8004938:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	3301      	adds	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	797b      	ldrb	r3, [r7, #5]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3ee      	bcc.n	8004926 <SX1272ReadBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8004948:	2201      	movs	r2, #1
 800494a:	2140      	movs	r1, #64	; 0x40
 800494c:	4803      	ldr	r0, [pc, #12]	; (800495c <SX1272ReadBuffer+0x64>)
 800494e:	f000 fff1 	bl	8005934 <HW_GPIO_Write>
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40020400 	.word	0x40020400

08004960 <SX1272WriteFifo>:

void SX1272WriteFifo( uint8_t *buffer, uint8_t size )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
    SX1272WriteBuffer( 0, buffer, size );
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	461a      	mov	r2, r3
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	2000      	movs	r0, #0
 8004974:	f7ff ff8e 	bl	8004894 <SX1272WriteBuffer>
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint8_t size )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
    SX1272ReadBuffer( 0, buffer, size );
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	461a      	mov	r2, r3
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	2000      	movs	r0, #0
 8004994:	f7ff ffb0 	bl	80048f8 <SX1272ReadBuffer>
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <SX1272SetMaxPayloadLength>:

void SX1272SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	460a      	mov	r2, r1
 80049aa:	71fb      	strb	r3, [r7, #7]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71bb      	strb	r3, [r7, #6]
    SX1272SetModem( modem );
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fef6 	bl	80047a4 <SX1272SetModem>

    switch( modem )
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <SX1272SetMaxPayloadLength+0x24>
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d00e      	beq.n	80049e0 <SX1272SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 80049c2:	e014      	b.n	80049ee <SX1272SetMaxPayloadLength+0x4e>
        if( SX1272.Settings.Fsk.FixLen == false )
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <SX1272SetMaxPayloadLength+0x58>)
 80049c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80049ca:	f083 0301 	eor.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <SX1272SetMaxPayloadLength+0x4c>
            SX1272Write( REG_PAYLOADLENGTH, max );
 80049d4:	79bb      	ldrb	r3, [r7, #6]
 80049d6:	4619      	mov	r1, r3
 80049d8:	2032      	movs	r0, #50	; 0x32
 80049da:	f7ff ff37 	bl	800484c <SX1272Write>
        break;
 80049de:	e005      	b.n	80049ec <SX1272SetMaxPayloadLength+0x4c>
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 80049e0:	79bb      	ldrb	r3, [r7, #6]
 80049e2:	4619      	mov	r1, r3
 80049e4:	2023      	movs	r0, #35	; 0x23
 80049e6:	f7ff ff31 	bl	800484c <SX1272Write>
        break;
 80049ea:	e000      	b.n	80049ee <SX1272SetMaxPayloadLength+0x4e>
        break;
 80049ec:	bf00      	nop
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000460 	.word	0x20000460

080049fc <SX1272SetPublicNetwork>:

void SX1272SetPublicNetwork( bool enable )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
    SX1272SetModem( MODEM_LORA );
 8004a06:	2001      	movs	r0, #1
 8004a08:	f7ff fecc 	bl	80047a4 <SX1272SetModem>
    SX1272.Settings.LoRa.PublicNetwork = enable;
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <SX1272SetPublicNetwork+0x38>)
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    if( enable == true )
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <SX1272SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004a1a:	2134      	movs	r1, #52	; 0x34
 8004a1c:	2039      	movs	r0, #57	; 0x39
 8004a1e:	f7ff ff15 	bl	800484c <SX1272Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8004a22:	e003      	b.n	8004a2c <SX1272SetPublicNetwork+0x30>
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004a24:	2112      	movs	r1, #18
 8004a26:	2039      	movs	r0, #57	; 0x39
 8004a28:	f7ff ff10 	bl	800484c <SX1272Write>
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000460 	.word	0x20000460

08004a38 <SX1272OnTimeoutIrq>:
{
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
}

void SX1272OnTimeoutIrq( void* context )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.State )
 8004a40:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d002      	beq.n	8004a4e <SX1272OnTimeoutIrq+0x16>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d042      	beq.n	8004ad2 <SX1272OnTimeoutIrq+0x9a>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8004a4c:	e08a      	b.n	8004b64 <SX1272OnTimeoutIrq+0x12c>
        if( SX1272.Settings.Modem == MODEM_FSK )
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a50:	795b      	ldrb	r3, [r3, #5]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d12f      	bne.n	8004ab6 <SX1272OnTimeoutIrq+0x7e>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004a56:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8004a5e:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004a72:	210b      	movs	r1, #11
 8004a74:	203e      	movs	r0, #62	; 0x3e
 8004a76:	f7ff fee9 	bl	800484c <SX1272Write>
            SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004a7a:	2110      	movs	r1, #16
 8004a7c:	203f      	movs	r0, #63	; 0x3f
 8004a7e:	f7ff fee5 	bl	800484c <SX1272Write>
            if( SX1272.Settings.Fsk.RxContinuous == true )
 8004a82:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004a84:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <SX1272OnTimeoutIrq+0x72>
                SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004a8c:	200d      	movs	r0, #13
 8004a8e:	f7ff feef 	bl	8004870 <SX1272Read>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	200d      	movs	r0, #13
 8004a9e:	f7ff fed5 	bl	800484c <SX1272Write>
                TimerStart( &RxTimeoutSyncWord );
 8004aa2:	4833      	ldr	r0, [pc, #204]	; (8004b70 <SX1272OnTimeoutIrq+0x138>)
 8004aa4:	f000 fcba 	bl	800541c <TimerStart>
 8004aa8:	e005      	b.n	8004ab6 <SX1272OnTimeoutIrq+0x7e>
                SX1272.Settings.State = RF_IDLE;
 8004aaa:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004ab0:	482f      	ldr	r0, [pc, #188]	; (8004b70 <SX1272OnTimeoutIrq+0x138>)
 8004ab2:	f000 fd03 	bl	80054bc <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <SX1272OnTimeoutIrq+0x13c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d04f      	beq.n	8004b5e <SX1272OnTimeoutIrq+0x126>
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <SX1272OnTimeoutIrq+0x13c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d04a      	beq.n	8004b5e <SX1272OnTimeoutIrq+0x126>
            RadioEvents->RxTimeout( );
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <SX1272OnTimeoutIrq+0x13c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4798      	blx	r3
        break;
 8004ad0:	e045      	b.n	8004b5e <SX1272OnTimeoutIrq+0x126>
        SX1272Reset( );
 8004ad2:	f7ff fe01 	bl	80046d8 <SX1272Reset>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f7ff fe2e 	bl	8004738 <SX1272SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	e020      	b.n	8004b24 <SX1272OnTimeoutIrq+0xec>
            SX1272SetModem( RadioRegsInit[i].Modem );
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	4924      	ldr	r1, [pc, #144]	; (8004b78 <SX1272OnTimeoutIrq+0x140>)
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	440b      	add	r3, r1
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fe57 	bl	80047a4 <SX1272SetModem>
            SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	491f      	ldr	r1, [pc, #124]	; (8004b78 <SX1272OnTimeoutIrq+0x140>)
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	3301      	adds	r3, #1
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	b298      	uxth	r0, r3
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	491b      	ldr	r1, [pc, #108]	; (8004b78 <SX1272OnTimeoutIrq+0x140>)
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	440b      	add	r3, r1
 8004b14:	3302      	adds	r3, #2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f7ff fe97 	bl	800484c <SX1272Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	3301      	adds	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d9db      	bls.n	8004ae2 <SX1272OnTimeoutIrq+0xaa>
        SX1272SetModem( MODEM_FSK );
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f7ff fe3a 	bl	80047a4 <SX1272SetModem>
        SX1272SetPublicNetwork( SX1272.Settings.LoRa.PublicNetwork );
 8004b30:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004b32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff60 	bl	80049fc <SX1272SetPublicNetwork>
        SX1272.Settings.State = RF_IDLE;
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <SX1272OnTimeoutIrq+0x134>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <SX1272OnTimeoutIrq+0x13c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <SX1272OnTimeoutIrq+0x12a>
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <SX1272OnTimeoutIrq+0x13c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <SX1272OnTimeoutIrq+0x12a>
            RadioEvents->TxTimeout( );
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <SX1272OnTimeoutIrq+0x13c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4798      	blx	r3
        break;
 8004b5c:	e001      	b.n	8004b62 <SX1272OnTimeoutIrq+0x12a>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <SX1272OnTimeoutIrq+0x12c>
        break;
 8004b62:	bf00      	nop
    }
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000460 	.word	0x20000460
 8004b70:	200004e0 	.word	0x200004e0
 8004b74:	200000d0 	.word	0x200000d0
 8004b78:	08007cb0 	.word	0x08007cb0

08004b7c <SX1272OnDio0Irq>:

void SX1272OnDio0Irq( void* context )
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	737b      	strb	r3, [r7, #13]

    switch( SX1272.Settings.State )
 8004b88:	4ba3      	ldr	r3, [pc, #652]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004b8a:	791b      	ldrb	r3, [r3, #4]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d003      	beq.n	8004b98 <SX1272OnDio0Irq+0x1c>
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	f000 819d 	beq.w	8004ed0 <SX1272OnDio0Irq+0x354>
                }
                break;
            }
            break;
        default:
            break;
 8004b96:	e1b8      	b.n	8004f0a <SX1272OnDio0Irq+0x38e>
            switch( SX1272.Settings.Modem )
 8004b98:	4b9f      	ldr	r3, [pc, #636]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004b9a:	795b      	ldrb	r3, [r3, #5]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <SX1272OnDio0Irq+0x2c>
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f000 80de 	beq.w	8004d62 <SX1272OnDio0Irq+0x1e6>
                break;
 8004ba6:	e192      	b.n	8004ece <SX1272OnDio0Irq+0x352>
                if( SX1272.Settings.Fsk.CrcOn == true )
 8004ba8:	4b9b      	ldr	r3, [pc, #620]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04e      	beq.n	8004c50 <SX1272OnDio0Irq+0xd4>
                    irqFlags = SX1272Read( REG_IRQFLAGS2 );
 8004bb2:	203f      	movs	r0, #63	; 0x3f
 8004bb4:	f7ff fe5c 	bl	8004870 <SX1272Read>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8004bbc:	7b7b      	ldrb	r3, [r7, #13]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d043      	beq.n	8004c50 <SX1272OnDio0Irq+0xd4>
                        SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004bc8:	210b      	movs	r1, #11
 8004bca:	203e      	movs	r0, #62	; 0x3e
 8004bcc:	f7ff fe3e 	bl	800484c <SX1272Write>
                        SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	203f      	movs	r0, #63	; 0x3f
 8004bd4:	f7ff fe3a 	bl	800484c <SX1272Write>
                        TimerStop( &RxTimeoutTimer );
 8004bd8:	4890      	ldr	r0, [pc, #576]	; (8004e1c <SX1272OnDio0Irq+0x2a0>)
 8004bda:	f000 fc6f 	bl	80054bc <TimerStop>
                        if( SX1272.Settings.Fsk.RxContinuous == false )
 8004bde:	4b8e      	ldr	r3, [pc, #568]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004be0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004be4:	f083 0301 	eor.w	r3, r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <SX1272OnDio0Irq+0x80>
                            TimerStop( &RxTimeoutSyncWord );
 8004bee:	488c      	ldr	r0, [pc, #560]	; (8004e20 <SX1272OnDio0Irq+0x2a4>)
 8004bf0:	f000 fc64 	bl	80054bc <TimerStop>
                            SX1272.Settings.State = RF_IDLE;
 8004bf4:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	711a      	strb	r2, [r3, #4]
 8004bfa:	e00d      	b.n	8004c18 <SX1272OnDio0Irq+0x9c>
                            SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004bfc:	200d      	movs	r0, #13
 8004bfe:	f7ff fe37 	bl	8004870 <SX1272Read>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	200d      	movs	r0, #13
 8004c0e:	f7ff fe1d 	bl	800484c <SX1272Write>
                            TimerStart( &RxTimeoutSyncWord );
 8004c12:	4883      	ldr	r0, [pc, #524]	; (8004e20 <SX1272OnDio0Irq+0x2a4>)
 8004c14:	f000 fc02 	bl	800541c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004c18:	4b82      	ldr	r3, [pc, #520]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <SX1272OnDio0Irq+0xb6>
 8004c20:	4b80      	ldr	r3, [pc, #512]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <SX1272OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8004c2a:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4798      	blx	r3
                        SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004c32:	4b79      	ldr	r3, [pc, #484]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8004c3a:	4b77      	ldr	r3, [pc, #476]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8004c42:	4b75      	ldr	r3, [pc, #468]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1272.Settings.FskPacketHandler.Size = 0;
 8004c48:	4b73      	ldr	r3, [pc, #460]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8004c4e:	e13e      	b.n	8004ece <SX1272OnDio0Irq+0x352>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004c50:	4b71      	ldr	r3, [pc, #452]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d12c      	bne.n	8004cb2 <SX1272OnDio0Irq+0x136>
 8004c58:	4b6f      	ldr	r3, [pc, #444]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c5a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d128      	bne.n	8004cb2 <SX1272OnDio0Irq+0x136>
                    if( SX1272.Settings.Fsk.FixLen == false )
 8004c60:	4b6d      	ldr	r3, [pc, #436]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004c66:	f083 0301 	eor.w	r3, r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <SX1272OnDio0Irq+0xfe>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 8004c70:	2101      	movs	r1, #1
 8004c72:	486d      	ldr	r0, [pc, #436]	; (8004e28 <SX1272OnDio0Irq+0x2ac>)
 8004c74:	f7ff fe84 	bl	8004980 <SX1272ReadFifo>
 8004c78:	e006      	b.n	8004c88 <SX1272OnDio0Irq+0x10c>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8004c7a:	2032      	movs	r0, #50	; 0x32
 8004c7c:	f7ff fdf8 	bl	8004870 <SX1272Read>
 8004c80:	4603      	mov	r3, r0
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	4b64      	ldr	r3, [pc, #400]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c86:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004c88:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c8a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b67      	ldr	r3, [pc, #412]	; (8004e2c <SX1272OnDio0Irq+0x2b0>)
 8004c90:	18d0      	adds	r0, r2, r3
 8004c92:	4b61      	ldr	r3, [pc, #388]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c94:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	4b5f      	ldr	r3, [pc, #380]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004c9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	f7ff fe6c 	bl	8004980 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004ca8:	4b5b      	ldr	r3, [pc, #364]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004caa:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004cac:	4b5a      	ldr	r3, [pc, #360]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cae:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004cb0:	e013      	b.n	8004cda <SX1272OnDio0Irq+0x15e>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004cb2:	4b59      	ldr	r3, [pc, #356]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cb4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b5c      	ldr	r3, [pc, #368]	; (8004e2c <SX1272OnDio0Irq+0x2b0>)
 8004cba:	18d0      	adds	r0, r2, r3
 8004cbc:	4b56      	ldr	r3, [pc, #344]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cbe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4b55      	ldr	r3, [pc, #340]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cc4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f7ff fe57 	bl	8004980 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004cd2:	4b51      	ldr	r3, [pc, #324]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cd4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004cd6:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8004cda:	4850      	ldr	r0, [pc, #320]	; (8004e1c <SX1272OnDio0Irq+0x2a0>)
 8004cdc:	f000 fbee 	bl	80054bc <TimerStop>
                if( SX1272.Settings.Fsk.RxContinuous == false )
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004ce2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ce6:	f083 0301 	eor.w	r3, r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <SX1272OnDio0Irq+0x182>
                    SX1272.Settings.State = RF_IDLE;
 8004cf0:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004cf6:	484a      	ldr	r0, [pc, #296]	; (8004e20 <SX1272OnDio0Irq+0x2a4>)
 8004cf8:	f000 fbe0 	bl	80054bc <TimerStop>
 8004cfc:	e00d      	b.n	8004d1a <SX1272OnDio0Irq+0x19e>
                    SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004cfe:	200d      	movs	r0, #13
 8004d00:	f7ff fdb6 	bl	8004870 <SX1272Read>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	200d      	movs	r0, #13
 8004d10:	f7ff fd9c 	bl	800484c <SX1272Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004d14:	4842      	ldr	r0, [pc, #264]	; (8004e20 <SX1272OnDio0Irq+0x2a4>)
 8004d16:	f000 fb81 	bl	800541c <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004d1a:	4b42      	ldr	r3, [pc, #264]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d010      	beq.n	8004d44 <SX1272OnDio0Irq+0x1c8>
 8004d22:	4b40      	ldr	r3, [pc, #256]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <SX1272OnDio0Irq+0x1c8>
                    RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.FskPacketHandler.Size, SX1272.Settings.FskPacketHandler.RssiValue, 0 );
 8004d2c:	4b3d      	ldr	r3, [pc, #244]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689c      	ldr	r4, [r3, #8]
 8004d32:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d34:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8004d36:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d38:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8004d3c:	b21a      	sxth	r2, r3
 8004d3e:	2300      	movs	r3, #0
 8004d40:	483a      	ldr	r0, [pc, #232]	; (8004e2c <SX1272OnDio0Irq+0x2b0>)
 8004d42:	47a0      	blx	r4
                SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8004d44:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8004d4c:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8004d54:	4b30      	ldr	r3, [pc, #192]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1272.Settings.FskPacketHandler.Size = 0;
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8004d60:	e0b5      	b.n	8004ece <SX1272OnDio0Irq+0x352>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004d62:	2140      	movs	r1, #64	; 0x40
 8004d64:	2012      	movs	r0, #18
 8004d66:	f7ff fd71 	bl	800484c <SX1272Write>
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 8004d6a:	2012      	movs	r0, #18
 8004d6c:	f7ff fd80 	bl	8004870 <SX1272Read>
 8004d70:	4603      	mov	r3, r0
 8004d72:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004d74:	7b7b      	ldrb	r3, [r7, #13]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d121      	bne.n	8004dc4 <SX1272OnDio0Irq+0x248>
                        SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004d80:	2120      	movs	r1, #32
 8004d82:	2012      	movs	r0, #18
 8004d84:	f7ff fd62 	bl	800484c <SX1272Write>
                        if( SX1272.Settings.LoRa.RxContinuous == false )
 8004d88:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004d8e:	f083 0301 	eor.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <SX1272OnDio0Irq+0x222>
                            SX1272.Settings.State = RF_IDLE;
 8004d98:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8004d9e:	481f      	ldr	r0, [pc, #124]	; (8004e1c <SX1272OnDio0Irq+0x2a0>)
 8004da0:	f000 fb8c 	bl	80054bc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 808d 	beq.w	8004ec8 <SX1272OnDio0Irq+0x34c>
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8087 	beq.w	8004ec8 <SX1272OnDio0Irq+0x34c>
                            RadioEvents->RxError( );
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <SX1272OnDio0Irq+0x2a8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	4798      	blx	r3
                        break;
 8004dc2:	e081      	b.n	8004ec8 <SX1272OnDio0Irq+0x34c>
                    SX1272.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1272Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004dc4:	2019      	movs	r0, #25
 8004dc6:	f7ff fd53 	bl	8004870 <SX1272Read>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	3302      	adds	r3, #2
 8004dd0:	109b      	asrs	r3, r3, #2
 8004dd2:	b25a      	sxtb	r2, r3
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004dd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 8004dda:	201a      	movs	r0, #26
 8004ddc:	f7ff fd48 	bl	8004870 <SX1272Read>
 8004de0:	4603      	mov	r3, r0
 8004de2:	81fb      	strh	r3, [r7, #14]
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004de6:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da20      	bge.n	8004e30 <SX1272OnDio0Irq+0x2b4>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 8004dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004df2:	111b      	asrs	r3, r3, #4
 8004df4:	b21b      	sxth	r3, r3
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	b29a      	uxth	r2, r3
                                                                      SX1272.Settings.LoRaPacketHandler.SnrValue;
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004e00:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004e04:	b29b      	uxth	r3, r3
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 8004e06:	4413      	add	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b8b      	subs	r3, #139	; 0x8b
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b21a      	sxth	r2, r3
 8004e10:	4b01      	ldr	r3, [pc, #4]	; (8004e18 <SX1272OnDio0Irq+0x29c>)
 8004e12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004e16:	e019      	b.n	8004e4c <SX1272OnDio0Irq+0x2d0>
 8004e18:	20000460 	.word	0x20000460
 8004e1c:	200004f8 	.word	0x200004f8
 8004e20:	200004e0 	.word	0x200004e0
 8004e24:	200000d0 	.word	0x200000d0
 8004e28:	2000049a 	.word	0x2000049a
 8004e2c:	200000d4 	.word	0x200000d4
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 8004e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e34:	111b      	asrs	r3, r3, #4
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b8b      	subs	r3, #139	; 0x8b
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b21a      	sxth	r2, r3
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004e48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 8004e4c:	2013      	movs	r0, #19
 8004e4e:	f7ff fd0f 	bl	8004870 <SX1272Read>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004e58:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    SX1272Write( REG_LR_FIFOADDRPTR, SX1272Read( REG_LR_FIFORXCURRENTADDR ) );
 8004e5c:	2010      	movs	r0, #16
 8004e5e:	f7ff fd07 	bl	8004870 <SX1272Read>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4619      	mov	r1, r3
 8004e66:	200d      	movs	r0, #13
 8004e68:	f7ff fcf0 	bl	800484c <SX1272Write>
                    SX1272ReadFifo( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size );
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004e6e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004e72:	4619      	mov	r1, r3
 8004e74:	4828      	ldr	r0, [pc, #160]	; (8004f18 <SX1272OnDio0Irq+0x39c>)
 8004e76:	f7ff fd83 	bl	8004980 <SX1272ReadFifo>
                    if( SX1272.Settings.LoRa.RxContinuous == false )
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004e7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004e80:	f083 0301 	eor.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <SX1272OnDio0Irq+0x314>
                        SX1272.Settings.State = RF_IDLE;
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8004e90:	4822      	ldr	r0, [pc, #136]	; (8004f1c <SX1272OnDio0Irq+0x3a0>)
 8004e92:	f000 fb13 	bl	80054bc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <SX1272OnDio0Irq+0x3a4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <SX1272OnDio0Irq+0x350>
 8004e9e:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <SX1272OnDio0Irq+0x3a4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d011      	beq.n	8004ecc <SX1272OnDio0Irq+0x350>
                        RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size, SX1272.Settings.LoRaPacketHandler.RssiValue, SX1272.Settings.LoRaPacketHandler.SnrValue );
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <SX1272OnDio0Irq+0x3a4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689c      	ldr	r4, [r3, #8]
 8004eae:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004eb0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004eb4:	b299      	uxth	r1, r3
 8004eb6:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004eb8:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	; 0x62
 8004ebc:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004ebe:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004ec2:	4815      	ldr	r0, [pc, #84]	; (8004f18 <SX1272OnDio0Irq+0x39c>)
 8004ec4:	47a0      	blx	r4
                break;
 8004ec6:	e001      	b.n	8004ecc <SX1272OnDio0Irq+0x350>
                        break;
 8004ec8:	bf00      	nop
 8004eca:	e01e      	b.n	8004f0a <SX1272OnDio0Irq+0x38e>
                break;
 8004ecc:	bf00      	nop
            break;
 8004ece:	e01c      	b.n	8004f0a <SX1272OnDio0Irq+0x38e>
            TimerStop( &TxTimeoutTimer );
 8004ed0:	4814      	ldr	r0, [pc, #80]	; (8004f24 <SX1272OnDio0Irq+0x3a8>)
 8004ed2:	f000 faf3 	bl	80054bc <TimerStop>
            switch( SX1272.Settings.Modem )
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004ed8:	795b      	ldrb	r3, [r3, #5]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d103      	bne.n	8004ee6 <SX1272OnDio0Irq+0x36a>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004ede:	2108      	movs	r1, #8
 8004ee0:	2012      	movs	r0, #18
 8004ee2:	f7ff fcb3 	bl	800484c <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <SX1272OnDio0Irq+0x398>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <SX1272OnDio0Irq+0x3a4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <SX1272OnDio0Irq+0x38a>
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <SX1272OnDio0Irq+0x3a4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <SX1272OnDio0Irq+0x38a>
                    RadioEvents->TxDone( );
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <SX1272OnDio0Irq+0x3a4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4798      	blx	r3
                break;
 8004f06:	bf00      	nop
            break;
 8004f08:	bf00      	nop
    }
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000460 	.word	0x20000460
 8004f18:	200000d4 	.word	0x200000d4
 8004f1c:	200004f8 	.word	0x200004f8
 8004f20:	200000d0 	.word	0x200000d0
 8004f24:	200004c8 	.word	0x200004c8

08004f28 <SX1272OnDio1Irq>:

void SX1272OnDio1Irq( void* context )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.State )
 8004f30:	4b62      	ldr	r3, [pc, #392]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f32:	791b      	ldrb	r3, [r3, #4]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d002      	beq.n	8004f3e <SX1272OnDio1Irq+0x16>
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d07a      	beq.n	8005032 <SX1272OnDio1Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 8004f3c:	e0b9      	b.n	80050b2 <SX1272OnDio1Irq+0x18a>
            switch( SX1272.Settings.Modem )
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f40:	795b      	ldrb	r3, [r3, #5]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <SX1272OnDio1Irq+0x24>
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d05a      	beq.n	8005000 <SX1272OnDio1Irq+0xd8>
                break;
 8004f4a:	e071      	b.n	8005030 <SX1272OnDio1Irq+0x108>
                TimerStop( &RxTimeoutSyncWord );
 8004f4c:	485c      	ldr	r0, [pc, #368]	; (80050c0 <SX1272OnDio1Irq+0x198>)
 8004f4e:	f000 fab5 	bl	80054bc <TimerStop>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004f52:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f54:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d117      	bne.n	8004f8a <SX1272OnDio1Irq+0x62>
 8004f5a:	4b58      	ldr	r3, [pc, #352]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f5c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d113      	bne.n	8004f8a <SX1272OnDio1Irq+0x62>
                    if( SX1272.Settings.Fsk.FixLen == false )
 8004f62:	4b56      	ldr	r3, [pc, #344]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f64:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004f68:	f083 0301 	eor.w	r3, r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <SX1272OnDio1Irq+0x54>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 8004f72:	2101      	movs	r1, #1
 8004f74:	4853      	ldr	r0, [pc, #332]	; (80050c4 <SX1272OnDio1Irq+0x19c>)
 8004f76:	f7ff fd03 	bl	8004980 <SX1272ReadFifo>
 8004f7a:	e006      	b.n	8004f8a <SX1272OnDio1Irq+0x62>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8004f7c:	2032      	movs	r0, #50	; 0x32
 8004f7e:	f7ff fc77 	bl	8004870 <SX1272Read>
 8004f82:	4603      	mov	r3, r0
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	4b4d      	ldr	r3, [pc, #308]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f88:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) >= SX1272.Settings.FskPacketHandler.FifoThresh )
 8004f8a:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f8c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4b4a      	ldr	r3, [pc, #296]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	4a49      	ldr	r2, [pc, #292]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004f98:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	db1a      	blt.n	8004fd6 <SX1272OnDio1Irq+0xae>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.FifoThresh - 1 );
 8004fa0:	4b46      	ldr	r3, [pc, #280]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fa2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b48      	ldr	r3, [pc, #288]	; (80050c8 <SX1272OnDio1Irq+0x1a0>)
 8004fa8:	441a      	add	r2, r3
 8004faa:	4b44      	ldr	r3, [pc, #272]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7ff fce2 	bl	8004980 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.FifoThresh - 1;
 8004fbc:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fbe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8004fc0:	4b3e      	ldr	r3, [pc, #248]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	4b3a      	ldr	r3, [pc, #232]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8004fd4:	e02c      	b.n	8005030 <SX1272OnDio1Irq+0x108>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fd8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <SX1272OnDio1Irq+0x1a0>)
 8004fde:	18d0      	adds	r0, r2, r3
 8004fe0:	4b36      	ldr	r3, [pc, #216]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fe2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4b35      	ldr	r3, [pc, #212]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004fe8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f7ff fcc5 	bl	8004980 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004ff6:	4b31      	ldr	r3, [pc, #196]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004ff8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004ffa:	4b30      	ldr	r3, [pc, #192]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8004ffc:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8004ffe:	e017      	b.n	8005030 <SX1272OnDio1Irq+0x108>
                TimerStop( &RxTimeoutTimer );
 8005000:	4832      	ldr	r0, [pc, #200]	; (80050cc <SX1272OnDio1Irq+0x1a4>)
 8005002:	f000 fa5b 	bl	80054bc <TimerStop>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	2012      	movs	r0, #18
 800500a:	f7ff fc1f 	bl	800484c <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 800500e:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005010:	2200      	movs	r2, #0
 8005012:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005014:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <SX1272OnDio1Irq+0x1a8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <SX1272OnDio1Irq+0x106>
 800501c:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <SX1272OnDio1Irq+0x1a8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <SX1272OnDio1Irq+0x106>
                    RadioEvents->RxTimeout( );
 8005026:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <SX1272OnDio1Irq+0x1a8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4798      	blx	r3
                break;
 800502e:	bf00      	nop
            break;
 8005030:	e03f      	b.n	80050b2 <SX1272OnDio1Irq+0x18a>
            switch( SX1272.Settings.Modem )
 8005032:	4b22      	ldr	r3, [pc, #136]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005034:	795b      	ldrb	r3, [r3, #5]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <SX1272OnDio1Irq+0x118>
 800503a:	2b01      	cmp	r3, #1
 800503c:	d037      	beq.n	80050ae <SX1272OnDio1Irq+0x186>
                break;
 800503e:	e037      	b.n	80050b0 <SX1272OnDio1Irq+0x188>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.ChunkSize )
 8005040:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005042:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005044:	461a      	mov	r2, r3
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005048:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <SX1272OnDio1Irq+0x194>)
 800504e:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 8005052:	4293      	cmp	r3, r2
 8005054:	dd16      	ble.n	8005084 <SX1272OnDio1Irq+0x15c>
                    SX1272WriteFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.ChunkSize );
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005058:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800505a:	461a      	mov	r2, r3
 800505c:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <SX1272OnDio1Irq+0x1a0>)
 800505e:	441a      	add	r2, r3
 8005060:	4b16      	ldr	r3, [pc, #88]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005062:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7ff fc79 	bl	8004960 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005070:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005078:	b29b      	uxth	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005080:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8005082:	e015      	b.n	80050b0 <SX1272OnDio1Irq+0x188>
                    SX1272WriteFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005086:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005088:	461a      	mov	r2, r3
 800508a:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <SX1272OnDio1Irq+0x1a0>)
 800508c:	18d0      	adds	r0, r2, r3
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005090:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005092:	b2da      	uxtb	r2, r3
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <SX1272OnDio1Irq+0x194>)
 8005096:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005098:	b2db      	uxtb	r3, r3
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	f7ff fc5e 	bl	8004960 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <SX1272OnDio1Irq+0x194>)
 80050a6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <SX1272OnDio1Irq+0x194>)
 80050aa:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80050ac:	e000      	b.n	80050b0 <SX1272OnDio1Irq+0x188>
                break;
 80050ae:	bf00      	nop
            break;
 80050b0:	bf00      	nop
    }
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000460 	.word	0x20000460
 80050c0:	200004e0 	.word	0x200004e0
 80050c4:	2000049a 	.word	0x2000049a
 80050c8:	200000d4 	.word	0x200000d4
 80050cc:	200004f8 	.word	0x200004f8
 80050d0:	200000d0 	.word	0x200000d0

080050d4 <SX1272OnDio2Irq>:

void SX1272OnDio2Irq( void* context )
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]


    switch( SX1272.Settings.State )
 80050e0:	4b57      	ldr	r3, [pc, #348]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 80050e2:	791b      	ldrb	r3, [r3, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d002      	beq.n	80050ee <SX1272OnDio2Irq+0x1a>
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d07b      	beq.n	80051e4 <SX1272OnDio2Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 80050ec:	e0a4      	b.n	8005238 <SX1272OnDio2Irq+0x164>
            switch( SX1272.Settings.Modem )
 80050ee:	4b54      	ldr	r3, [pc, #336]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 80050f0:	795b      	ldrb	r3, [r3, #5]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <SX1272OnDio2Irq+0x28>
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d051      	beq.n	800519e <SX1272OnDio2Irq+0xca>
                break;
 80050fa:	e072      	b.n	80051e2 <SX1272OnDio2Irq+0x10e>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 80050fc:	4b50      	ldr	r3, [pc, #320]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                if( ( SX1272.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1272.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8005104:	4b4e      	ldr	r3, [pc, #312]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 8005106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800510a:	2b01      	cmp	r3, #1
 800510c:	d166      	bne.n	80051dc <SX1272OnDio2Irq+0x108>
 800510e:	4b4c      	ldr	r3, [pc, #304]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 8005110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005114:	2b00      	cmp	r3, #0
 8005116:	d161      	bne.n	80051dc <SX1272OnDio2Irq+0x108>
                    TimerStop( &RxTimeoutSyncWord );
 8005118:	484a      	ldr	r0, [pc, #296]	; (8005244 <SX1272OnDio2Irq+0x170>)
 800511a:	f000 f9cf 	bl	80054bc <TimerStop>
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 800511e:	4b48      	ldr	r3, [pc, #288]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8005126:	2011      	movs	r0, #17
 8005128:	f7ff fba2 	bl	8004870 <SX1272Read>
 800512c:	4603      	mov	r3, r0
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	425b      	negs	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	b25a      	sxtb	r2, r3
 8005138:	4b41      	ldr	r3, [pc, #260]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 800513a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 800513e:	201b      	movs	r0, #27
 8005140:	f7ff fb96 	bl	8004870 <SX1272Read>
 8005144:	4603      	mov	r3, r0
 8005146:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1272Read( REG_AFCLSB ) );
 8005148:	201c      	movs	r0, #28
 800514a:	f7ff fb91 	bl	8004870 <SX1272Read>
 800514e:	4603      	mov	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8005150:	4323      	orrs	r3, r4
 8005152:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f643 5209 	movw	r2, #15625	; 0x3d09
 800516a:	fb02 f203 	mul.w	r2, r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f643 5109 	movw	r1, #15625	; 0x3d09
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	3380      	adds	r3, #128	; 0x80
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	4413      	add	r3, r2
 800517e:	461a      	mov	r2, r3
 8005180:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 8005182:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1272.Settings.FskPacketHandler.RxGain = ( SX1272Read( REG_LNA ) >> 5 ) & 0x07;
 8005184:	200c      	movs	r0, #12
 8005186:	f7ff fb73 	bl	8004870 <SX1272Read>
 800518a:	4603      	mov	r3, r0
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	b2da      	uxtb	r2, r3
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 8005198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                break;
 800519c:	e01e      	b.n	80051dc <SX1272OnDio2Irq+0x108>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 800519e:	4b28      	ldr	r3, [pc, #160]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 80051a0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <SX1272OnDio2Irq+0x10c>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80051a8:	2102      	movs	r1, #2
 80051aa:	2012      	movs	r0, #18
 80051ac:	f7ff fb4e 	bl	800484c <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <SX1272OnDio2Irq+0x174>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <SX1272OnDio2Irq+0x10c>
 80051b8:	4b23      	ldr	r3, [pc, #140]	; (8005248 <SX1272OnDio2Irq+0x174>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <SX1272OnDio2Irq+0x10c>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80051c2:	4b21      	ldr	r3, [pc, #132]	; (8005248 <SX1272OnDio2Irq+0x174>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695c      	ldr	r4, [r3, #20]
 80051c8:	201c      	movs	r0, #28
 80051ca:	f7ff fb51 	bl	8004870 <SX1272Read>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	4618      	mov	r0, r3
 80051d8:	47a0      	blx	r4
                break;
 80051da:	e001      	b.n	80051e0 <SX1272OnDio2Irq+0x10c>
                break;
 80051dc:	bf00      	nop
 80051de:	e02b      	b.n	8005238 <SX1272OnDio2Irq+0x164>
                break;
 80051e0:	bf00      	nop
            break;
 80051e2:	e029      	b.n	8005238 <SX1272OnDio2Irq+0x164>
            switch( SX1272.Settings.Modem )
 80051e4:	4b16      	ldr	r3, [pc, #88]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 80051e6:	795b      	ldrb	r3, [r3, #5]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d021      	beq.n	8005230 <SX1272OnDio2Irq+0x15c>
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d000      	beq.n	80051f2 <SX1272OnDio2Irq+0x11e>
                break;
 80051f0:	e021      	b.n	8005236 <SX1272OnDio2Irq+0x162>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <SX1272OnDio2Irq+0x16c>)
 80051f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <SX1272OnDio2Irq+0x160>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80051fc:	2102      	movs	r1, #2
 80051fe:	2012      	movs	r0, #18
 8005200:	f7ff fb24 	bl	800484c <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005204:	4b10      	ldr	r3, [pc, #64]	; (8005248 <SX1272OnDio2Irq+0x174>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <SX1272OnDio2Irq+0x160>
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <SX1272OnDio2Irq+0x174>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <SX1272OnDio2Irq+0x160>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <SX1272OnDio2Irq+0x174>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695c      	ldr	r4, [r3, #20]
 800521c:	201c      	movs	r0, #28
 800521e:	f7ff fb27 	bl	8004870 <SX1272Read>
 8005222:	4603      	mov	r3, r0
 8005224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4618      	mov	r0, r3
 800522c:	47a0      	blx	r4
                break;
 800522e:	e001      	b.n	8005234 <SX1272OnDio2Irq+0x160>
                break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <SX1272OnDio2Irq+0x162>
                break;
 8005234:	bf00      	nop
            break;
 8005236:	bf00      	nop
    }
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	20000460 	.word	0x20000460
 8005244:	200004e0 	.word	0x200004e0
 8005248:	200000d0 	.word	0x200000d0

0800524c <SX1272OnDio3Irq>:

void SX1272OnDio3Irq( void* context )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.Modem )
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <SX1272OnDio3Irq+0x80>)
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d030      	beq.n	80052be <SX1272OnDio3Irq+0x72>
 800525c:	2b01      	cmp	r3, #1
 800525e:	d000      	beq.n	8005262 <SX1272OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8005260:	e030      	b.n	80052c4 <SX1272OnDio3Irq+0x78>
        if( ( SX1272Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005262:	2012      	movs	r0, #18
 8005264:	f7ff fb04 	bl	8004870 <SX1272Read>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d112      	bne.n	8005298 <SX1272OnDio3Irq+0x4c>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005272:	2105      	movs	r1, #5
 8005274:	2012      	movs	r0, #18
 8005276:	f7ff fae9 	bl	800484c <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <SX1272OnDio3Irq+0x84>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01f      	beq.n	80052c2 <SX1272OnDio3Irq+0x76>
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <SX1272OnDio3Irq+0x84>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01a      	beq.n	80052c2 <SX1272OnDio3Irq+0x76>
                RadioEvents->CadDone( true );
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <SX1272OnDio3Irq+0x84>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2001      	movs	r0, #1
 8005294:	4798      	blx	r3
        break;
 8005296:	e014      	b.n	80052c2 <SX1272OnDio3Irq+0x76>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005298:	2104      	movs	r1, #4
 800529a:	2012      	movs	r0, #18
 800529c:	f7ff fad6 	bl	800484c <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <SX1272OnDio3Irq+0x84>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00c      	beq.n	80052c2 <SX1272OnDio3Irq+0x76>
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <SX1272OnDio3Irq+0x84>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <SX1272OnDio3Irq+0x76>
                RadioEvents->CadDone( false );
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <SX1272OnDio3Irq+0x84>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	2000      	movs	r0, #0
 80052ba:	4798      	blx	r3
        break;
 80052bc:	e001      	b.n	80052c2 <SX1272OnDio3Irq+0x76>
        break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <SX1272OnDio3Irq+0x78>
        break;
 80052c2:	bf00      	nop
    }
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000460 	.word	0x20000460
 80052d0:	200000d0 	.word	0x200000d0

080052d4 <SX1272OnDio4Irq>:

void SX1272OnDio4Irq( void* context )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.Modem )
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <SX1272OnDio4Irq+0x3c>)
 80052de:	795b      	ldrb	r3, [r3, #5]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <SX1272OnDio4Irq+0x16>
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d00a      	beq.n	80052fe <SX1272OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 80052e8:	e00c      	b.n	8005304 <SX1272OnDio4Irq+0x30>
            if( SX1272.Settings.FskPacketHandler.PreambleDetected == false )
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <SX1272OnDio4Irq+0x3c>)
 80052ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <SX1272OnDio4Irq+0x2e>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <SX1272OnDio4Irq+0x3c>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        break;
 80052fc:	e001      	b.n	8005302 <SX1272OnDio4Irq+0x2e>
        break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <SX1272OnDio4Irq+0x30>
        break;
 8005302:	bf00      	nop
    }
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000460 	.word	0x20000460

08005314 <DelayMs>:

/* Includes ------------------------------------------------------------------*/
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
//  HW_RTC_DelayMs( ms );

}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LPM_SetStopMode>:

  return;
}

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	460a      	mov	r2, r1
 8005332:	71fb      	strb	r3, [r7, #7]
 8005334:	4613      	mov	r3, r2
 8005336:	71bb      	strb	r3, [r7, #6]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005338:	f3ef 8310 	mrs	r3, PRIMASK
 800533c:	613b      	str	r3, [r7, #16]
  return(result);
 800533e:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8005340:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005342:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8005344:	79bb      	ldrb	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <LPM_SetStopMode+0x36>
 800534a:	2b01      	cmp	r3, #1
 800534c:	d000      	beq.n	8005350 <LPM_SetStopMode+0x28>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 800534e:	e00e      	b.n	800536e <LPM_SetStopMode+0x46>
      StopModeDisable |= (uint32_t)id;
 8005350:	79fa      	ldrb	r2, [r7, #7]
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <LPM_SetStopMode+0x5c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4313      	orrs	r3, r2
 8005358:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <LPM_SetStopMode+0x5c>)
 800535a:	6013      	str	r3, [r2, #0]
      break;
 800535c:	e007      	b.n	800536e <LPM_SetStopMode+0x46>
      StopModeDisable &= ~(uint32_t)id;
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	43da      	mvns	r2, r3
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <LPM_SetStopMode+0x5c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4013      	ands	r3, r2
 8005368:	4a06      	ldr	r2, [pc, #24]	; (8005384 <LPM_SetStopMode+0x5c>)
 800536a:	6013      	str	r3, [r2, #0]
      break;
 800536c:	bf00      	nop
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 8005378:	bf00      	nop
}
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	200001d8 	.word	0x200001d8

08005388 <LPM_GetMode>:

  return;
}

LPM_GetMode_t LPM_GetMode(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	607b      	str	r3, [r7, #4]
  return(result);
 8005394:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 8005396:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8005398:	b672      	cpsid	i

  DISABLE_IRQ( );

  if(StopModeDisable )
 800539a:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <LPM_GetMode+0x4c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <LPM_GetMode+0x20>
  {
    mode_selected = LPM_SleepMode;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
 80053a6:	e008      	b.n	80053ba <LPM_GetMode+0x32>
  }
  else
  {
    if(OffModeDisable)
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <LPM_GetMode+0x50>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <LPM_GetMode+0x2e>
    {
      mode_selected = LPM_StopMode;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	e001      	b.n	80053ba <LPM_GetMode+0x32>
    }
    else
    {
      mode_selected = LPM_OffMode;
 80053b6:	2302      	movs	r3, #2
 80053b8:	73fb      	strb	r3, [r7, #15]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	200001d8 	.word	0x200001d8
 80053d8:	200001dc 	.word	0x200001dc

080053dc <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	615a      	str	r2, [r3, #20]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	617b      	str	r3, [r7, #20]
  return(result);
 800542e:	697b      	ldr	r3, [r7, #20]

  BACKUP_PRIMASK();
 8005430:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8005432:	b672      	cpsid	i

  DISABLE_IRQ( );


  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <TimerStart+0x2a>
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f902 	bl	8005644 <TimerExists>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <TimerStart+0x36>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8005450:	e02f      	b.n	80054b2 <TimerStart+0x96>
  }
  obj->Timestamp = obj->ReloadValue;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <TimerStart+0x9c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d105      	bne.n	800547a <TimerStart+0x5e>
  {
    HW_RTC_SetTimerContext( );
 800546e:	f000 fb5b 	bl	8005b28 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f958 	bl	8005728 <TimerInsertNewHeadTimer>
 8005478:	e016      	b.n	80054a8 <TimerStart+0x8c>
  }
  else
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800547a:	f000 fb11 	bl	8005aa0 <HW_RTC_GetTimerElapsedTime>
 800547e:	61f8      	str	r0, [r7, #28]
    obj->Timestamp += elapsedTime;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	441a      	add	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]

    if( obj->Timestamp < TimerListHead->Timestamp )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <TimerStart+0x9c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d203      	bcs.n	80054a2 <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f944 	bl	8005728 <TimerInsertNewHeadTimer>
 80054a0:	e002      	b.n	80054a8 <TimerStart+0x8c>
    }
    else
    {
      TimerInsertTimer( obj);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f910 	bl	80056c8 <TimerInsertTimer>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200001e0 	.word	0x200001e0

080054bc <TimerStop>:
    TimerSetTimeout( TimerListHead );
  }
}

void TimerStop( TimerEvent_t *obj ) 
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c4:	f3ef 8310 	mrs	r3, PRIMASK
 80054c8:	613b      	str	r3, [r7, #16]
  return(result);
 80054ca:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80054cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80054ce:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 80054d0:	4b36      	ldr	r3, [pc, #216]	; (80055ac <TimerStop+0xf0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 80054d6:	4b35      	ldr	r3, [pc, #212]	; (80055ac <TimerStop+0xf0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80054dc:	4b33      	ldr	r3, [pc, #204]	; (80055ac <TimerStop+0xf0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <TimerStop+0x2e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <TimerStop+0x3a>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 80054f4:	e057      	b.n	80055a6 <TimerStop+0xea>
  }

  obj->IsStarted = false;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 80054fc:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <TimerStop+0xf0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d147      	bne.n	8005596 <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8005506:	4b29      	ldr	r3, [pc, #164]	; (80055ac <TimerStop+0xf0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	7a5b      	ldrb	r3, [r3, #9]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d019      	beq.n	8005544 <TimerStop+0x88>
    {

      TimerListHead->IsNext2Expire = false;
 8005510:	4b26      	ldr	r3, [pc, #152]	; (80055ac <TimerStop+0xf0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2200      	movs	r2, #0
 8005516:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 8005518:	4b24      	ldr	r3, [pc, #144]	; (80055ac <TimerStop+0xf0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 8005522:	4b22      	ldr	r3, [pc, #136]	; (80055ac <TimerStop+0xf0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <TimerStop+0xf0>)
 800552a:	6013      	str	r3, [r2, #0]
        TimerSetTimeout( TimerListHead );
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <TimerStop+0xf0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f8a5 	bl	8005680 <TimerSetTimeout>
 8005536:	e031      	b.n	800559c <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8005538:	f000 fadc 	bl	8005af4 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <TimerStop+0xf0>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e02b      	b.n	800559c <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 8005544:	4b19      	ldr	r3, [pc, #100]	; (80055ac <TimerStop+0xf0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <TimerStop+0xf0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	4a15      	ldr	r2, [pc, #84]	; (80055ac <TimerStop+0xf0>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e020      	b.n	800559c <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <TimerStop+0xf0>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e01c      	b.n	800559c <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d110      	bne.n	800558c <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <TimerStop+0xc4>
        {
          cur = cur->Next;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 800557e:	e00d      	b.n	800559c <TimerStop+0xe0>
          cur = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	615a      	str	r2, [r3, #20]
        break;
 800558a:	e007      	b.n	800559c <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e2      	bne.n	8005562 <TimerStop+0xa6>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	200001e0 	.word	0x200001e0

080055b0 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 80055be:	6838      	ldr	r0, [r7, #0]
 80055c0:	f000 fa07 	bl	80059d2 <HW_RTC_ms2Tick>
 80055c4:	60f8      	str	r0, [r7, #12]

  TimerStop( obj );
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff ff78 	bl	80054bc <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 80055cc:	f000 f9f9 	bl	80059c2 <HW_RTC_GetMinimumTimeout>
 80055d0:	60b8      	str	r0, [r7, #8]

  if( ticks < minValue )
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d201      	bcs.n	80055de <TimerSetValue+0x2e>
  {
    ticks = minValue;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 80055f8:	f000 fa6a 	bl	8005ad0 <HW_RTC_GetTimerValue>
 80055fc:	6078      	str	r0, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa02 	bl	8005a08 <HW_RTC_Tick2ms>
 8005604:	4603      	mov	r3, r0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <TimerGetElapsedTime+0x12>
  {
    return 0;
 800561c:	2300      	movs	r3, #0
 800561e:	e00d      	b.n	800563c <TimerGetElapsedTime+0x2e>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 8005620:	f000 fa56 	bl	8005ad0 <HW_RTC_GetTimerValue>
 8005624:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9d3 	bl	80059d2 <HW_RTC_ms2Tick>
 800562c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	4618      	mov	r0, r3
 8005636:	f000 f9e7 	bl	8005a08 <HW_RTC_Tick2ms>
 800563a:	4603      	mov	r3, r0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <TimerExists+0x38>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8005652:	e008      	b.n	8005666 <TimerExists+0x22>
  {
    if( cur == obj )
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d101      	bne.n	8005660 <TimerExists+0x1c>
    {
      return true;
 800565c:	2301      	movs	r3, #1
 800565e:	e006      	b.n	800566e <TimerExists+0x2a>
    }
    cur = cur->Next;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f3      	bne.n	8005654 <TimerExists+0x10>
  }
  return false;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	200001e0 	.word	0x200001e0

08005680 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8005688:	f000 f99b 	bl	80059c2 <HW_RTC_GetMinimumTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681c      	ldr	r4, [r3, #0]
 800569a:	f000 fa01 	bl	8005aa0 <HW_RTC_GetTimerElapsedTime>
 800569e:	4602      	mov	r2, r0
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	429c      	cmp	r4, r3
 80056a6:	d206      	bcs.n	80056b6 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 80056a8:	f000 f9fa 	bl	8005aa0 <HW_RTC_GetTimerElapsedTime>
 80056ac:	4602      	mov	r2, r0
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	441a      	add	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f9c2 	bl	8005a44 <HW_RTC_SetAlarm>
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}

080056c8 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <TimerInsertTimer+0x5c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <TimerInsertTimer+0x5c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80056de:	e012      	b.n	8005706 <TimerInsertTimer+0x3e>
  {
    if( obj->Timestamp  > next->Timestamp )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d905      	bls.n	80056f8 <TimerInsertTimer+0x30>
    {
        cur = next;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	e006      	b.n	8005706 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	615a      	str	r2, [r3, #20]
        return;
 8005704:	e009      	b.n	800571a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e8      	bne.n	80056e0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	200001e0 	.word	0x200001e0

08005728 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <TimerInsertNewHeadTimer+0x38>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <TimerInsertNewHeadTimer+0x38>)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800574e:	4b04      	ldr	r3, [pc, #16]	; (8005760 <TimerInsertNewHeadTimer+0x38>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ff94 	bl	8005680 <TimerSetTimeout>
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200001e0 	.word	0x200001e0

08005764 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8005772:	e007      	b.n	8005784 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	1c53      	adds	r3, r2, #1
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1c59      	adds	r1, r3, #1
 800577e:	60f9      	str	r1, [r7, #12]
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	80fa      	strh	r2, [r7, #6]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f2      	bne.n	8005774 <memcpy1+0x10>
    }
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  DBG_PRINTF("Error_Handler\n");
  while(1);
 800579e:	e7fe      	b.n	800579e <Error_Handler+0x4>

080057a0 <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	460b      	mov	r3, r1
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	817b      	strh	r3, [r7, #10]

  RCC_GPIO_CLK_ENABLE((uint32_t)port);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a32      	ldr	r2, [pc, #200]	; (800587c <HW_GPIO_Init+0xdc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01c      	beq.n	80057f0 <HW_GPIO_Init+0x50>
 80057b6:	4a31      	ldr	r2, [pc, #196]	; (800587c <HW_GPIO_Init+0xdc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d803      	bhi.n	80057c4 <HW_GPIO_Init+0x24>
 80057bc:	4a30      	ldr	r2, [pc, #192]	; (8005880 <HW_GPIO_Init+0xe0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <HW_GPIO_Init+0x32>
 80057c2:	e042      	b.n	800584a <HW_GPIO_Init+0xaa>
 80057c4:	4a2f      	ldr	r2, [pc, #188]	; (8005884 <HW_GPIO_Init+0xe4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d021      	beq.n	800580e <HW_GPIO_Init+0x6e>
 80057ca:	4a2f      	ldr	r2, [pc, #188]	; (8005888 <HW_GPIO_Init+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02d      	beq.n	800582c <HW_GPIO_Init+0x8c>
 80057d0:	e03b      	b.n	800584a <HW_GPIO_Init+0xaa>
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	4b2d      	ldr	r3, [pc, #180]	; (800588c <HW_GPIO_Init+0xec>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	4a2c      	ldr	r2, [pc, #176]	; (800588c <HW_GPIO_Init+0xec>)
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	6313      	str	r3, [r2, #48]	; 0x30
 80057e2:	4b2a      	ldr	r3, [pc, #168]	; (800588c <HW_GPIO_Init+0xec>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	e03a      	b.n	8005866 <HW_GPIO_Init+0xc6>
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <HW_GPIO_Init+0xec>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	4a24      	ldr	r2, [pc, #144]	; (800588c <HW_GPIO_Init+0xec>)
 80057fa:	f043 0302 	orr.w	r3, r3, #2
 80057fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005800:	4b22      	ldr	r3, [pc, #136]	; (800588c <HW_GPIO_Init+0xec>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	e02b      	b.n	8005866 <HW_GPIO_Init+0xc6>
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	4b1e      	ldr	r3, [pc, #120]	; (800588c <HW_GPIO_Init+0xec>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	4a1d      	ldr	r2, [pc, #116]	; (800588c <HW_GPIO_Init+0xec>)
 8005818:	f043 0304 	orr.w	r3, r3, #4
 800581c:	6313      	str	r3, [r2, #48]	; 0x30
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <HW_GPIO_Init+0xec>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	e01c      	b.n	8005866 <HW_GPIO_Init+0xc6>
 800582c:	2300      	movs	r3, #0
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <HW_GPIO_Init+0xec>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <HW_GPIO_Init+0xec>)
 8005836:	f043 0308 	orr.w	r3, r3, #8
 800583a:	6313      	str	r3, [r2, #48]	; 0x30
 800583c:	4b13      	ldr	r3, [pc, #76]	; (800588c <HW_GPIO_Init+0xec>)
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	e00d      	b.n	8005866 <HW_GPIO_Init+0xc6>
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <HW_GPIO_Init+0xec>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	4a0e      	ldr	r2, [pc, #56]	; (800588c <HW_GPIO_Init+0xec>)
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	6313      	str	r3, [r2, #48]	; 0x30
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <HW_GPIO_Init+0xec>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8005866:	897a      	ldrh	r2, [r7, #10]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7fb fcd8 	bl	8001224 <HAL_GPIO_Init>
}
 8005874:	bf00      	nop
 8005876:	3728      	adds	r7, #40	; 0x28
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40020400 	.word	0x40020400
 8005880:	40020000 	.word	0x40020000
 8005884:	40020800 	.word	0x40020800
 8005888:	40020c00 	.word	0x40020c00
 800588c:	40023800 	.word	0x40023800

08005890 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	460b      	mov	r3, r1
 800589e:	817b      	strh	r3, [r7, #10]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 80058a0:	897b      	ldrh	r3, [r7, #10]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f858 	bl	8005958 <HW_GPIO_GetBitPos>
 80058a8:	4603      	mov	r3, r0
 80058aa:	617b      	str	r3, [r7, #20]

  if ( irqHandler != NULL)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d017      	beq.n	80058e2 <HW_GPIO_SetIrq+0x52>
  {
    GpioIrq[ BitPos ] = irqHandler;
 80058b2:	4910      	ldr	r1, [pc, #64]	; (80058f4 <HW_GPIO_SetIrq+0x64>)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 f8fd 	bl	8006abe <MSP_GetIRQn>
 80058c4:	4603      	mov	r3, r0
 80058c6:	74fb      	strb	r3, [r7, #19]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 80058c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058cc:	2200      	movs	r2, #0
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fb fc54 	bl	800117e <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ( IRQnb );
 80058d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fb fc6b 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 80058e0:	e004      	b.n	80058ec <HW_GPIO_SetIrq+0x5c>
    GpioIrq[ BitPos ] = NULL;
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <HW_GPIO_SetIrq+0x64>)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2100      	movs	r1, #0
 80058e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	200001e4 	.word	0x200001e4

080058f8 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	80fb      	strh	r3, [r7, #6]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f827 	bl	8005958 <HW_GPIO_GetBitPos>
 800590a:	4603      	mov	r3, r0
 800590c:	60fb      	str	r3, [r7, #12]

  if ( GpioIrq[ BitPos ]  != NULL)
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <HW_GPIO_IrqHandler+0x38>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HW_GPIO_IrqHandler+0x2e>
  {
    GpioIrq[ BitPos ](NULL);
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <HW_GPIO_IrqHandler+0x38>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005922:	2000      	movs	r0, #0
 8005924:	4798      	blx	r3
  }
}
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	200001e4 	.word	0x200001e4

08005934 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	460b      	mov	r3, r1
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	4619      	mov	r1, r3
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7fb fdec 	bl	8001528 <HAL_GPIO_WritePin>
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
  uint8_t PinPos=0;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HW_GPIO_GetBitPos+0x20>
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	f043 0308 	orr.w	r3, r3, #8
 8005976:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HW_GPIO_GetBitPos+0x34>
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8005992:	4013      	ands	r3, r2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HW_GPIO_GetBitPos+0x48>
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	f043 0302 	orr.w	r3, r3, #2
 800599e:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HW_GPIO_GetBitPos+0x5c>
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]

  return PinPos;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 80059c6:	2303      	movs	r3, #3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMilliSec )
{
 80059d2:	b590      	push	{r4, r7, lr}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	f04f 0000 	mov.w	r0, #0
 80059e4:	f04f 0100 	mov.w	r1, #0
 80059e8:	01e1      	lsls	r1, r4, #7
 80059ea:	ea41 6153 	orr.w	r1, r1, r3, lsr #25
 80059ee:	01d8      	lsls	r0, r3, #7
 80059f0:	f04f 027d 	mov.w	r2, #125	; 0x7d
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	f7fb f8b8 	bl	8000b6c <__aeabi_uldivmod>
 80059fc:	4603      	mov	r3, r0
 80059fe:	460c      	mov	r4, r1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd90      	pop	{r4, r7, pc}

08005a08 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms( uint32_t tick )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick>>N_PREDIV_S;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0a9b      	lsrs	r3, r3, #10
 8005a14:	60fb      	str	r3, [r7, #12]
  tick = tick&PREDIV_S;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1c:	607b      	str	r3, [r7, #4]
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a24:	fb02 f203 	mul.w	r2, r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	0a9b      	lsrs	r3, r3, #10
 8005a34:	4413      	add	r3, r2
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <HW_RTC_SetAlarm+0x58>)
 8005a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a52:	3303      	adds	r3, #3
 8005a54:	461c      	mov	r4, r3
 8005a56:	f000 f823 	bl	8005aa0 <HW_RTC_GetTimerElapsedTime>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	429c      	cmp	r4, r3
 8005a62:	d204      	bcs.n	8005a6e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8005a64:	2100      	movs	r1, #0
 8005a66:	2004      	movs	r0, #4
 8005a68:	f7ff fc5e 	bl	8005328 <LPM_SetStopMode>
 8005a6c:	e003      	b.n	8005a76 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 8005a6e:	2101      	movs	r1, #1
 8005a70:	2004      	movs	r0, #4
 8005a72:	f7ff fc59 	bl	8005328 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if( LPM_GetMode() == LPM_StopMode )
 8005a76:	f7ff fc87 	bl	8005388 <LPM_GetMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d106      	bne.n	8005a8e <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HW_RTC_SetAlarm+0x58>)
 8005a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f860 	bl	8005b54 <HW_RTC_StartWakeUpAlarm>
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd90      	pop	{r4, r7, pc}
 8005a9c:	20000224 	.word	0x20000224

08005aa0 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b089      	sub	sp, #36	; 0x24
 8005aa4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8005aa6:	f107 0208 	add.w	r2, r7, #8
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f948 	bl	8005d44 <HW_RTC_GetCalendarValue>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <HW_RTC_GetTimerElapsedTime+0x2c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	1ad3      	subs	r3, r2, r3
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd90      	pop	{r4, r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000270 	.word	0x20000270

08005ad0 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 8005ad0:	b590      	push	{r4, r7, lr}
 8005ad2:	b089      	sub	sp, #36	; 0x24
 8005ad4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8005ad6:	f107 0208 	add.w	r2, r7, #8
 8005ada:	1d3b      	adds	r3, r7, #4
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f930 	bl	8005d44 <HW_RTC_GetCalendarValue>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	61fb      	str	r3, [r7, #28]

  return( CalendarValue );
 8005aea:	69fb      	ldr	r3, [r7, #28]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3724      	adds	r7, #36	; 0x24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}

08005af4 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8005af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005afc:	4808      	ldr	r0, [pc, #32]	; (8005b20 <HW_RTC_StopAlarm+0x2c>)
 8005afe:	f7fc fb01 	bl	8002104 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HW_RTC_StopAlarm+0x2c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HW_RTC_StopAlarm+0x2c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005b12:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <HW_RTC_StopAlarm+0x30>)
 8005b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b1a:	615a      	str	r2, [r3, #20]
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000228 	.word	0x20000228
 8005b24:	40013c00 	.word	0x40013c00

08005b28 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8005b28:	b598      	push	{r3, r4, r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 8005b2c:	4906      	ldr	r1, [pc, #24]	; (8005b48 <HW_RTC_SetTimerContext+0x20>)
 8005b2e:	4807      	ldr	r0, [pc, #28]	; (8005b4c <HW_RTC_SetTimerContext+0x24>)
 8005b30:	f000 f908 	bl	8005d44 <HW_RTC_GetCalendarValue>
 8005b34:	4603      	mov	r3, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HW_RTC_SetTimerContext+0x28>)
 8005b3c:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 8005b3e:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <HW_RTC_SetTimerContext+0x28>)
 8005b40:	681b      	ldr	r3, [r3, #0]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	bd98      	pop	{r3, r4, r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000274 	.word	0x20000274
 8005b4c:	20000288 	.word	0x20000288
 8005b50:	20000270 	.word	0x20000270

08005b54 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8005b54:	b5b0      	push	{r4, r5, r7, lr}
 8005b56:	b08c      	sub	sp, #48	; 0x30
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t rtcAlarmSeconds = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t rtcAlarmMinutes = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t rtcAlarmHours = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t rtcAlarmDays = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8005b70:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <HW_RTC_StartWakeUpAlarm+0x1d8>)
 8005b72:	f107 0410 	add.w	r4, r7, #16
 8005b76:	1d1d      	adds	r5, r3, #4
 8005b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	6023      	str	r3, [r4, #0]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8005b80:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <HW_RTC_StartWakeUpAlarm+0x1d8>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	60fb      	str	r3, [r7, #12]

  HW_RTC_StopAlarm( );
 8005b86:	f7ff ffb5 	bl	8005af4 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005b92:	3303      	adds	r3, #3
 8005b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ba2:	4413      	add	r3, r2
 8005ba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0a9b      	lsrs	r3, r3, #10
 8005baa:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 8005bb0:	e008      	b.n	8005bc4 <HW_RTC_StartWakeUpAlarm+0x70>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8005bb8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005bbc:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8005bbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a5a      	ldr	r2, [pc, #360]	; (8005d30 <HW_RTC_StartWakeUpAlarm+0x1dc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d8f2      	bhi.n	8005bb2 <HW_RTC_StartWakeUpAlarm+0x5e>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8005bcc:	7c3b      	ldrb	r3, [r7, #16]
 8005bce:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8005bd0:	e006      	b.n	8005be0 <HW_RTC_StartWakeUpAlarm+0x8c>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005bd8:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8005bda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bdc:	3301      	adds	r3, #1
 8005bde:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8005be6:	d2f4      	bcs.n	8005bd2 <HW_RTC_StartWakeUpAlarm+0x7e>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8005be8:	7c7b      	ldrb	r3, [r7, #17]
 8005bea:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8005bec:	e005      	b.n	8005bfa <HW_RTC_StartWakeUpAlarm+0xa6>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3b3c      	subs	r3, #60	; 0x3c
 8005bf2:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8005bf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b3b      	cmp	r3, #59	; 0x3b
 8005bfe:	d8f6      	bhi.n	8005bee <HW_RTC_StartWakeUpAlarm+0x9a>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8005c00:	7cbb      	ldrb	r3, [r7, #18]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8005c0c:	e006      	b.n	8005c1c <HW_RTC_StartWakeUpAlarm+0xc8>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 8005c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005c14:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSeconds++;
 8005c16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c18:	3301      	adds	r3, #1
 8005c1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8005c1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c22:	d2f4      	bcs.n	8005c0e <HW_RTC_StartWakeUpAlarm+0xba>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8005c24:	e005      	b.n	8005c32 <HW_RTC_StartWakeUpAlarm+0xde>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8005c26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c28:	3b3c      	subs	r3, #60	; 0x3c
 8005c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    rtcAlarmMinutes++;
 8005c2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c2e:	3301      	adds	r3, #1
 8005c30:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8005c32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c34:	2b3b      	cmp	r3, #59	; 0x3b
 8005c36:	d8f6      	bhi.n	8005c26 <HW_RTC_StartWakeUpAlarm+0xd2>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8005c38:	e005      	b.n	8005c46 <HW_RTC_StartWakeUpAlarm+0xf2>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8005c3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c3c:	3b3c      	subs	r3, #60	; 0x3c
 8005c3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    rtcAlarmHours++;
 8005c40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c42:	3301      	adds	r3, #1
 8005c44:	853b      	strh	r3, [r7, #40]	; 0x28
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8005c46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c48:	2b3b      	cmp	r3, #59	; 0x3b
 8005c4a:	d8f6      	bhi.n	8005c3a <HW_RTC_StartWakeUpAlarm+0xe6>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8005c4c:	e005      	b.n	8005c5a <HW_RTC_StartWakeUpAlarm+0x106>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8005c4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c50:	3b18      	subs	r3, #24
 8005c52:	853b      	strh	r3, [r7, #40]	; 0x28
    rtcAlarmDays++;
 8005c54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c56:	3301      	adds	r3, #1
 8005c58:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8005c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c5c:	2b17      	cmp	r3, #23
 8005c5e:	d8f6      	bhi.n	8005c4e <HW_RTC_StartWakeUpAlarm+0xfa>
  }

  if( RTC_DateStruct.Year % 4 == 0 )
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d113      	bne.n	8005c94 <HW_RTC_StartWakeUpAlarm+0x140>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )
 8005c6c:	7b7b      	ldrb	r3, [r7, #13]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	4a30      	ldr	r2, [pc, #192]	; (8005d34 <HW_RTC_StartWakeUpAlarm+0x1e0>)
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d91e      	bls.n	8005cba <HW_RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8005c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c7e:	7b7a      	ldrb	r2, [r7, #13]
 8005c80:	3a01      	subs	r2, #1
 8005c82:	492c      	ldr	r1, [pc, #176]	; (8005d34 <HW_RTC_StartWakeUpAlarm+0x1e0>)
 8005c84:	5c8a      	ldrb	r2, [r1, r2]
 8005c86:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c8a:	fb02 f201 	mul.w	r2, r2, r1
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c92:	e012      	b.n	8005cba <HW_RTC_StartWakeUpAlarm+0x166>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )
 8005c94:	7b7b      	ldrb	r3, [r7, #13]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <HW_RTC_StartWakeUpAlarm+0x1e4>)
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d90a      	bls.n	8005cba <HW_RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8005ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ca6:	7b7a      	ldrb	r2, [r7, #13]
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	4923      	ldr	r1, [pc, #140]	; (8005d38 <HW_RTC_StartWakeUpAlarm+0x1e4>)
 8005cac:	5c8a      	ldrb	r2, [r1, r2]
 8005cae:	fb93 f1f2 	sdiv	r1, r3, r2
 8005cb2:	fb02 f201 	mul.w	r2, r2, r1
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 8005cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cbc:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005cc0:	3303      	adds	r3, #3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cc6:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005cce:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8005cd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cd6:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8005cd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cde:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8005ce0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005ce6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8005ce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cee:	f883 2020 	strb.w	r2, [r3, #32]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8005cf2:	7cfa      	ldrb	r2, [r7, #19]
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cf6:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8005d04:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4908      	ldr	r1, [pc, #32]	; (8005d3c <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8005d1c:	4808      	ldr	r0, [pc, #32]	; (8005d40 <HW_RTC_StartWakeUpAlarm+0x1ec>)
 8005d1e:	f7fc f89d 	bl	8001e5c <HAL_RTC_SetAlarm_IT>
}
 8005d22:	bf00      	nop
 8005d24:	3730      	adds	r7, #48	; 0x30
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bdb0      	pop	{r4, r5, r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000270 	.word	0x20000270
 8005d30:	0001517f 	.word	0x0001517f
 8005d34:	08007da0 	.word	0x08007da0
 8005d38:	08007d94 	.word	0x08007d94
 8005d3c:	20000248 	.word	0x20000248
 8005d40:	20000228 	.word	0x20000228

08005d44 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint64_t calendarValue = 0;
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	4838      	ldr	r0, [pc, #224]	; (8005e40 <HW_RTC_GetCalendarValue+0xfc>)
 8005d60:	f7fc f81e 	bl	8001da0 <HAL_RTC_GetTime>
//    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
//
//  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC) );

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8005d6e:	fb03 f302 	mul.w	r3, r3, r2
 8005d72:	3303      	adds	r3, #3
 8005d74:	089b      	lsrs	r3, r3, #2
 8005d76:	60fb      	str	r3, [r7, #12]

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	78db      	ldrb	r3, [r3, #3]
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HW_RTC_GetCalendarValue+0x46>
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HW_RTC_GetCalendarValue+0x100>)
 8005d88:	e000      	b.n	8005d8c <HW_RTC_GetCalendarValue+0x48>
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <HW_RTC_GetCalendarValue+0x104>)
 8005d8c:	60bb      	str	r3, [r7, #8]

  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	4613      	mov	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3301      	adds	r3, #1
 8005da0:	0fda      	lsrs	r2, r3, #31
 8005da2:	4413      	add	r3, r2
 8005da4:	105b      	asrs	r3, r3, #1
 8005da6:	4619      	mov	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	1acb      	subs	r3, r1, r3
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  seconds += (RTC_DateStruct->Date -1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	789b      	ldrb	r3, [r3, #2]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HW_RTC_GetCalendarValue+0x108>)
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	60fb      	str	r3, [r7, #12]

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	789b      	ldrb	r3, [r3, #2]
 8005dde:	4618      	mov	r0, r3
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005dea:	fb03 f202 	mul.w	r2, r3, r2
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	4619      	mov	r1, r3
 8005df4:	460b      	mov	r3, r1
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	1a5b      	subs	r3, r3, r1
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	4403      	add	r3, r0
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]



  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	0d95      	lsrs	r5, r2, #22
 8005e10:	0294      	lsls	r4, r2, #10
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005e1a:	3303      	adds	r3, #3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	18a0      	adds	r0, r4, r2
 8005e24:	eb45 0103 	adc.w	r1, r5, r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	e9c7 3404 	strd	r3, r4, [r7, #16]

  return( calendarValue );
 8005e30:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	4621      	mov	r1, r4
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000228 	.word	0x20000228
 8005e44:	00445550 	.word	0x00445550
 8005e48:	0099aaa0 	.word	0x0099aaa0
 8005e4c:	00015180 	.word	0x00015180

08005e50 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8005e56:	4b1e      	ldr	r3, [pc, #120]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e58:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <HW_SPI_Init+0x84>)
 8005e5a:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 8005e5c:	481e      	ldr	r0, [pc, #120]	; (8005ed8 <HW_SPI_Init+0x88>)
 8005e5e:	f000 f891 	bl	8005f84 <SpiFrequency>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e66:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e74:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8005e76:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8005e82:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8005e8e:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <HW_SPI_Init+0x8c>)
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	4a0c      	ldr	r2, [pc, #48]	; (8005edc <HW_SPI_Init+0x8c>)
 8005eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <HW_SPI_Init+0x8c>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 8005ebe:	4804      	ldr	r0, [pc, #16]	; (8005ed0 <HW_SPI_Init+0x80>)
 8005ec0:	f7fc f9e9 	bl	8002296 <HAL_SPI_Init>
    /* Initialization Error */
    // Error_Handler();
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit(  );
 8005ec4:	f000 f80c 	bl	8005ee0 <HW_SPI_IoInit>
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	2000028c 	.word	0x2000028c
 8005ed4:	40013000 	.word	0x40013000
 8005ed8:	00989680 	.word	0x00989680
 8005edc:	40023800 	.word	0x40023800

08005ee0 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8005ee6:	1d3b      	adds	r3, r7, #4
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	611a      	str	r2, [r3, #16]


  initStruct.Mode = GPIO_MODE_AF_PP;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN  ; //GPIO_PULLDOWN
 8005ef8:	2302      	movs	r3, #2
 8005efa:	60fb      	str	r3, [r7, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005efc:	2303      	movs	r3, #3
 8005efe:	613b      	str	r3, [r7, #16]
  initStruct.Alternate= SPI1_AF;
 8005f00:	2305      	movs	r3, #5
 8005f02:	617b      	str	r3, [r7, #20]

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8005f04:	1d3b      	adds	r3, r7, #4
 8005f06:	461a      	mov	r2, r3
 8005f08:	2120      	movs	r1, #32
 8005f0a:	4811      	ldr	r0, [pc, #68]	; (8005f50 <HW_SPI_IoInit+0x70>)
 8005f0c:	f7ff fc48 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	461a      	mov	r2, r3
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	480e      	ldr	r0, [pc, #56]	; (8005f50 <HW_SPI_IoInit+0x70>)
 8005f18:	f7ff fc42 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2180      	movs	r1, #128	; 0x80
 8005f22:	480b      	ldr	r0, [pc, #44]	; (8005f50 <HW_SPI_IoInit+0x70>)
 8005f24:	f7ff fc3c 	bl	80057a0 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLUP	;//GPIO_PULLUP
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	461a      	mov	r2, r3
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	4807      	ldr	r0, [pc, #28]	; (8005f54 <HW_SPI_IoInit+0x74>)
 8005f38:	f7ff fc32 	bl	80057a0 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	2140      	movs	r1, #64	; 0x40
 8005f40:	4804      	ldr	r0, [pc, #16]	; (8005f54 <HW_SPI_IoInit+0x74>)
 8005f42:	f7ff fcf7 	bl	8005934 <HW_GPIO_Write>
}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40020000 	.word	0x40020000
 8005f54:	40020400 	.word	0x40020400

08005f58 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	4603      	mov	r3, r0
 8005f60:	80fb      	strh	r3, [r7, #6]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);
 8005f62:	f107 020e 	add.w	r2, r7, #14
 8005f66:	1db9      	adds	r1, r7, #6
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4803      	ldr	r0, [pc, #12]	; (8005f80 <HW_SPI_InOut+0x28>)
 8005f72:	f7fc fc31 	bl	80027d8 <HAL_SPI_TransmitReceive>

  return rxData;}
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	2000028c 	.word	0x2000028c

08005f84 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8005f90:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <SpiFrequency+0x78>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while( SysClkTmp > hz)
 8005f96:	e008      	b.n	8005faa <SpiFrequency+0x26>
  {
    divisor++;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b06      	cmp	r3, #6
 8005fa8:	d804      	bhi.n	8005fb4 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d8f2      	bhi.n	8005f98 <SpiFrequency+0x14>
 8005fb2:	e000      	b.n	8005fb6 <SpiFrequency+0x32>
      break;
 8005fb4:	bf00      	nop
  }

  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <SpiFrequency+0x40>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	e000      	b.n	8005fc6 <SpiFrequency+0x42>
 8005fc4:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )|
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <SpiFrequency+0x50>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e000      	b.n	8005fd6 <SpiFrequency+0x52>
 8005fd4:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 8005fd6:	4313      	orrs	r3, r2
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	f002 0201 	and.w	r2, r2, #1
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	d101      	bne.n	8005fe6 <SpiFrequency+0x62>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	e000      	b.n	8005fe8 <SpiFrequency+0x64>
 8005fe6:	2208      	movs	r2, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]

  return baudRate;
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	2000004c 	.word	0x2000004c

08006000 <SX1272GetWakeTime>:
    SX1272SetPublicNetwork,
    SX1272GetWakeupTime
};

uint32_t SX1272GetWakeTime( void )
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return  0;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <SX1272SetXO>:

void SX1272SetXO( uint8_t state )
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <SX1272IoInit>:
void SX1272IoInit( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	611a      	str	r2, [r3, #16]

  SX1272BoardInit( &BoardCallbacks );
 800603c:	4812      	ldr	r0, [pc, #72]	; (8006088 <SX1272IoInit+0x60>)
 800603e:	f7fd f9b9 	bl	80033b4 <SX1272BoardInit>

  initStruct.Mode = GPIO_MODE_IT_RISING;
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <SX1272IoInit+0x64>)
 8006044:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8006046:	2302      	movs	r3, #2
 8006048:	60fb      	str	r3, [r7, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800604a:	2303      	movs	r3, #3
 800604c:	613b      	str	r3, [r7, #16]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	461a      	mov	r2, r3
 8006052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006056:	480e      	ldr	r0, [pc, #56]	; (8006090 <SX1272IoInit+0x68>)
 8006058:	f7ff fba2 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800605c:	1d3b      	adds	r3, r7, #4
 800605e:	461a      	mov	r2, r3
 8006060:	2108      	movs	r1, #8
 8006062:	480c      	ldr	r0, [pc, #48]	; (8006094 <SX1272IoInit+0x6c>)
 8006064:	f7ff fb9c 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	461a      	mov	r2, r3
 800606c:	2120      	movs	r1, #32
 800606e:	4809      	ldr	r0, [pc, #36]	; (8006094 <SX1272IoInit+0x6c>)
 8006070:	f7ff fb96 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	461a      	mov	r2, r3
 8006078:	2110      	movs	r1, #16
 800607a:	4806      	ldr	r0, [pc, #24]	; (8006094 <SX1272IoInit+0x6c>)
 800607c:	f7ff fb90 	bl	80057a0 <HW_GPIO_Init>
}
 8006080:	bf00      	nop
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000020 	.word	0x20000020
 800608c:	10110000 	.word	0x10110000
 8006090:	40020000 	.word	0x40020000
 8006094:	40020400 	.word	0x40020400

08006098 <SX1272IoIrqInit>:

void SX1272IoIrqInit( DioIrqHandler **irqHandlers )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80060aa:	480f      	ldr	r0, [pc, #60]	; (80060e8 <SX1272IoIrqInit+0x50>)
 80060ac:	f7ff fbf0 	bl	8005890 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2108      	movs	r1, #8
 80060ba:	480c      	ldr	r0, [pc, #48]	; (80060ec <SX1272IoIrqInit+0x54>)
 80060bc:	f7ff fbe8 	bl	8005890 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3308      	adds	r3, #8
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	2120      	movs	r1, #32
 80060ca:	4808      	ldr	r0, [pc, #32]	; (80060ec <SX1272IoIrqInit+0x54>)
 80060cc:	f7ff fbe0 	bl	8005890 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	330c      	adds	r3, #12
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	2110      	movs	r1, #16
 80060da:	4804      	ldr	r0, [pc, #16]	; (80060ec <SX1272IoIrqInit+0x54>)
 80060dc:	f7ff fbd8 	bl	8005890 <HW_GPIO_SetIrq>
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40020000 	.word	0x40020000
 80060ec:	40020400 	.word	0x40020400

080060f0 <SX1272IoDeInit>:

void SX1272IoDeInit( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80060f6:	1d3b      	adds	r3, r7, #4
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]

  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <SX1272IoDeInit+0x58>)
 8006106:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8006108:	2302      	movs	r3, #2
 800610a:	60fb      	str	r3, [r7, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	461a      	mov	r2, r3
 8006110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <SX1272IoDeInit+0x5c>)
 8006116:	f7ff fb43 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	461a      	mov	r2, r3
 800611e:	2108      	movs	r1, #8
 8006120:	480b      	ldr	r0, [pc, #44]	; (8006150 <SX1272IoDeInit+0x60>)
 8006122:	f7ff fb3d 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	461a      	mov	r2, r3
 800612a:	2120      	movs	r1, #32
 800612c:	4808      	ldr	r0, [pc, #32]	; (8006150 <SX1272IoDeInit+0x60>)
 800612e:	f7ff fb37 	bl	80057a0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8006132:	1d3b      	adds	r3, r7, #4
 8006134:	461a      	mov	r2, r3
 8006136:	2110      	movs	r1, #16
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <SX1272IoDeInit+0x60>)
 800613a:	f7ff fb31 	bl	80057a0 <HW_GPIO_Init>
}
 800613e:	bf00      	nop
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	10110000 	.word	0x10110000
 800614c:	40020000 	.word	0x40020000
 8006150:	40020400 	.word	0x40020400

08006154 <SX1272SetRfTxPower>:

void SX1272SetRfTxPower( int8_t power )
{
 8006154:	b590      	push	{r4, r7, lr}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1272Read( REG_PACONFIG );
 8006166:	2009      	movs	r0, #9
 8006168:	f7fe fb82 	bl	8004870 <SX1272Read>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
    paDac = SX1272Read( REG_PADAC );
 8006170:	205a      	movs	r0, #90	; 0x5a
 8006172:	f7fe fb7d 	bl	8004870 <SX1272Read>
 8006176:	4603      	mov	r3, r0
 8006178:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1272GetPaSelect( SX1272.Settings.Channel );
 800617a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006182:	b25c      	sxtb	r4, r3
 8006184:	4b43      	ldr	r3, [pc, #268]	; (8006294 <SX1272SetRfTxPower+0x140>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 f885 	bl	8006298 <SX1272GetPaSelect>
 800618e:	4603      	mov	r3, r0
 8006190:	b25b      	sxtb	r3, r3
 8006192:	4323      	orrs	r3, r4
 8006194:	b25b      	sxtb	r3, r3
 8006196:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da4e      	bge.n	800623e <SX1272SetRfTxPower+0xea>
    {
        if( power > 17 )
 80061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a4:	2b11      	cmp	r3, #17
 80061a6:	dd04      	ble.n	80061b2 <SX1272SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	f043 0307 	orr.w	r3, r3, #7
 80061ae:	73bb      	strb	r3, [r7, #14]
 80061b0:	e008      	b.n	80061c4 <SX1272SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80061b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f043 0304 	orr.w	r3, r3, #4
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	d11b      	bne.n	8006206 <SX1272SetRfTxPower+0xb2>
        {
            if( power < 5 )
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	dc01      	bgt.n	80061da <SX1272SetRfTxPower+0x86>
            {
                power = 5;
 80061d6:	2305      	movs	r3, #5
 80061d8:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 80061da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061de:	2b14      	cmp	r3, #20
 80061e0:	dd01      	ble.n	80061e6 <SX1272SetRfTxPower+0x92>
            {
                power = 20;
 80061e2:	2314      	movs	r3, #20
 80061e4:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80061e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	b25a      	sxtb	r2, r3
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	3b05      	subs	r3, #5
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	4313      	orrs	r3, r2
 8006200:	b25b      	sxtb	r3, r3
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	e037      	b.n	8006276 <SX1272SetRfTxPower+0x122>
        }
        else
        {
            if( power < 2 )
 8006206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620a:	2b01      	cmp	r3, #1
 800620c:	dc01      	bgt.n	8006212 <SX1272SetRfTxPower+0xbe>
            {
                power = 2;
 800620e:	2302      	movs	r3, #2
 8006210:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 8006212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006216:	2b11      	cmp	r3, #17
 8006218:	dd01      	ble.n	800621e <SX1272SetRfTxPower+0xca>
            {
                power = 17;
 800621a:	2311      	movs	r3, #17
 800621c:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006222:	f023 030f 	bic.w	r3, r3, #15
 8006226:	b25a      	sxtb	r2, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	3b02      	subs	r3, #2
 800622c:	b2db      	uxtb	r3, r3
 800622e:	b25b      	sxtb	r3, r3
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	b25b      	sxtb	r3, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	b25b      	sxtb	r3, r3
 800623a:	73fb      	strb	r3, [r7, #15]
 800623c:	e01b      	b.n	8006276 <SX1272SetRfTxPower+0x122>
        }
    }
    else
    {
        if( power < -1 )
 800623e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	da01      	bge.n	800624c <SX1272SetRfTxPower+0xf8>
        {
            power = -1;
 8006248:	23ff      	movs	r3, #255	; 0xff
 800624a:	71fb      	strb	r3, [r7, #7]
        }
        if( power > 14 )
 800624c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006250:	2b0e      	cmp	r3, #14
 8006252:	dd01      	ble.n	8006258 <SX1272SetRfTxPower+0x104>
        {
            power = 14;
 8006254:	230e      	movs	r3, #14
 8006256:	71fb      	strb	r3, [r7, #7]
        }
        paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8006258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800625c:	f023 030f 	bic.w	r3, r3, #15
 8006260:	b25a      	sxtb	r2, r3
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	3301      	adds	r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	b25b      	sxtb	r3, r3
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	b25b      	sxtb	r3, r3
 8006270:	4313      	orrs	r3, r2
 8006272:	b25b      	sxtb	r3, r3
 8006274:	73fb      	strb	r3, [r7, #15]
    }
    SX1272Write( REG_PACONFIG, paConfig );
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	4619      	mov	r1, r3
 800627a:	2009      	movs	r0, #9
 800627c:	f7fe fae6 	bl	800484c <SX1272Write>
    SX1272Write( REG_PADAC, paDac );
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	4619      	mov	r1, r3
 8006284:	205a      	movs	r0, #90	; 0x5a
 8006286:	f7fe fae1 	bl	800484c <SX1272Write>
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	bd90      	pop	{r4, r7, pc}
 8006292:	bf00      	nop
 8006294:	20000460 	.word	0x20000460

08006298 <SX1272GetPaSelect>:

uint8_t SX1272GetPaSelect( uint32_t channel )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <SX1272SetAntSwLowPower>:

void SX1272SetAntSwLowPower( bool status )
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	4603      	mov	r3, r0
 80062b6:	71fb      	strb	r3, [r7, #7]
  //Ant Switch Controlled by SX1272 IC
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <SX1272SetAntSw>:

void SX1272SetAntSw( uint8_t opMode )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
    switch( opMode )
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d103      	bne.n	80062dc <SX1272SetAntSw+0x18>
    {
    case RFLR_OPMODE_TRANSMITTER:
        SX1272.RxTx = 1;
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <SX1272SetAntSw+0x2c>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
        break;
 80062da:	e003      	b.n	80062e4 <SX1272SetAntSw+0x20>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        SX1272.RxTx = 0;
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <SX1272SetAntSw+0x2c>)
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
        break;
 80062e2:	bf00      	nop
    }
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20000460 	.word	0x20000460

080062f4 <SX1272CheckRfFrequency>:

bool SX1272CheckRfFrequency( uint32_t frequency )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80062fc:	2301      	movs	r3, #1
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <main>:
int recibidoReady = 0;
int recibidoOK = 0;
char info[10];
int i = 1;

int main(void) {
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b08d      	sub	sp, #52	; 0x34
 8006310:	af0a      	add	r7, sp, #40	; 0x28
	bool isMaster = true;
 8006312:	2301      	movs	r3, #1
 8006314:	71fb      	strb	r3, [r7, #7]

	HAL_Init();
 8006316:	f7fa fda9 	bl	8000e6c <HAL_Init>

	SystemClock_Config();
 800631a:	f000 fa13 	bl	8006744 <SystemClock_Config>

	//DBG_Init();
	Radio.IoInit();
 800631e:	4ba6      	ldr	r3, [pc, #664]	; (80065b8 <main+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4798      	blx	r3
	HW_SPI_Init();
 8006324:	f7ff fd94 	bl	8005e50 <HW_SPI_Init>
	vcom_Init();
 8006328:	f000 fd4a 	bl	8006dc0 <vcom_Init>
	UART_Init();
 800632c:	f000 fcea 	bl	8006d04 <UART_Init>
	USART2_UART_Init();
 8006330:	f000 fd20 	bl	8006d74 <USART2_UART_Init>

    SPI_Init(&hspi2);
 8006334:	48a1      	ldr	r0, [pc, #644]	; (80065bc <main+0x2b0>)
 8006336:	f000 fa6f 	bl	8006818 <SPI_Init>
    SPI2_Init();
 800633a:	f000 faff 	bl	800693c <SPI2_Init>

	PRINTF("------------- INICIO -------------\r\n");
 800633e:	48a0      	ldr	r0, [pc, #640]	; (80065c0 <main+0x2b4>)
 8006340:	f000 fd6c 	bl	8006e1c <vcom_Send>

//   Radio initialization
	RadioEvents.TxDone = OnTxDone;
 8006344:	4b9f      	ldr	r3, [pc, #636]	; (80065c4 <main+0x2b8>)
 8006346:	4aa0      	ldr	r2, [pc, #640]	; (80065c8 <main+0x2bc>)
 8006348:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800634a:	4b9e      	ldr	r3, [pc, #632]	; (80065c4 <main+0x2b8>)
 800634c:	4a9f      	ldr	r2, [pc, #636]	; (80065cc <main+0x2c0>)
 800634e:	609a      	str	r2, [r3, #8]
	RadioEvents.TxTimeout = OnTxTimeout;
 8006350:	4b9c      	ldr	r3, [pc, #624]	; (80065c4 <main+0x2b8>)
 8006352:	4a9f      	ldr	r2, [pc, #636]	; (80065d0 <main+0x2c4>)
 8006354:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRxTimeout;
 8006356:	4b9b      	ldr	r3, [pc, #620]	; (80065c4 <main+0x2b8>)
 8006358:	4a9e      	ldr	r2, [pc, #632]	; (80065d4 <main+0x2c8>)
 800635a:	60da      	str	r2, [r3, #12]
	RadioEvents.RxError = OnRxError;
 800635c:	4b99      	ldr	r3, [pc, #612]	; (80065c4 <main+0x2b8>)
 800635e:	4a9e      	ldr	r2, [pc, #632]	; (80065d8 <main+0x2cc>)
 8006360:	611a      	str	r2, [r3, #16]

	Radio.Init(&RadioEvents);
 8006362:	4b95      	ldr	r3, [pc, #596]	; (80065b8 <main+0x2ac>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4897      	ldr	r0, [pc, #604]	; (80065c4 <main+0x2b8>)
 8006368:	4798      	blx	r3

	Radio.SetChannel( RF_FREQUENCY);
 800636a:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <main+0x2ac>)
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	489b      	ldr	r0, [pc, #620]	; (80065dc <main+0x2d0>)
 8006370:	4798      	blx	r3

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8006372:	4b91      	ldr	r3, [pc, #580]	; (80065b8 <main+0x2ac>)
 8006374:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006376:	4b9a      	ldr	r3, [pc, #616]	; (80065e0 <main+0x2d4>)
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	2300      	movs	r3, #0
 800637c:	9307      	str	r3, [sp, #28]
 800637e:	2300      	movs	r3, #0
 8006380:	9306      	str	r3, [sp, #24]
 8006382:	2300      	movs	r3, #0
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	2301      	movs	r3, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	2300      	movs	r3, #0
 800638c:	9303      	str	r3, [sp, #12]
 800638e:	2308      	movs	r3, #8
 8006390:	9302      	str	r3, [sp, #8]
 8006392:	2301      	movs	r3, #1
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	2307      	movs	r3, #7
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	2200      	movs	r2, #0
 800639e:	210e      	movs	r1, #14
 80063a0:	2001      	movs	r0, #1
 80063a2:	47a0      	blx	r4
	LORA_SPREADING_FACTOR, LORA_CODINGRATE,
	LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
	true, 0, 0, LORA_IQ_INVERSION_ON, 3000000);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80063a4:	4b84      	ldr	r3, [pc, #528]	; (80065b8 <main+0x2ac>)
 80063a6:	6a1c      	ldr	r4, [r3, #32]
 80063a8:	2301      	movs	r3, #1
 80063aa:	9309      	str	r3, [sp, #36]	; 0x24
 80063ac:	2300      	movs	r3, #0
 80063ae:	9308      	str	r3, [sp, #32]
 80063b0:	2300      	movs	r3, #0
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	2300      	movs	r3, #0
 80063b6:	9306      	str	r3, [sp, #24]
 80063b8:	2301      	movs	r3, #1
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	2300      	movs	r3, #0
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	2300      	movs	r3, #0
 80063c2:	9303      	str	r3, [sp, #12]
 80063c4:	2305      	movs	r3, #5
 80063c6:	9302      	str	r3, [sp, #8]
 80063c8:	2308      	movs	r3, #8
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	2300      	movs	r3, #0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2301      	movs	r3, #1
 80063d2:	2207      	movs	r2, #7
 80063d4:	2100      	movs	r1, #0
 80063d6:	2001      	movs	r0, #1
 80063d8:	47a0      	blx	r4
	LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
	LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0,
	LORA_IQ_INVERSION_ON, true);
	//Establece la radio en modo de recepción durante un tiempo
	Radio.Rx( RX_TIMEOUT_VALUE);
 80063da:	4b77      	ldr	r3, [pc, #476]	; (80065b8 <main+0x2ac>)
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063e2:	4798      	blx	r3
	DelayMs(1);
 80063e4:	2001      	movs	r0, #1
 80063e6:	f7fe ff95 	bl	8005314 <DelayMs>
	Radio.Send("PREST", BufferSize);
 80063ea:	4b73      	ldr	r3, [pc, #460]	; (80065b8 <main+0x2ac>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a7d      	ldr	r2, [pc, #500]	; (80065e4 <main+0x2d8>)
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	4611      	mov	r1, r2
 80063f6:	487c      	ldr	r0, [pc, #496]	; (80065e8 <main+0x2dc>)
 80063f8:	4798      	blx	r3
	DelayMs(1);
 80063fa:	2001      	movs	r0, #1
 80063fc:	f7fe ff8a 	bl	8005314 <DelayMs>

//		HAL_SPI_TransmitReceive(&hspi2, "HOLA", (uint8_t *) BufferSPI, 8, 4000);
//		while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
//		}

		HAL_SPI_Receive(&hspi2, (uint8_t *) BufferSPI, 8, 1000);
 8006400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006404:	2208      	movs	r2, #8
 8006406:	4979      	ldr	r1, [pc, #484]	; (80065ec <main+0x2e0>)
 8006408:	486c      	ldr	r0, [pc, #432]	; (80065bc <main+0x2b0>)
 800640a:	f7fc f8dc 	bl	80025c6 <HAL_SPI_Receive>
//		while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
//			}
//		PRINTF("%s\r\n", BufferSPI);
	//	HAL_Delay(1000);
//		//sprintf(info, "%s", BufferSPI);
		strcpy(misDat[i].datos, BufferSPI);
 800640e:	4b78      	ldr	r3, [pc, #480]	; (80065f0 <main+0x2e4>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4a76      	ldr	r2, [pc, #472]	; (80065f4 <main+0x2e8>)
 800641c:	4413      	add	r3, r2
 800641e:	4973      	ldr	r1, [pc, #460]	; (80065ec <main+0x2e0>)
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fe88 	bl	8007136 <strcpy>
//		//PRINTF("%s\r\n", misDat[i] .datos);
//
//
//		//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi2, (uint8_t *) "ADIOS", 5, 1000);
 8006426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800642a:	2205      	movs	r2, #5
 800642c:	4972      	ldr	r1, [pc, #456]	; (80065f8 <main+0x2ec>)
 800642e:	4863      	ldr	r0, [pc, #396]	; (80065bc <main+0x2b0>)
 8006430:	f7fb ff95 	bl	800235e <HAL_SPI_Transmit>
//			}


//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
		switch (State) {
 8006434:	4b71      	ldr	r3, [pc, #452]	; (80065fc <main+0x2f0>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	3b01      	subs	r3, #1
 800643a:	2b04      	cmp	r3, #4
 800643c:	f200 80f6 	bhi.w	800662c <main+0x320>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <main+0x13c>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800645d 	.word	0x0800645d
 800644c:	08006527 	.word	0x08006527
 8006450:	08006527 	.word	0x08006527
 8006454:	08006515 	.word	0x08006515
 8006458:	080065a7 	.word	0x080065a7
		case RX:
			if (isMaster == true) {
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d04f      	beq.n	8006502 <main+0x1f6>
				if (BufferSize > 0) {
 8006462:	4b60      	ldr	r3, [pc, #384]	; (80065e4 <main+0x2d8>)
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d04b      	beq.n	8006502 <main+0x1f6>
					PRINTF("MASTER: %s\n", Buffer);
 800646a:	4965      	ldr	r1, [pc, #404]	; (8006600 <main+0x2f4>)
 800646c:	4865      	ldr	r0, [pc, #404]	; (8006604 <main+0x2f8>)
 800646e:	f000 fcd5 	bl	8006e1c <vcom_Send>
					if (strncmp((const char*) Buffer, (const char*) ReadyMsg, 5)== 0) {
 8006472:	2205      	movs	r2, #5
 8006474:	4964      	ldr	r1, [pc, #400]	; (8006608 <main+0x2fc>)
 8006476:	4862      	ldr	r0, [pc, #392]	; (8006600 <main+0x2f4>)
 8006478:	f000 fe65 	bl	8007146 <strncmp>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10e      	bne.n	80064a0 <main+0x194>
						PRINTF("RECIBIDO READY\r\n");
 8006482:	4862      	ldr	r0, [pc, #392]	; (800660c <main+0x300>)
 8006484:	f000 fcca 	bl	8006e1c <vcom_Send>
						Radio.Send("PREST", BufferSize);
 8006488:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <main+0x2ac>)
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	4a55      	ldr	r2, [pc, #340]	; (80065e4 <main+0x2d8>)
 800648e:	8812      	ldrh	r2, [r2, #0]
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	4611      	mov	r1, r2
 8006494:	4854      	ldr	r0, [pc, #336]	; (80065e8 <main+0x2dc>)
 8006496:	4798      	blx	r3
						recibidoReady = 1;
 8006498:	4b5d      	ldr	r3, [pc, #372]	; (8006610 <main+0x304>)
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e02d      	b.n	80064fc <main+0x1f0>
						//isMaster = true;
					}
					else if (strncmp((const char*) Buffer, (const char*) OKMsg, 2)
 80064a0:	2202      	movs	r2, #2
 80064a2:	495c      	ldr	r1, [pc, #368]	; (8006614 <main+0x308>)
 80064a4:	4856      	ldr	r0, [pc, #344]	; (8006600 <main+0x2f4>)
 80064a6:	f000 fe4e 	bl	8007146 <strncmp>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d122      	bne.n	80064f6 <main+0x1ea>
							== 0) {
						PRINTF("RECIBIDO OK\r\n");
 80064b0:	4859      	ldr	r0, [pc, #356]	; (8006618 <main+0x30c>)
 80064b2:	f000 fcb3 	bl	8006e1c <vcom_Send>
						PRINTF("DATOS: %s\r\n", misDat[i].datos);
 80064b6:	4b4e      	ldr	r3, [pc, #312]	; (80065f0 <main+0x2e4>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4a4c      	ldr	r2, [pc, #304]	; (80065f4 <main+0x2e8>)
 80064c4:	4413      	add	r3, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	4854      	ldr	r0, [pc, #336]	; (800661c <main+0x310>)
 80064ca:	f000 fca7 	bl	8006e1c <vcom_Send>
						Radio.Send(misDat[i].datos, BufferSize);
 80064ce:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <main+0x2ac>)
 80064d0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80064d2:	4b47      	ldr	r3, [pc, #284]	; (80065f0 <main+0x2e4>)
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4a45      	ldr	r2, [pc, #276]	; (80065f4 <main+0x2e8>)
 80064e0:	441a      	add	r2, r3
 80064e2:	4b40      	ldr	r3, [pc, #256]	; (80065e4 <main+0x2d8>)
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	47a0      	blx	r4
						recibidoOK = 1;
 80064ee:	4b4c      	ldr	r3, [pc, #304]	; (8006620 <main+0x314>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	e002      	b.n	80064fc <main+0x1f0>
					}
					else {
						PRINTF("NI READY NI OK\r\n");
 80064f6:	484b      	ldr	r0, [pc, #300]	; (8006624 <main+0x318>)
 80064f8:	f000 fc90 	bl	8006e1c <vcom_Send>

					}
					DelayMs(1);
 80064fc:	2001      	movs	r0, #1
 80064fe:	f7fe ff09 	bl	8005314 <DelayMs>
				}
			}
			Radio.Rx( RX_TIMEOUT_VALUE);
 8006502:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <main+0x2ac>)
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800650a:	4798      	blx	r3
			State = LOWPOWER;
 800650c:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <main+0x2f0>)
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
			break;
 8006512:	e091      	b.n	8006638 <main+0x32c>
		case TX:
			Radio.Rx( RX_TIMEOUT_VALUE);
 8006514:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <main+0x2ac>)
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800651c:	4798      	blx	r3
			State = LOWPOWER;
 800651e:	4b37      	ldr	r3, [pc, #220]	; (80065fc <main+0x2f0>)
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
			break;
 8006524:	e088      	b.n	8006638 <main+0x32c>
		case RX_TIMEOUT:
		case RX_ERROR:
			if (recibidoReady == 0) {
 8006526:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <main+0x304>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d113      	bne.n	8006556 <main+0x24a>
				PRINTF("RX_ERROR\n");
 800652e:	483e      	ldr	r0, [pc, #248]	; (8006628 <main+0x31c>)
 8006530:	f000 fc74 	bl	8006e1c <vcom_Send>
				Radio.Send("PREST", BufferSize);
 8006534:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <main+0x2ac>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <main+0x2d8>)
 800653a:	8812      	ldrh	r2, [r2, #0]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	4611      	mov	r1, r2
 8006540:	4829      	ldr	r0, [pc, #164]	; (80065e8 <main+0x2dc>)
 8006542:	4798      	blx	r3
				DelayMs(1);
 8006544:	2001      	movs	r0, #1
 8006546:	f7fe fee5 	bl	8005314 <DelayMs>
				Radio.Rx( RX_TIMEOUT_VALUE);
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <main+0x2ac>)
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006552:	4798      	blx	r3
 8006554:	e023      	b.n	800659e <main+0x292>
			} else {
				PRINTF("DATOS: %s\r\n", misDat[i].datos);
 8006556:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <main+0x2e4>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <main+0x2e8>)
 8006564:	4413      	add	r3, r2
 8006566:	4619      	mov	r1, r3
 8006568:	482c      	ldr	r0, [pc, #176]	; (800661c <main+0x310>)
 800656a:	f000 fc57 	bl	8006e1c <vcom_Send>
				Radio.Send(misDat[i].datos, BufferSize);
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <main+0x2ac>)
 8006570:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006572:	4b1f      	ldr	r3, [pc, #124]	; (80065f0 <main+0x2e4>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <main+0x2e8>)
 8006580:	441a      	add	r2, r3
 8006582:	4b18      	ldr	r3, [pc, #96]	; (80065e4 <main+0x2d8>)
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	47a0      	blx	r4
				DelayMs(1);
 800658e:	2001      	movs	r0, #1
 8006590:	f7fe fec0 	bl	8005314 <DelayMs>
				Radio.Rx( RX_TIMEOUT_VALUE);
 8006594:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <main+0x2ac>)
 8006596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800659c:	4798      	blx	r3
			}
			State = LOWPOWER;
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <main+0x2f0>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
			break;
 80065a4:	e048      	b.n	8006638 <main+0x32c>
		case TX_TIMEOUT:
			Radio.Rx( RX_TIMEOUT_VALUE);
 80065a6:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <main+0x2ac>)
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065ae:	4798      	blx	r3
			State = LOWPOWER;
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <main+0x2f0>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
			break;
 80065b6:	e03f      	b.n	8006638 <main+0x32c>
 80065b8:	08007dac 	.word	0x08007dac
 80065bc:	20000640 	.word	0x20000640
 80065c0:	08007c1c 	.word	0x08007c1c
 80065c4:	200002e8 	.word	0x200002e8
 80065c8:	0800666d 	.word	0x0800666d
 80065cc:	08006689 	.word	0x08006689
 80065d0:	080066f1 	.word	0x080066f1
 80065d4:	0800670d 	.word	0x0800670d
 80065d8:	08006729 	.word	0x08006729
 80065dc:	33bca100 	.word	0x33bca100
 80065e0:	002dc6c0 	.word	0x002dc6c0
 80065e4:	20000038 	.word	0x20000038
 80065e8:	08007c44 	.word	0x08007c44
 80065ec:	20000634 	.word	0x20000634
 80065f0:	20000048 	.word	0x20000048
 80065f4:	2000051c 	.word	0x2000051c
 80065f8:	08007c4c 	.word	0x08007c4c
 80065fc:	200002e4 	.word	0x200002e4
 8006600:	200005f4 	.word	0x200005f4
 8006604:	08007c54 	.word	0x08007c54
 8006608:	2000003c 	.word	0x2000003c
 800660c:	08007c60 	.word	0x08007c60
 8006610:	20000304 	.word	0x20000304
 8006614:	20000044 	.word	0x20000044
 8006618:	08007c74 	.word	0x08007c74
 800661c:	08007c84 	.word	0x08007c84
 8006620:	20000308 	.word	0x20000308
 8006624:	08007c90 	.word	0x08007c90
 8006628:	08007ca4 	.word	0x08007ca4
		case LOWPOWER:
		default:
			Radio.Rx( RX_TIMEOUT_VALUE);
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <main+0x354>)
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006634:	4798      	blx	r3
			break;
 8006636:	bf00      	nop
		}
		memset(BufferSPI, 0, sizeof(BufferSPI));
 8006638:	220a      	movs	r2, #10
 800663a:	2100      	movs	r1, #0
 800663c:	4809      	ldr	r0, [pc, #36]	; (8006664 <main+0x358>)
 800663e:	f000 fd72 	bl	8007126 <memset>
//		PRINTF("i: %d\r\n", i);
		i++;
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <main+0x35c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	4a07      	ldr	r2, [pc, #28]	; (8006668 <main+0x35c>)
 800664a:	6013      	str	r3, [r2, #0]

		if (i == 14) {
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <main+0x35c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b0e      	cmp	r3, #14
 8006652:	d102      	bne.n	800665a <main+0x34e>
			i = 0;
 8006654:	4b04      	ldr	r3, [pc, #16]	; (8006668 <main+0x35c>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800665a:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 800665c:	b662      	cpsie	i
		HAL_SPI_Receive(&hspi2, (uint8_t *) BufferSPI, 8, 1000);
 800665e:	e6cf      	b.n	8006400 <main+0xf4>
 8006660:	08007dac 	.word	0x08007dac
 8006664:	20000634 	.word	0x20000634
 8006668:	20000048 	.word	0x20000048

0800666c <OnTxDone>:
//		DelayMs(1);

	}
}

void OnTxDone(void) {
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
	Radio.Sleep();
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <OnTxDone+0x14>)
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	4798      	blx	r3
	State = TX;
 8006676:	4b03      	ldr	r3, [pc, #12]	; (8006684 <OnTxDone+0x18>)
 8006678:	2204      	movs	r2, #4
 800667a:	701a      	strb	r2, [r3, #0]
//	PRINTF("OnTxDone\n");
}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}
 8006680:	08007dac 	.word	0x08007dac
 8006684:	200002e4 	.word	0x200002e4

08006688 <OnRxDone>:

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	4608      	mov	r0, r1
 8006692:	4611      	mov	r1, r2
 8006694:	461a      	mov	r2, r3
 8006696:	4603      	mov	r3, r0
 8006698:	817b      	strh	r3, [r7, #10]
 800669a:	460b      	mov	r3, r1
 800669c:	813b      	strh	r3, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	71fb      	strb	r3, [r7, #7]
	Radio.Sleep();
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <OnRxDone+0x50>)
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	4798      	blx	r3
	BufferSize = size;
 80066a8:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <OnRxDone+0x54>)
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	8013      	strh	r3, [r2, #0]
	memcpy(Buffer, payload, BufferSize);
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <OnRxDone+0x54>)
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	68f9      	ldr	r1, [r7, #12]
 80066b6:	480a      	ldr	r0, [pc, #40]	; (80066e0 <OnRxDone+0x58>)
 80066b8:	f000 fd2a 	bl	8007110 <memcpy>
	RssiValue = rssi;
 80066bc:	893b      	ldrh	r3, [r7, #8]
 80066be:	b25a      	sxtb	r2, r3
 80066c0:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <OnRxDone+0x5c>)
 80066c2:	701a      	strb	r2, [r3, #0]
	SnrValue = snr;
 80066c4:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <OnRxDone+0x60>)
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	7013      	strb	r3, [r2, #0]
	State = RX;
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <OnRxDone+0x64>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]

//	PRINTF("OnRxDone\n");
//	PRINTF("RssiValue=%d dBm, SnrValue=%d\n", rssi, snr);
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	08007dac 	.word	0x08007dac
 80066dc:	20000038 	.word	0x20000038
 80066e0:	200005f4 	.word	0x200005f4
 80066e4:	200002e5 	.word	0x200002e5
 80066e8:	200002e6 	.word	0x200002e6
 80066ec:	200002e4 	.word	0x200002e4

080066f0 <OnTxTimeout>:

void OnTxTimeout(void) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
	Radio.Sleep();
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <OnTxTimeout+0x14>)
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	4798      	blx	r3
	State = TX_TIMEOUT;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <OnTxTimeout+0x18>)
 80066fc:	2205      	movs	r2, #5
 80066fe:	701a      	strb	r2, [r3, #0]

	//PRINTF("OnTxTimeout\n");
}
 8006700:	bf00      	nop
 8006702:	bd80      	pop	{r7, pc}
 8006704:	08007dac 	.word	0x08007dac
 8006708:	200002e4 	.word	0x200002e4

0800670c <OnRxTimeout>:

void OnRxTimeout(void) {
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
	Radio.Sleep();
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <OnRxTimeout+0x14>)
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	4798      	blx	r3
	State = RX_TIMEOUT;
 8006716:	4b03      	ldr	r3, [pc, #12]	; (8006724 <OnRxTimeout+0x18>)
 8006718:	2202      	movs	r2, #2
 800671a:	701a      	strb	r2, [r3, #0]
	//PRINTF("OnRxTimeout\n");
}
 800671c:	bf00      	nop
 800671e:	bd80      	pop	{r7, pc}
 8006720:	08007dac 	.word	0x08007dac
 8006724:	200002e4 	.word	0x200002e4

08006728 <OnRxError>:

void OnRxError(void) {
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
	Radio.Sleep();
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <OnRxError+0x14>)
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	4798      	blx	r3
	State = RX_ERROR;
 8006732:	4b03      	ldr	r3, [pc, #12]	; (8006740 <OnRxError+0x18>)
 8006734:	2203      	movs	r2, #3
 8006736:	701a      	strb	r2, [r3, #0]
//	PRINTF("OnRxError\n");
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	08007dac 	.word	0x08007dac
 8006740:	200002e4 	.word	0x200002e4

08006744 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale2 mode
 *            Flash Latency(WS)              = 2
 * @param  None
 * @retval None
 */
void SystemClock_Config(void) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b094      	sub	sp, #80	; 0x50
 8006748:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800674a:	f107 0320 	add.w	r3, r7, #32
 800674e:	2230      	movs	r2, #48	; 0x30
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fce7 	bl	8007126 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006758:	f107 030c 	add.w	r3, r7, #12
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8006768:	2300      	movs	r3, #0
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <SystemClock_Config+0xcc>)
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <SystemClock_Config+0xcc>)
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006776:	6413      	str	r3, [r2, #64]	; 0x40
 8006778:	4b25      	ldr	r3, [pc, #148]	; (8006810 <SystemClock_Config+0xcc>)
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006784:	2300      	movs	r3, #0
 8006786:	607b      	str	r3, [r7, #4]
 8006788:	4b22      	ldr	r3, [pc, #136]	; (8006814 <SystemClock_Config+0xd0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a21      	ldr	r2, [pc, #132]	; (8006814 <SystemClock_Config+0xd0>)
 800678e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <SystemClock_Config+0xd0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800679c:	607b      	str	r3, [r7, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the CPU, AHB and APB busses clocks
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80067a0:	2302      	movs	r3, #2
 80067a2:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80067a4:	2301      	movs	r3, #1
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80067a8:	2310      	movs	r3, #16
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067ac:	2302      	movs	r3, #2
 80067ae:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80067b4:	2310      	movs	r3, #16
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80067b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80067be:	2304      	movs	r3, #4
 80067c0:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 80067c2:	2304      	movs	r3, #4
 80067c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067c6:	f107 0320 	add.w	r3, r7, #32
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fa fede 	bl	800158c <HAL_RCC_OscConfig>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <SystemClock_Config+0x96>
	  {
	    Error_Handler();
 80067d6:	f7fe ffe0 	bl	800579a <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB busses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067da:	230f      	movs	r3, #15
 80067dc:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067de:	2302      	movs	r3, #2
 80067e0:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80067e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ea:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	2102      	movs	r1, #2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fb f90a 	bl	8001a10 <HAL_RCC_ClockConfig>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <SystemClock_Config+0xc2>
	  {
	    Error_Handler();
 8006802:	f7fe ffca 	bl	800579a <Error_Handler>
	  }
}
 8006806:	bf00      	nop
 8006808:	3750      	adds	r7, #80	; 0x50
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40023800 	.word	0x40023800
 8006814:	40007000 	.word	0x40007000

08006818 <SPI_Init>:

SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

void SPI_Init(SPI_HandleTypeDef* hspi) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__SPI1_CLK_ENABLE();
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	4b41      	ldr	r3, [pc, #260]	; (800692c <SPI_Init+0x114>)
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	4a40      	ldr	r2, [pc, #256]	; (800692c <SPI_Init+0x114>)
 800682a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800682e:	6453      	str	r3, [r2, #68]	; 0x44
 8006830:	4b3e      	ldr	r3, [pc, #248]	; (800692c <SPI_Init+0x114>)
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	69bb      	ldr	r3, [r7, #24]
	 PA4     ------> SPI1_NSS
	 PA5     ------> SPI1_SCK
	 PA6     ------> SPI1_MISO
	 PA7     ------> SPI1_MOSI
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800683c:	2310      	movs	r3, #16
 800683e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006840:	2300      	movs	r3, #0
 8006842:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006844:	2300      	movs	r3, #0
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006848:	f107 031c 	add.w	r3, r7, #28
 800684c:	4619      	mov	r1, r3
 800684e:	4838      	ldr	r0, [pc, #224]	; (8006930 <SPI_Init+0x118>)
 8006850:	f7fa fce8 	bl	8001224 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8006854:	23e0      	movs	r3, #224	; 0xe0
 8006856:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006858:	2302      	movs	r3, #2
 800685a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685c:	2300      	movs	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006860:	2303      	movs	r3, #3
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006864:	2305      	movs	r3, #5
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006868:	f107 031c 	add.w	r3, r7, #28
 800686c:	4619      	mov	r1, r3
 800686e:	4830      	ldr	r0, [pc, #192]	; (8006930 <SPI_Init+0x118>)
 8006870:	f7fa fcd8 	bl	8001224 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__SPI2_CLK_ENABLE();
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	4b2c      	ldr	r3, [pc, #176]	; (800692c <SPI_Init+0x114>)
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	4a2b      	ldr	r2, [pc, #172]	; (800692c <SPI_Init+0x114>)
 800687e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006882:	6413      	str	r3, [r2, #64]	; 0x40
 8006884:	4b29      	ldr	r3, [pc, #164]	; (800692c <SPI_Init+0x114>)
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	697b      	ldr	r3, [r7, #20]
	 PB13     ------> SPI2_SCK
	 PB14     ------> SPI2_MISO
	 PB15     ------> SPI2_MOSI
	 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	4b25      	ldr	r3, [pc, #148]	; (800692c <SPI_Init+0x114>)
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4a24      	ldr	r2, [pc, #144]	; (800692c <SPI_Init+0x114>)
 800689a:	f043 0302 	orr.w	r3, r3, #2
 800689e:	6313      	str	r3, [r2, #48]	; 0x30
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <SPI_Init+0x114>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80068ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80068b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b2:	2302      	movs	r3, #2
 80068b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068ba:	2302      	movs	r3, #2
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80068be:	2305      	movs	r3, #5
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	4619      	mov	r1, r3
 80068c8:	481a      	ldr	r0, [pc, #104]	; (8006934 <SPI_Init+0x11c>)
 80068ca:	f7fa fcab 	bl	8001224 <HAL_GPIO_Init>


	/* Peripheral clock enable */
	__SPI4_CLK_ENABLE()	;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	4b16      	ldr	r3, [pc, #88]	; (800692c <SPI_Init+0x114>)
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	4a15      	ldr	r2, [pc, #84]	; (800692c <SPI_Init+0x114>)
 80068d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068dc:	6453      	str	r3, [r2, #68]	; 0x44
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <SPI_Init+0x114>)
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
	 PE2     ------> SPI4_SCK
	 PE4     ------> SPI4_NSS
	 PE5     ------> SPI4_MISO
	 PE6     ------> SPI4_MOSI
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 80068ea:	2364      	movs	r3, #100	; 0x64
 80068ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ee:	2302      	movs	r3, #2
 80068f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80068f6:	2303      	movs	r3, #3
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80068fa:	2305      	movs	r3, #5
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068fe:	f107 031c 	add.w	r3, r7, #28
 8006902:	4619      	mov	r1, r3
 8006904:	480c      	ldr	r0, [pc, #48]	; (8006938 <SPI_Init+0x120>)
 8006906:	f7fa fc8d 	bl	8001224 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800690a:	2310      	movs	r3, #16
 800690c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800690e:	2300      	movs	r3, #0
 8006910:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2300      	movs	r3, #0
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006916:	f107 031c 	add.w	r3, r7, #28
 800691a:	4619      	mov	r1, r3
 800691c:	4806      	ldr	r0, [pc, #24]	; (8006938 <SPI_Init+0x120>)
 800691e:	f7fa fc81 	bl	8001224 <HAL_GPIO_Init>

}
 8006922:	bf00      	nop
 8006924:	3730      	adds	r7, #48	; 0x30
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40023800 	.word	0x40023800
 8006930:	40020000 	.word	0x40020000
 8006934:	40020400 	.word	0x40020400
 8006938:	40021000 	.word	0x40021000

0800693c <SPI2_Init>:
//  HAL_SPI_Init(&hspi1);
//
//}

/* SPI2 init function */
void SPI2_Init(void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0

	hspi2.Instance = SPI2;
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <SPI2_Init+0x5c>)
 8006942:	4a16      	ldr	r2, [pc, #88]	; (800699c <SPI2_Init+0x60>)
 8006944:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <SPI2_Init+0x5c>)
 8006948:	2200      	movs	r2, #0
 800694a:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <SPI2_Init+0x5c>)
 800694e:	2200      	movs	r2, #0
 8006950:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <SPI2_Init+0x5c>)
 8006954:	2200      	movs	r2, #0
 8006956:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <SPI2_Init+0x5c>)
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800695e:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <SPI2_Init+0x5c>)
 8006960:	2200      	movs	r2, #0
 8006962:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <SPI2_Init+0x5c>)
 8006966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696a:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <SPI2_Init+0x5c>)
 800696e:	2200      	movs	r2, #0
 8006970:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <SPI2_Init+0x5c>)
 8006974:	2200      	movs	r2, #0
 8006976:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <SPI2_Init+0x5c>)
 800697a:	2200      	movs	r2, #0
 800697c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <SPI2_Init+0x5c>)
 8006980:	220a      	movs	r2, #10
 8006982:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8006984:	4804      	ldr	r0, [pc, #16]	; (8006998 <SPI2_Init+0x5c>)
 8006986:	f7fb fc86 	bl	8002296 <HAL_SPI_Init>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <SPI2_Init+0x58>
		Error_Handler();
 8006990:	f7fe ff03 	bl	800579a <Error_Handler>
	}

}
 8006994:	bf00      	nop
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000640 	.word	0x20000640
 800699c:	40003800 	.word	0x40003800

080069a0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	4b10      	ldr	r3, [pc, #64]	; (80069ec <HAL_MspInit+0x4c>)
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	4a0f      	ldr	r2, [pc, #60]	; (80069ec <HAL_MspInit+0x4c>)
 80069b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b4:	6453      	str	r3, [r2, #68]	; 0x44
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <HAL_MspInit+0x4c>)
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069be:	607b      	str	r3, [r7, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	603b      	str	r3, [r7, #0]
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_MspInit+0x4c>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <HAL_MspInit+0x4c>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6413      	str	r3, [r2, #64]	; 0x40
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <HAL_MspInit+0x4c>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]

}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40023800 	.word	0x40023800

080069f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	609a      	str	r2, [r3, #8]
 8006a04:	60da      	str	r2, [r3, #12]
 8006a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <HAL_SPI_MspInit+0xa8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d13d      	bne.n	8006a8e <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006a12:	2300      	movs	r3, #0
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <HAL_SPI_MspInit+0xac>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	4a20      	ldr	r2, [pc, #128]	; (8006a9c <HAL_SPI_MspInit+0xac>)
 8006a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a20:	6413      	str	r3, [r2, #64]	; 0x40
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <HAL_SPI_MspInit+0xac>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_SPI_MspInit+0xac>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <HAL_SPI_MspInit+0xac>)
 8006a38:	f043 0302 	orr.w	r3, r3, #2
 8006a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a3e:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <HAL_SPI_MspInit+0xac>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8006a4a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a50:	2302      	movs	r3, #2
 8006a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006a5c:	2305      	movs	r3, #5
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a60:	f107 0314 	add.w	r3, r7, #20
 8006a64:	4619      	mov	r1, r3
 8006a66:	480e      	ldr	r0, [pc, #56]	; (8006aa0 <HAL_SPI_MspInit+0xb0>)
 8006a68:	f7fa fbdc 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a72:	2302      	movs	r3, #2
 8006a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a76:	2302      	movs	r3, #2
 8006a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006a7e:	2305      	movs	r3, #5
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a82:	f107 0314 	add.w	r3, r7, #20
 8006a86:	4619      	mov	r1, r3
 8006a88:	4805      	ldr	r0, [pc, #20]	; (8006aa0 <HAL_SPI_MspInit+0xb0>)
 8006a8a:	f7fa fbcb 	bl	8001224 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006a8e:	bf00      	nop
 8006a90:	3728      	adds	r7, #40	; 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40003800 	.word	0x40003800
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	40020400 	.word	0x40020400

08006aa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	80fb      	strh	r3, [r7, #6]
  HW_GPIO_IrqHandler( GPIO_Pin );
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe ff21 	bl	80058f8 <HW_GPIO_IrqHandler>
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <MSP_GetIRQn>:

IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	80fb      	strh	r3, [r7, #6]
  switch( GPIO_Pin )
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d025      	beq.n	8006b1a <MSP_GetIRQn+0x5c>
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	dc0b      	bgt.n	8006aea <MSP_GetIRQn+0x2c>
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d01b      	beq.n	8006b0e <MSP_GetIRQn+0x50>
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	dc02      	bgt.n	8006ae0 <MSP_GetIRQn+0x22>
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d015      	beq.n	8006b0a <MSP_GetIRQn+0x4c>
 8006ade:	e020      	b.n	8006b22 <MSP_GetIRQn+0x64>
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d016      	beq.n	8006b12 <MSP_GetIRQn+0x54>
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d016      	beq.n	8006b16 <MSP_GetIRQn+0x58>
 8006ae8:	e01b      	b.n	8006b22 <MSP_GetIRQn+0x64>
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d017      	beq.n	8006b1e <MSP_GetIRQn+0x60>
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	dc04      	bgt.n	8006afc <MSP_GetIRQn+0x3e>
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d013      	beq.n	8006b1e <MSP_GetIRQn+0x60>
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d011      	beq.n	8006b1e <MSP_GetIRQn+0x60>
 8006afa:	e012      	b.n	8006b22 <MSP_GetIRQn+0x64>
 8006afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b00:	d00d      	beq.n	8006b1e <MSP_GetIRQn+0x60>
 8006b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b06:	d00a      	beq.n	8006b1e <MSP_GetIRQn+0x60>
 8006b08:	e00b      	b.n	8006b22 <MSP_GetIRQn+0x64>
  {
    case GPIO_PIN_0:  return EXTI0_IRQn;
 8006b0a:	2306      	movs	r3, #6
 8006b0c:	e00a      	b.n	8006b24 <MSP_GetIRQn+0x66>
    case GPIO_PIN_1:  return EXTI1_IRQn;
 8006b0e:	2307      	movs	r3, #7
 8006b10:	e008      	b.n	8006b24 <MSP_GetIRQn+0x66>
    case GPIO_PIN_2:  return EXTI2_IRQn;
 8006b12:	2308      	movs	r3, #8
 8006b14:	e006      	b.n	8006b24 <MSP_GetIRQn+0x66>
    case GPIO_PIN_3:  return EXTI3_IRQn;
 8006b16:	2309      	movs	r3, #9
 8006b18:	e004      	b.n	8006b24 <MSP_GetIRQn+0x66>
    case GPIO_PIN_4:  return EXTI4_IRQn;
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	e002      	b.n	8006b24 <MSP_GetIRQn+0x66>
    case GPIO_PIN_5:
    case GPIO_PIN_6:
    case GPIO_PIN_7:
    case GPIO_PIN_8:
    case GPIO_PIN_9:  return EXTI9_5_IRQn;
 8006b1e:	2317      	movs	r3, #23
 8006b20:	e000      	b.n	8006b24 <MSP_GetIRQn+0x66>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
	default: return EXTI15_10_IRQn;
 8006b22:	2328      	movs	r3, #40	; 0x28
  }
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
	while (1) {
 8006b42:	e7fe      	b.n	8006b42 <HardFault_Handler+0x4>

08006b44 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0

	while (1) {
 8006b48:	e7fe      	b.n	8006b48 <MemManage_Handler+0x4>

08006b4a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8006b4a:	b480      	push	{r7}
 8006b4c:	af00      	add	r7, sp, #0

	while (1) {
 8006b4e:	e7fe      	b.n	8006b4e <BusFault_Handler+0x4>

08006b50 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0

	while (1) {
 8006b54:	e7fe      	b.n	8006b54 <UsageFault_Handler+0x4>

08006b56 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8006b56:	b480      	push	{r7}
 8006b58:	af00      	add	r7, sp, #0
}
 8006b5a:	bf00      	nop
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0

}
 8006b68:	bf00      	nop
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
}
 8006b76:	bf00      	nop
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8006b84:	f7fa f9c4 	bl	8000f10 <HAL_IncTick>
}
 8006b88:	bf00      	nop
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USART2_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void USART2_IRQHandler(void) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
	vcom_Print();
 8006b90:	f000 f9c0 	bl	8006f14 <vcom_Print>
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <EXTI0_IRQHandler>:
void RTC_IRQHandler(void) {
	HW_RTC_IrqHandler();
}

void EXTI0_IRQHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	f7fa fcdd 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8006baa:	2002      	movs	r0, #2
 8006bac:	f7fa fcd6 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006bb0:	bf00      	nop
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8006bb8:	2004      	movs	r0, #4
 8006bba:	f7fa fccf 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006bbe:	bf00      	nop
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8006bc6:	2008      	movs	r0, #8
 8006bc8:	f7fa fcc8 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006bcc:	bf00      	nop
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8006bd4:	2010      	movs	r0, #16
 8006bd6:	f7fa fcc1 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006bda:	bf00      	nop
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler( void )
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8006be2:	2020      	movs	r0, #32
 8006be4:	f7fa fcba 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8006be8:	2040      	movs	r0, #64	; 0x40
 8006bea:	f7fa fcb7 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8006bee:	2080      	movs	r0, #128	; 0x80
 8006bf0:	f7fa fcb4 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8006bf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006bf8:	f7fa fcb0 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8006bfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c00:	f7fa fcac 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006c04:	bf00      	nop
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8006c0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006c10:	f7fa fca4 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8006c14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c18:	f7fa fca0 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8006c1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c20:	f7fa fc9c 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8006c24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006c28:	f7fa fc98 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8006c2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006c30:	f7fa fc94 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8006c34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006c38:	f7fa fc90 	bl	800155c <HAL_GPIO_EXTI_IRQHandler>
}
 8006c3c:	bf00      	nop
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006c48:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <_sbrk+0x50>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <_sbrk+0x16>
		heap_end = &end;
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <_sbrk+0x50>)
 8006c52:	4a10      	ldr	r2, [pc, #64]	; (8006c94 <_sbrk+0x54>)
 8006c54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006c56:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <_sbrk+0x50>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006c5c:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <_sbrk+0x50>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	466a      	mov	r2, sp
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d907      	bls.n	8006c7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006c6a:	f000 fa27 	bl	80070bc <__errno>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	230c      	movs	r3, #12
 8006c72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006c74:	f04f 33ff 	mov.w	r3, #4294967295
 8006c78:	e006      	b.n	8006c88 <_sbrk+0x48>
	}

	heap_end += incr;
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <_sbrk+0x50>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4413      	add	r3, r2
 8006c82:	4a03      	ldr	r2, [pc, #12]	; (8006c90 <_sbrk+0x50>)
 8006c84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006c86:	68fb      	ldr	r3, [r7, #12]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	2000030c 	.word	0x2000030c
 8006c94:	20000790 	.word	0x20000790

08006c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c9c:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <SystemInit+0x60>)
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <SystemInit+0x60>)
 8006ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006cac:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <SystemInit+0x64>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <SystemInit+0x64>)
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <SystemInit+0x64>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <SystemInit+0x64>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <SystemInit+0x64>)
 8006cc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ccc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <SystemInit+0x64>)
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <SystemInit+0x68>)
 8006cd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <SystemInit+0x64>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a08      	ldr	r2, [pc, #32]	; (8006cfc <SystemInit+0x64>)
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <SystemInit+0x64>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <SystemInit+0x60>)
 8006ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cec:	609a      	str	r2, [r3, #8]
#endif
}
 8006cee:	bf00      	nop
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	e000ed00 	.word	0xe000ed00
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	24003010 	.word	0x24003010

08006d04 <UART_Init>:
#include "includes.h"

UART_HandleTypeDef huart2;

void UART_Init()
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4b17      	ldr	r3, [pc, #92]	; (8006d6c <UART_Init+0x68>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <UART_Init+0x68>)
 8006d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d18:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1a:	4b14      	ldr	r3, [pc, #80]	; (8006d6c <UART_Init+0x68>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d26:	2303      	movs	r3, #3
 8006d28:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006d32:	2303      	movs	r3, #3
 8006d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d36:	2307      	movs	r3, #7
 8006d38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	480c      	ldr	r0, [pc, #48]	; (8006d70 <UART_Init+0x6c>)
 8006d40:	f7fa fa70 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006d44:	230c      	movs	r3, #12
 8006d46:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006d50:	2303      	movs	r3, #3
 8006d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d54:	2307      	movs	r3, #7
 8006d56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d58:	1d3b      	adds	r3, r7, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4804      	ldr	r0, [pc, #16]	; (8006d70 <UART_Init+0x6c>)
 8006d5e:	f7fa fa61 	bl	8001224 <HAL_GPIO_Init>
}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	40020000 	.word	0x40020000

08006d74 <USART2_UART_Init>:
  }
}

/* USART2 init function */
void USART2_UART_Init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <USART2_UART_Init+0x44>)
 8006d7a:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <USART2_UART_Init+0x48>)
 8006d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <USART2_UART_Init+0x44>)
 8006d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <USART2_UART_Init+0x44>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <USART2_UART_Init+0x44>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <USART2_UART_Init+0x44>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006d98:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <USART2_UART_Init+0x44>)
 8006d9a:	220c      	movs	r2, #12
 8006d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <USART2_UART_Init+0x44>)
 8006da0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006da4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006da6:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <USART2_UART_Init+0x44>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8006dac:	4802      	ldr	r0, [pc, #8]	; (8006db8 <USART2_UART_Init+0x44>)
 8006dae:	f7fb ffc7 	bl	8002d40 <HAL_UART_Init>
}
 8006db2:	bf00      	nop
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000748 	.word	0x20000748
 8006dbc:	40004400 	.word	0x40004400

08006dc0 <vcom_Init>:

/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void vcom_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <vcom_Init+0x54>)
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <vcom_Init+0x58>)
 8006dc8:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200;
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <vcom_Init+0x54>)
 8006dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006dd0:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8006dd2:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <vcom_Init+0x54>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <vcom_Init+0x54>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <vcom_Init+0x54>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <vcom_Init+0x54>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <vcom_Init+0x54>)
 8006dec:	220c      	movs	r2, #12
 8006dee:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8006df0:	4808      	ldr	r0, [pc, #32]	; (8006e14 <vcom_Init+0x54>)
 8006df2:	f7fb ffa5 	bl	8002d40 <HAL_UART_Init>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <vcom_Init+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 8006dfc:	f7fe fccd 	bl	800579a <Error_Handler>
  }

  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 8006e00:	2200      	movs	r2, #0
 8006e02:	2101      	movs	r1, #1
 8006e04:	2026      	movs	r0, #38	; 0x26
 8006e06:	f7fa f9ba 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 8006e0a:	2026      	movs	r0, #38	; 0x26
 8006e0c:	f7fa f9d3 	bl	80011b6 <HAL_NVIC_EnableIRQ>
}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000414 	.word	0x20000414
 8006e18:	40004400 	.word	0x40004400

08006e1c <vcom_Send>:
  HAL_UART_DeInit(&UartHandle);
#endif
}

void vcom_Send( char *format, ... )
{
 8006e1c:	b40f      	push	{r0, r1, r2, r3}
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b0a6      	sub	sp, #152	; 0x98
 8006e22:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8006e24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8006e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  uint8_t len;
  uint8_t lenTop;
  char tempBuff[128];

  BACKUP_PRIMASK();
 8006e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("cpsid i" : : : "memory");
 8006e3c:	b672      	cpsid	i
  DISABLE_IRQ();

  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e44:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 f9a5 	bl	8007198 <vsiprintf>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

  if (iw+len<BUFSIZE)
 8006e54:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <vcom_Send+0xf0>)
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006e60:	4413      	add	r3, r2
 8006e62:	2bff      	cmp	r3, #255	; 0xff
 8006e64:	dc16      	bgt.n	8006e94 <vcom_Send+0x78>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 8006e66:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <vcom_Send+0xf0>)
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <vcom_Send+0xf4>)
 8006e70:	4413      	add	r3, r2
 8006e72:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8006e76:	1d39      	adds	r1, r7, #4
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f949 	bl	8007110 <memcpy>
    iw+=len;
 8006e7e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <vcom_Send+0xf0>)
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <vcom_Send+0xf0>)
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	e028      	b.n	8006ee6 <vcom_Send+0xca>
  }
  else
  {
    lenTop=BUFSIZE-iw;
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <vcom_Send+0xf0>)
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	425b      	negs	r3, r3
 8006e9e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <vcom_Send+0xf0>)
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <vcom_Send+0xf4>)
 8006eac:	4413      	add	r3, r2
 8006eae:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8006eb2:	1d39      	adds	r1, r7, #4
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 f92b 	bl	8007110 <memcpy>
    len-=lenTop;
 8006eba:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8006ebe:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8006ec8:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8006ecc:	1d3a      	adds	r2, r7, #4
 8006ece:	4413      	add	r3, r2
 8006ed0:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	480e      	ldr	r0, [pc, #56]	; (8006f10 <vcom_Send+0xf4>)
 8006ed8:	f000 f91a 	bl	8007110 <memcpy>
    iw = len;
 8006edc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <vcom_Send+0xf0>)
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ef2:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK();

  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 8006ef6:	2026      	movs	r0, #38	; 0x26
 8006ef8:	f7fa f977 	bl	80011ea <HAL_NVIC_SetPendingIRQ>

  va_end(args);
}
 8006efc:	bf00      	nop
 8006efe:	3798      	adds	r7, #152	; 0x98
 8006f00:	46bd      	mov	sp, r7
 8006f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f06:	b004      	add	sp, #16
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000410 	.word	0x20000410
 8006f10:	20000310 	.word	0x20000310

08006f14 <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8006f1a:	e022      	b.n	8006f62 <vcom_Print+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f20:	603b      	str	r3, [r7, #0]
  return(result);
 8006f22:	683b      	ldr	r3, [r7, #0]
  {
    BACKUP_PRIMASK();
 8006f24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f26:	b672      	cpsid	i
    DISABLE_IRQ();

    CurChar = &buff[ir];
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <vcom_Print+0x7c>)
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b19      	ldr	r3, [pc, #100]	; (8006f94 <vcom_Print+0x80>)
 8006f30:	4413      	add	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]
    ir= (ir+1) %BUFSIZE;
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <vcom_Print+0x7c>)
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	425a      	negs	r2, r3
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	bf58      	it	pl
 8006f42:	4253      	negpl	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <vcom_Print+0x7c>)
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f383 8810 	msr	PRIMASK, r3

    RESTORE_PRIMASK();

    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);
 8006f54:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006f58:	2201      	movs	r2, #1
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	480e      	ldr	r0, [pc, #56]	; (8006f98 <vcom_Print+0x84>)
 8006f5e:	f7fb ff3c 	bl	8002dda <HAL_UART_Transmit>
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <vcom_Print+0x88>)
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <vcom_Print+0x7c>)
 8006f6e:	8812      	ldrh	r2, [r2, #0]
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	425a      	negs	r2, r3
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	bf58      	it	pl
 8006f7a:	4253      	negpl	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dccd      	bgt.n	8006f1c <vcom_Print+0x8>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 8006f80:	2026      	movs	r0, #38	; 0x26
 8006f82:	f7fa f940 	bl	8001206 <HAL_NVIC_ClearPendingIRQ>
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000412 	.word	0x20000412
 8006f94:	20000310 	.word	0x20000310
 8006f98:	20000414 	.word	0x20000414
 8006f9c:	20000410 	.word	0x20000410

08006fa0 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE();
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <HAL_UART_MspInit+0x30>)
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	4a07      	ldr	r2, [pc, #28]	; (8006fd0 <HAL_UART_MspInit+0x30>)
 8006fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <HAL_UART_MspInit+0x30>)
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  vcom_IoInit( );
 8006fc4:	f000 f806 	bl	8006fd4 <vcom_IoInit>
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40023800 	.word	0x40023800

08006fd4 <vcom_IoInit>:

void vcom_IoInit(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8006fda:	f107 030c 	add.w	r3, r7, #12
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	609a      	str	r2, [r3, #8]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	611a      	str	r2, [r3, #16]
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	4b1c      	ldr	r3, [pc, #112]	; (8007060 <vcom_IoInit+0x8c>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4a1b      	ldr	r2, [pc, #108]	; (8007060 <vcom_IoInit+0x8c>)
 8006ff4:	f043 0301 	orr.w	r3, r3, #1
 8006ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffa:	4b19      	ldr	r3, [pc, #100]	; (8007060 <vcom_IoInit+0x8c>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	60bb      	str	r3, [r7, #8]
 8007004:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	4b15      	ldr	r3, [pc, #84]	; (8007060 <vcom_IoInit+0x8c>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	4a14      	ldr	r2, [pc, #80]	; (8007060 <vcom_IoInit+0x8c>)
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	6313      	str	r3, [r2, #48]	; 0x30
 8007016:	4b12      	ldr	r3, [pc, #72]	; (8007060 <vcom_IoInit+0x8c>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	607b      	str	r3, [r7, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8007022:	2304      	movs	r3, #4
 8007024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007026:	2302      	movs	r3, #2
 8007028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800702e:	2303      	movs	r3, #3
 8007030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 8007032:	2307      	movs	r3, #7
 8007034:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8007036:	f107 030c 	add.w	r3, r7, #12
 800703a:	4619      	mov	r1, r3
 800703c:	4809      	ldr	r0, [pc, #36]	; (8007064 <vcom_IoInit+0x90>)
 800703e:	f7fa f8f1 	bl	8001224 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 8007042:	2308      	movs	r3, #8
 8007044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 8007046:	2307      	movs	r3, #7
 8007048:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	4619      	mov	r1, r3
 8007050:	4804      	ldr	r0, [pc, #16]	; (8007064 <vcom_IoInit+0x90>)
 8007052:	f7fa f8e7 	bl	8001224 <HAL_GPIO_Init>
}
 8007056:	bf00      	nop
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40023800 	.word	0x40023800
 8007064:	40020000 	.word	0x40020000

08007068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800706c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800706e:	e003      	b.n	8007078 <LoopCopyDataInit>

08007070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007076:	3104      	adds	r1, #4

08007078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007078:	480b      	ldr	r0, [pc, #44]	; (80070a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800707c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800707e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007080:	d3f6      	bcc.n	8007070 <CopyDataInit>
  ldr  r2, =_sbss
 8007082:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007084:	e002      	b.n	800708c <LoopFillZerobss>

08007086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007088:	f842 3b04 	str.w	r3, [r2], #4

0800708c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800708e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007090:	d3f9      	bcc.n	8007086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007092:	f7ff fe01 	bl	8006c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007096:	f000 f817 	bl	80070c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800709a:	f7ff f937 	bl	800630c <main>
  bx  lr    
 800709e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80070a0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80070a4:	08007e6c 	.word	0x08007e6c
  ldr  r0, =_sdata
 80070a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80070ac:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80070b0:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80070b4:	2000078c 	.word	0x2000078c

080070b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070b8:	e7fe      	b.n	80070b8 <ADC_IRQHandler>
	...

080070bc <__errno>:
 80070bc:	4b01      	ldr	r3, [pc, #4]	; (80070c4 <__errno+0x8>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000050 	.word	0x20000050

080070c8 <__libc_init_array>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4e0d      	ldr	r6, [pc, #52]	; (8007100 <__libc_init_array+0x38>)
 80070cc:	4c0d      	ldr	r4, [pc, #52]	; (8007104 <__libc_init_array+0x3c>)
 80070ce:	1ba4      	subs	r4, r4, r6
 80070d0:	10a4      	asrs	r4, r4, #2
 80070d2:	2500      	movs	r5, #0
 80070d4:	42a5      	cmp	r5, r4
 80070d6:	d109      	bne.n	80070ec <__libc_init_array+0x24>
 80070d8:	4e0b      	ldr	r6, [pc, #44]	; (8007108 <__libc_init_array+0x40>)
 80070da:	4c0c      	ldr	r4, [pc, #48]	; (800710c <__libc_init_array+0x44>)
 80070dc:	f000 fd92 	bl	8007c04 <_init>
 80070e0:	1ba4      	subs	r4, r4, r6
 80070e2:	10a4      	asrs	r4, r4, #2
 80070e4:	2500      	movs	r5, #0
 80070e6:	42a5      	cmp	r5, r4
 80070e8:	d105      	bne.n	80070f6 <__libc_init_array+0x2e>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070f0:	4798      	blx	r3
 80070f2:	3501      	adds	r5, #1
 80070f4:	e7ee      	b.n	80070d4 <__libc_init_array+0xc>
 80070f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070fa:	4798      	blx	r3
 80070fc:	3501      	adds	r5, #1
 80070fe:	e7f2      	b.n	80070e6 <__libc_init_array+0x1e>
 8007100:	08007e64 	.word	0x08007e64
 8007104:	08007e64 	.word	0x08007e64
 8007108:	08007e64 	.word	0x08007e64
 800710c:	08007e68 	.word	0x08007e68

08007110 <memcpy>:
 8007110:	b510      	push	{r4, lr}
 8007112:	1e43      	subs	r3, r0, #1
 8007114:	440a      	add	r2, r1
 8007116:	4291      	cmp	r1, r2
 8007118:	d100      	bne.n	800711c <memcpy+0xc>
 800711a:	bd10      	pop	{r4, pc}
 800711c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007120:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007124:	e7f7      	b.n	8007116 <memcpy+0x6>

08007126 <memset>:
 8007126:	4402      	add	r2, r0
 8007128:	4603      	mov	r3, r0
 800712a:	4293      	cmp	r3, r2
 800712c:	d100      	bne.n	8007130 <memset+0xa>
 800712e:	4770      	bx	lr
 8007130:	f803 1b01 	strb.w	r1, [r3], #1
 8007134:	e7f9      	b.n	800712a <memset+0x4>

08007136 <strcpy>:
 8007136:	4603      	mov	r3, r0
 8007138:	f811 2b01 	ldrb.w	r2, [r1], #1
 800713c:	f803 2b01 	strb.w	r2, [r3], #1
 8007140:	2a00      	cmp	r2, #0
 8007142:	d1f9      	bne.n	8007138 <strcpy+0x2>
 8007144:	4770      	bx	lr

08007146 <strncmp>:
 8007146:	b510      	push	{r4, lr}
 8007148:	b16a      	cbz	r2, 8007166 <strncmp+0x20>
 800714a:	3901      	subs	r1, #1
 800714c:	1884      	adds	r4, r0, r2
 800714e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007152:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007156:	4293      	cmp	r3, r2
 8007158:	d103      	bne.n	8007162 <strncmp+0x1c>
 800715a:	42a0      	cmp	r0, r4
 800715c:	d001      	beq.n	8007162 <strncmp+0x1c>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f5      	bne.n	800714e <strncmp+0x8>
 8007162:	1a98      	subs	r0, r3, r2
 8007164:	bd10      	pop	{r4, pc}
 8007166:	4610      	mov	r0, r2
 8007168:	e7fc      	b.n	8007164 <strncmp+0x1e>
	...

0800716c <_vsiprintf_r>:
 800716c:	b500      	push	{lr}
 800716e:	b09b      	sub	sp, #108	; 0x6c
 8007170:	9100      	str	r1, [sp, #0]
 8007172:	9104      	str	r1, [sp, #16]
 8007174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007178:	9105      	str	r1, [sp, #20]
 800717a:	9102      	str	r1, [sp, #8]
 800717c:	4905      	ldr	r1, [pc, #20]	; (8007194 <_vsiprintf_r+0x28>)
 800717e:	9103      	str	r1, [sp, #12]
 8007180:	4669      	mov	r1, sp
 8007182:	f000 f86d 	bl	8007260 <_svfiprintf_r>
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	b01b      	add	sp, #108	; 0x6c
 800718e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007192:	bf00      	nop
 8007194:	ffff0208 	.word	0xffff0208

08007198 <vsiprintf>:
 8007198:	4613      	mov	r3, r2
 800719a:	460a      	mov	r2, r1
 800719c:	4601      	mov	r1, r0
 800719e:	4802      	ldr	r0, [pc, #8]	; (80071a8 <vsiprintf+0x10>)
 80071a0:	6800      	ldr	r0, [r0, #0]
 80071a2:	f7ff bfe3 	b.w	800716c <_vsiprintf_r>
 80071a6:	bf00      	nop
 80071a8:	20000050 	.word	0x20000050

080071ac <__ssputs_r>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	688e      	ldr	r6, [r1, #8]
 80071b2:	429e      	cmp	r6, r3
 80071b4:	4682      	mov	sl, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	4690      	mov	r8, r2
 80071ba:	4699      	mov	r9, r3
 80071bc:	d837      	bhi.n	800722e <__ssputs_r+0x82>
 80071be:	898a      	ldrh	r2, [r1, #12]
 80071c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071c4:	d031      	beq.n	800722a <__ssputs_r+0x7e>
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	6909      	ldr	r1, [r1, #16]
 80071ca:	1a6f      	subs	r7, r5, r1
 80071cc:	6965      	ldr	r5, [r4, #20]
 80071ce:	2302      	movs	r3, #2
 80071d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80071d8:	f109 0301 	add.w	r3, r9, #1
 80071dc:	443b      	add	r3, r7
 80071de:	429d      	cmp	r5, r3
 80071e0:	bf38      	it	cc
 80071e2:	461d      	movcc	r5, r3
 80071e4:	0553      	lsls	r3, r2, #21
 80071e6:	d530      	bpl.n	800724a <__ssputs_r+0x9e>
 80071e8:	4629      	mov	r1, r5
 80071ea:	f000 fb21 	bl	8007830 <_malloc_r>
 80071ee:	4606      	mov	r6, r0
 80071f0:	b950      	cbnz	r0, 8007208 <__ssputs_r+0x5c>
 80071f2:	230c      	movs	r3, #12
 80071f4:	f8ca 3000 	str.w	r3, [sl]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007208:	463a      	mov	r2, r7
 800720a:	6921      	ldr	r1, [r4, #16]
 800720c:	f7ff ff80 	bl	8007110 <memcpy>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	6126      	str	r6, [r4, #16]
 800721e:	6165      	str	r5, [r4, #20]
 8007220:	443e      	add	r6, r7
 8007222:	1bed      	subs	r5, r5, r7
 8007224:	6026      	str	r6, [r4, #0]
 8007226:	60a5      	str	r5, [r4, #8]
 8007228:	464e      	mov	r6, r9
 800722a:	454e      	cmp	r6, r9
 800722c:	d900      	bls.n	8007230 <__ssputs_r+0x84>
 800722e:	464e      	mov	r6, r9
 8007230:	4632      	mov	r2, r6
 8007232:	4641      	mov	r1, r8
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	f000 fa93 	bl	8007760 <memmove>
 800723a:	68a3      	ldr	r3, [r4, #8]
 800723c:	1b9b      	subs	r3, r3, r6
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	441e      	add	r6, r3
 8007244:	6026      	str	r6, [r4, #0]
 8007246:	2000      	movs	r0, #0
 8007248:	e7dc      	b.n	8007204 <__ssputs_r+0x58>
 800724a:	462a      	mov	r2, r5
 800724c:	f000 fb4a 	bl	80078e4 <_realloc_r>
 8007250:	4606      	mov	r6, r0
 8007252:	2800      	cmp	r0, #0
 8007254:	d1e2      	bne.n	800721c <__ssputs_r+0x70>
 8007256:	6921      	ldr	r1, [r4, #16]
 8007258:	4650      	mov	r0, sl
 800725a:	f000 fa9b 	bl	8007794 <_free_r>
 800725e:	e7c8      	b.n	80071f2 <__ssputs_r+0x46>

08007260 <_svfiprintf_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	461d      	mov	r5, r3
 8007266:	898b      	ldrh	r3, [r1, #12]
 8007268:	061f      	lsls	r7, r3, #24
 800726a:	b09d      	sub	sp, #116	; 0x74
 800726c:	4680      	mov	r8, r0
 800726e:	460c      	mov	r4, r1
 8007270:	4616      	mov	r6, r2
 8007272:	d50f      	bpl.n	8007294 <_svfiprintf_r+0x34>
 8007274:	690b      	ldr	r3, [r1, #16]
 8007276:	b96b      	cbnz	r3, 8007294 <_svfiprintf_r+0x34>
 8007278:	2140      	movs	r1, #64	; 0x40
 800727a:	f000 fad9 	bl	8007830 <_malloc_r>
 800727e:	6020      	str	r0, [r4, #0]
 8007280:	6120      	str	r0, [r4, #16]
 8007282:	b928      	cbnz	r0, 8007290 <_svfiprintf_r+0x30>
 8007284:	230c      	movs	r3, #12
 8007286:	f8c8 3000 	str.w	r3, [r8]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	e0c8      	b.n	8007422 <_svfiprintf_r+0x1c2>
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	6163      	str	r3, [r4, #20]
 8007294:	2300      	movs	r3, #0
 8007296:	9309      	str	r3, [sp, #36]	; 0x24
 8007298:	2320      	movs	r3, #32
 800729a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800729e:	2330      	movs	r3, #48	; 0x30
 80072a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072a4:	9503      	str	r5, [sp, #12]
 80072a6:	f04f 0b01 	mov.w	fp, #1
 80072aa:	4637      	mov	r7, r6
 80072ac:	463d      	mov	r5, r7
 80072ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072b2:	b10b      	cbz	r3, 80072b8 <_svfiprintf_r+0x58>
 80072b4:	2b25      	cmp	r3, #37	; 0x25
 80072b6:	d13e      	bne.n	8007336 <_svfiprintf_r+0xd6>
 80072b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80072bc:	d00b      	beq.n	80072d6 <_svfiprintf_r+0x76>
 80072be:	4653      	mov	r3, sl
 80072c0:	4632      	mov	r2, r6
 80072c2:	4621      	mov	r1, r4
 80072c4:	4640      	mov	r0, r8
 80072c6:	f7ff ff71 	bl	80071ac <__ssputs_r>
 80072ca:	3001      	adds	r0, #1
 80072cc:	f000 80a4 	beq.w	8007418 <_svfiprintf_r+0x1b8>
 80072d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d2:	4453      	add	r3, sl
 80072d4:	9309      	str	r3, [sp, #36]	; 0x24
 80072d6:	783b      	ldrb	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 809d 	beq.w	8007418 <_svfiprintf_r+0x1b8>
 80072de:	2300      	movs	r3, #0
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295
 80072e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072f0:	931a      	str	r3, [sp, #104]	; 0x68
 80072f2:	462f      	mov	r7, r5
 80072f4:	2205      	movs	r2, #5
 80072f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80072fa:	4850      	ldr	r0, [pc, #320]	; (800743c <_svfiprintf_r+0x1dc>)
 80072fc:	f7f8 ff70 	bl	80001e0 <memchr>
 8007300:	9b04      	ldr	r3, [sp, #16]
 8007302:	b9d0      	cbnz	r0, 800733a <_svfiprintf_r+0xda>
 8007304:	06d9      	lsls	r1, r3, #27
 8007306:	bf44      	itt	mi
 8007308:	2220      	movmi	r2, #32
 800730a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800730e:	071a      	lsls	r2, r3, #28
 8007310:	bf44      	itt	mi
 8007312:	222b      	movmi	r2, #43	; 0x2b
 8007314:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007318:	782a      	ldrb	r2, [r5, #0]
 800731a:	2a2a      	cmp	r2, #42	; 0x2a
 800731c:	d015      	beq.n	800734a <_svfiprintf_r+0xea>
 800731e:	9a07      	ldr	r2, [sp, #28]
 8007320:	462f      	mov	r7, r5
 8007322:	2000      	movs	r0, #0
 8007324:	250a      	movs	r5, #10
 8007326:	4639      	mov	r1, r7
 8007328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800732c:	3b30      	subs	r3, #48	; 0x30
 800732e:	2b09      	cmp	r3, #9
 8007330:	d94d      	bls.n	80073ce <_svfiprintf_r+0x16e>
 8007332:	b1b8      	cbz	r0, 8007364 <_svfiprintf_r+0x104>
 8007334:	e00f      	b.n	8007356 <_svfiprintf_r+0xf6>
 8007336:	462f      	mov	r7, r5
 8007338:	e7b8      	b.n	80072ac <_svfiprintf_r+0x4c>
 800733a:	4a40      	ldr	r2, [pc, #256]	; (800743c <_svfiprintf_r+0x1dc>)
 800733c:	1a80      	subs	r0, r0, r2
 800733e:	fa0b f000 	lsl.w	r0, fp, r0
 8007342:	4318      	orrs	r0, r3
 8007344:	9004      	str	r0, [sp, #16]
 8007346:	463d      	mov	r5, r7
 8007348:	e7d3      	b.n	80072f2 <_svfiprintf_r+0x92>
 800734a:	9a03      	ldr	r2, [sp, #12]
 800734c:	1d11      	adds	r1, r2, #4
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	9103      	str	r1, [sp, #12]
 8007352:	2a00      	cmp	r2, #0
 8007354:	db01      	blt.n	800735a <_svfiprintf_r+0xfa>
 8007356:	9207      	str	r2, [sp, #28]
 8007358:	e004      	b.n	8007364 <_svfiprintf_r+0x104>
 800735a:	4252      	negs	r2, r2
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	9207      	str	r2, [sp, #28]
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	783b      	ldrb	r3, [r7, #0]
 8007366:	2b2e      	cmp	r3, #46	; 0x2e
 8007368:	d10c      	bne.n	8007384 <_svfiprintf_r+0x124>
 800736a:	787b      	ldrb	r3, [r7, #1]
 800736c:	2b2a      	cmp	r3, #42	; 0x2a
 800736e:	d133      	bne.n	80073d8 <_svfiprintf_r+0x178>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9203      	str	r2, [sp, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bfb8      	it	lt
 800737c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007380:	3702      	adds	r7, #2
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	4d2e      	ldr	r5, [pc, #184]	; (8007440 <_svfiprintf_r+0x1e0>)
 8007386:	7839      	ldrb	r1, [r7, #0]
 8007388:	2203      	movs	r2, #3
 800738a:	4628      	mov	r0, r5
 800738c:	f7f8 ff28 	bl	80001e0 <memchr>
 8007390:	b138      	cbz	r0, 80073a2 <_svfiprintf_r+0x142>
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	1b40      	subs	r0, r0, r5
 8007396:	fa03 f000 	lsl.w	r0, r3, r0
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	4303      	orrs	r3, r0
 800739e:	3701      	adds	r7, #1
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	7839      	ldrb	r1, [r7, #0]
 80073a4:	4827      	ldr	r0, [pc, #156]	; (8007444 <_svfiprintf_r+0x1e4>)
 80073a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073aa:	2206      	movs	r2, #6
 80073ac:	1c7e      	adds	r6, r7, #1
 80073ae:	f7f8 ff17 	bl	80001e0 <memchr>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d038      	beq.n	8007428 <_svfiprintf_r+0x1c8>
 80073b6:	4b24      	ldr	r3, [pc, #144]	; (8007448 <_svfiprintf_r+0x1e8>)
 80073b8:	bb13      	cbnz	r3, 8007400 <_svfiprintf_r+0x1a0>
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	3307      	adds	r3, #7
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	3308      	adds	r3, #8
 80073c4:	9303      	str	r3, [sp, #12]
 80073c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c8:	444b      	add	r3, r9
 80073ca:	9309      	str	r3, [sp, #36]	; 0x24
 80073cc:	e76d      	b.n	80072aa <_svfiprintf_r+0x4a>
 80073ce:	fb05 3202 	mla	r2, r5, r2, r3
 80073d2:	2001      	movs	r0, #1
 80073d4:	460f      	mov	r7, r1
 80073d6:	e7a6      	b.n	8007326 <_svfiprintf_r+0xc6>
 80073d8:	2300      	movs	r3, #0
 80073da:	3701      	adds	r7, #1
 80073dc:	9305      	str	r3, [sp, #20]
 80073de:	4619      	mov	r1, r3
 80073e0:	250a      	movs	r5, #10
 80073e2:	4638      	mov	r0, r7
 80073e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e8:	3a30      	subs	r2, #48	; 0x30
 80073ea:	2a09      	cmp	r2, #9
 80073ec:	d903      	bls.n	80073f6 <_svfiprintf_r+0x196>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0c8      	beq.n	8007384 <_svfiprintf_r+0x124>
 80073f2:	9105      	str	r1, [sp, #20]
 80073f4:	e7c6      	b.n	8007384 <_svfiprintf_r+0x124>
 80073f6:	fb05 2101 	mla	r1, r5, r1, r2
 80073fa:	2301      	movs	r3, #1
 80073fc:	4607      	mov	r7, r0
 80073fe:	e7f0      	b.n	80073e2 <_svfiprintf_r+0x182>
 8007400:	ab03      	add	r3, sp, #12
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4622      	mov	r2, r4
 8007406:	4b11      	ldr	r3, [pc, #68]	; (800744c <_svfiprintf_r+0x1ec>)
 8007408:	a904      	add	r1, sp, #16
 800740a:	4640      	mov	r0, r8
 800740c:	f3af 8000 	nop.w
 8007410:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007414:	4681      	mov	r9, r0
 8007416:	d1d6      	bne.n	80073c6 <_svfiprintf_r+0x166>
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	065b      	lsls	r3, r3, #25
 800741c:	f53f af35 	bmi.w	800728a <_svfiprintf_r+0x2a>
 8007420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007422:	b01d      	add	sp, #116	; 0x74
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	ab03      	add	r3, sp, #12
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	4622      	mov	r2, r4
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <_svfiprintf_r+0x1ec>)
 8007430:	a904      	add	r1, sp, #16
 8007432:	4640      	mov	r0, r8
 8007434:	f000 f882 	bl	800753c <_printf_i>
 8007438:	e7ea      	b.n	8007410 <_svfiprintf_r+0x1b0>
 800743a:	bf00      	nop
 800743c:	08007e28 	.word	0x08007e28
 8007440:	08007e2e 	.word	0x08007e2e
 8007444:	08007e32 	.word	0x08007e32
 8007448:	00000000 	.word	0x00000000
 800744c:	080071ad 	.word	0x080071ad

08007450 <_printf_common>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	4691      	mov	r9, r2
 8007456:	461f      	mov	r7, r3
 8007458:	688a      	ldr	r2, [r1, #8]
 800745a:	690b      	ldr	r3, [r1, #16]
 800745c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007460:	4293      	cmp	r3, r2
 8007462:	bfb8      	it	lt
 8007464:	4613      	movlt	r3, r2
 8007466:	f8c9 3000 	str.w	r3, [r9]
 800746a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800746e:	4606      	mov	r6, r0
 8007470:	460c      	mov	r4, r1
 8007472:	b112      	cbz	r2, 800747a <_printf_common+0x2a>
 8007474:	3301      	adds	r3, #1
 8007476:	f8c9 3000 	str.w	r3, [r9]
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	0699      	lsls	r1, r3, #26
 800747e:	bf42      	ittt	mi
 8007480:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007484:	3302      	addmi	r3, #2
 8007486:	f8c9 3000 	strmi.w	r3, [r9]
 800748a:	6825      	ldr	r5, [r4, #0]
 800748c:	f015 0506 	ands.w	r5, r5, #6
 8007490:	d107      	bne.n	80074a2 <_printf_common+0x52>
 8007492:	f104 0a19 	add.w	sl, r4, #25
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	f8d9 2000 	ldr.w	r2, [r9]
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	42ab      	cmp	r3, r5
 80074a0:	dc28      	bgt.n	80074f4 <_printf_common+0xa4>
 80074a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	3300      	adds	r3, #0
 80074aa:	bf18      	it	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	0692      	lsls	r2, r2, #26
 80074b0:	d42d      	bmi.n	800750e <_printf_common+0xbe>
 80074b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074b6:	4639      	mov	r1, r7
 80074b8:	4630      	mov	r0, r6
 80074ba:	47c0      	blx	r8
 80074bc:	3001      	adds	r0, #1
 80074be:	d020      	beq.n	8007502 <_printf_common+0xb2>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	68e5      	ldr	r5, [r4, #12]
 80074c4:	f8d9 2000 	ldr.w	r2, [r9]
 80074c8:	f003 0306 	and.w	r3, r3, #6
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	bf08      	it	eq
 80074d0:	1aad      	subeq	r5, r5, r2
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	6922      	ldr	r2, [r4, #16]
 80074d6:	bf0c      	ite	eq
 80074d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074dc:	2500      	movne	r5, #0
 80074de:	4293      	cmp	r3, r2
 80074e0:	bfc4      	itt	gt
 80074e2:	1a9b      	subgt	r3, r3, r2
 80074e4:	18ed      	addgt	r5, r5, r3
 80074e6:	f04f 0900 	mov.w	r9, #0
 80074ea:	341a      	adds	r4, #26
 80074ec:	454d      	cmp	r5, r9
 80074ee:	d11a      	bne.n	8007526 <_printf_common+0xd6>
 80074f0:	2000      	movs	r0, #0
 80074f2:	e008      	b.n	8007506 <_printf_common+0xb6>
 80074f4:	2301      	movs	r3, #1
 80074f6:	4652      	mov	r2, sl
 80074f8:	4639      	mov	r1, r7
 80074fa:	4630      	mov	r0, r6
 80074fc:	47c0      	blx	r8
 80074fe:	3001      	adds	r0, #1
 8007500:	d103      	bne.n	800750a <_printf_common+0xba>
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750a:	3501      	adds	r5, #1
 800750c:	e7c3      	b.n	8007496 <_printf_common+0x46>
 800750e:	18e1      	adds	r1, r4, r3
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	2030      	movs	r0, #48	; 0x30
 8007514:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007518:	4422      	add	r2, r4
 800751a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800751e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007522:	3302      	adds	r3, #2
 8007524:	e7c5      	b.n	80074b2 <_printf_common+0x62>
 8007526:	2301      	movs	r3, #1
 8007528:	4622      	mov	r2, r4
 800752a:	4639      	mov	r1, r7
 800752c:	4630      	mov	r0, r6
 800752e:	47c0      	blx	r8
 8007530:	3001      	adds	r0, #1
 8007532:	d0e6      	beq.n	8007502 <_printf_common+0xb2>
 8007534:	f109 0901 	add.w	r9, r9, #1
 8007538:	e7d8      	b.n	80074ec <_printf_common+0x9c>
	...

0800753c <_printf_i>:
 800753c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007540:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007544:	460c      	mov	r4, r1
 8007546:	7e09      	ldrb	r1, [r1, #24]
 8007548:	b085      	sub	sp, #20
 800754a:	296e      	cmp	r1, #110	; 0x6e
 800754c:	4617      	mov	r7, r2
 800754e:	4606      	mov	r6, r0
 8007550:	4698      	mov	r8, r3
 8007552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007554:	f000 80b3 	beq.w	80076be <_printf_i+0x182>
 8007558:	d822      	bhi.n	80075a0 <_printf_i+0x64>
 800755a:	2963      	cmp	r1, #99	; 0x63
 800755c:	d036      	beq.n	80075cc <_printf_i+0x90>
 800755e:	d80a      	bhi.n	8007576 <_printf_i+0x3a>
 8007560:	2900      	cmp	r1, #0
 8007562:	f000 80b9 	beq.w	80076d8 <_printf_i+0x19c>
 8007566:	2958      	cmp	r1, #88	; 0x58
 8007568:	f000 8083 	beq.w	8007672 <_printf_i+0x136>
 800756c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007570:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007574:	e032      	b.n	80075dc <_printf_i+0xa0>
 8007576:	2964      	cmp	r1, #100	; 0x64
 8007578:	d001      	beq.n	800757e <_printf_i+0x42>
 800757a:	2969      	cmp	r1, #105	; 0x69
 800757c:	d1f6      	bne.n	800756c <_printf_i+0x30>
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	6813      	ldr	r3, [r2, #0]
 8007582:	0605      	lsls	r5, r0, #24
 8007584:	f103 0104 	add.w	r1, r3, #4
 8007588:	d52a      	bpl.n	80075e0 <_printf_i+0xa4>
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	da03      	bge.n	800759a <_printf_i+0x5e>
 8007592:	222d      	movs	r2, #45	; 0x2d
 8007594:	425b      	negs	r3, r3
 8007596:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800759a:	486f      	ldr	r0, [pc, #444]	; (8007758 <_printf_i+0x21c>)
 800759c:	220a      	movs	r2, #10
 800759e:	e039      	b.n	8007614 <_printf_i+0xd8>
 80075a0:	2973      	cmp	r1, #115	; 0x73
 80075a2:	f000 809d 	beq.w	80076e0 <_printf_i+0x1a4>
 80075a6:	d808      	bhi.n	80075ba <_printf_i+0x7e>
 80075a8:	296f      	cmp	r1, #111	; 0x6f
 80075aa:	d020      	beq.n	80075ee <_printf_i+0xb2>
 80075ac:	2970      	cmp	r1, #112	; 0x70
 80075ae:	d1dd      	bne.n	800756c <_printf_i+0x30>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f043 0320 	orr.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	e003      	b.n	80075c2 <_printf_i+0x86>
 80075ba:	2975      	cmp	r1, #117	; 0x75
 80075bc:	d017      	beq.n	80075ee <_printf_i+0xb2>
 80075be:	2978      	cmp	r1, #120	; 0x78
 80075c0:	d1d4      	bne.n	800756c <_printf_i+0x30>
 80075c2:	2378      	movs	r3, #120	; 0x78
 80075c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075c8:	4864      	ldr	r0, [pc, #400]	; (800775c <_printf_i+0x220>)
 80075ca:	e055      	b.n	8007678 <_printf_i+0x13c>
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	1d19      	adds	r1, r3, #4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6011      	str	r1, [r2, #0]
 80075d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075dc:	2301      	movs	r3, #1
 80075de:	e08c      	b.n	80076fa <_printf_i+0x1be>
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6011      	str	r1, [r2, #0]
 80075e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075e8:	bf18      	it	ne
 80075ea:	b21b      	sxthne	r3, r3
 80075ec:	e7cf      	b.n	800758e <_printf_i+0x52>
 80075ee:	6813      	ldr	r3, [r2, #0]
 80075f0:	6825      	ldr	r5, [r4, #0]
 80075f2:	1d18      	adds	r0, r3, #4
 80075f4:	6010      	str	r0, [r2, #0]
 80075f6:	0628      	lsls	r0, r5, #24
 80075f8:	d501      	bpl.n	80075fe <_printf_i+0xc2>
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	e002      	b.n	8007604 <_printf_i+0xc8>
 80075fe:	0668      	lsls	r0, r5, #25
 8007600:	d5fb      	bpl.n	80075fa <_printf_i+0xbe>
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	4854      	ldr	r0, [pc, #336]	; (8007758 <_printf_i+0x21c>)
 8007606:	296f      	cmp	r1, #111	; 0x6f
 8007608:	bf14      	ite	ne
 800760a:	220a      	movne	r2, #10
 800760c:	2208      	moveq	r2, #8
 800760e:	2100      	movs	r1, #0
 8007610:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007614:	6865      	ldr	r5, [r4, #4]
 8007616:	60a5      	str	r5, [r4, #8]
 8007618:	2d00      	cmp	r5, #0
 800761a:	f2c0 8095 	blt.w	8007748 <_printf_i+0x20c>
 800761e:	6821      	ldr	r1, [r4, #0]
 8007620:	f021 0104 	bic.w	r1, r1, #4
 8007624:	6021      	str	r1, [r4, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d13d      	bne.n	80076a6 <_printf_i+0x16a>
 800762a:	2d00      	cmp	r5, #0
 800762c:	f040 808e 	bne.w	800774c <_printf_i+0x210>
 8007630:	4665      	mov	r5, ip
 8007632:	2a08      	cmp	r2, #8
 8007634:	d10b      	bne.n	800764e <_printf_i+0x112>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d508      	bpl.n	800764e <_printf_i+0x112>
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	6862      	ldr	r2, [r4, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	bfde      	ittt	le
 8007644:	2330      	movle	r3, #48	; 0x30
 8007646:	f805 3c01 	strble.w	r3, [r5, #-1]
 800764a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800764e:	ebac 0305 	sub.w	r3, ip, r5
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	f8cd 8000 	str.w	r8, [sp]
 8007658:	463b      	mov	r3, r7
 800765a:	aa03      	add	r2, sp, #12
 800765c:	4621      	mov	r1, r4
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff fef6 	bl	8007450 <_printf_common>
 8007664:	3001      	adds	r0, #1
 8007666:	d14d      	bne.n	8007704 <_printf_i+0x1c8>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	b005      	add	sp, #20
 800766e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007672:	4839      	ldr	r0, [pc, #228]	; (8007758 <_printf_i+0x21c>)
 8007674:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007678:	6813      	ldr	r3, [r2, #0]
 800767a:	6821      	ldr	r1, [r4, #0]
 800767c:	1d1d      	adds	r5, r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6015      	str	r5, [r2, #0]
 8007682:	060a      	lsls	r2, r1, #24
 8007684:	d50b      	bpl.n	800769e <_printf_i+0x162>
 8007686:	07ca      	lsls	r2, r1, #31
 8007688:	bf44      	itt	mi
 800768a:	f041 0120 	orrmi.w	r1, r1, #32
 800768e:	6021      	strmi	r1, [r4, #0]
 8007690:	b91b      	cbnz	r3, 800769a <_printf_i+0x15e>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	f022 0220 	bic.w	r2, r2, #32
 8007698:	6022      	str	r2, [r4, #0]
 800769a:	2210      	movs	r2, #16
 800769c:	e7b7      	b.n	800760e <_printf_i+0xd2>
 800769e:	064d      	lsls	r5, r1, #25
 80076a0:	bf48      	it	mi
 80076a2:	b29b      	uxthmi	r3, r3
 80076a4:	e7ef      	b.n	8007686 <_printf_i+0x14a>
 80076a6:	4665      	mov	r5, ip
 80076a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ac:	fb02 3311 	mls	r3, r2, r1, r3
 80076b0:	5cc3      	ldrb	r3, [r0, r3]
 80076b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076b6:	460b      	mov	r3, r1
 80076b8:	2900      	cmp	r1, #0
 80076ba:	d1f5      	bne.n	80076a8 <_printf_i+0x16c>
 80076bc:	e7b9      	b.n	8007632 <_printf_i+0xf6>
 80076be:	6813      	ldr	r3, [r2, #0]
 80076c0:	6825      	ldr	r5, [r4, #0]
 80076c2:	6961      	ldr	r1, [r4, #20]
 80076c4:	1d18      	adds	r0, r3, #4
 80076c6:	6010      	str	r0, [r2, #0]
 80076c8:	0628      	lsls	r0, r5, #24
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	d501      	bpl.n	80076d2 <_printf_i+0x196>
 80076ce:	6019      	str	r1, [r3, #0]
 80076d0:	e002      	b.n	80076d8 <_printf_i+0x19c>
 80076d2:	066a      	lsls	r2, r5, #25
 80076d4:	d5fb      	bpl.n	80076ce <_printf_i+0x192>
 80076d6:	8019      	strh	r1, [r3, #0]
 80076d8:	2300      	movs	r3, #0
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	4665      	mov	r5, ip
 80076de:	e7b9      	b.n	8007654 <_printf_i+0x118>
 80076e0:	6813      	ldr	r3, [r2, #0]
 80076e2:	1d19      	adds	r1, r3, #4
 80076e4:	6011      	str	r1, [r2, #0]
 80076e6:	681d      	ldr	r5, [r3, #0]
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	2100      	movs	r1, #0
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7f8 fd77 	bl	80001e0 <memchr>
 80076f2:	b108      	cbz	r0, 80076f8 <_printf_i+0x1bc>
 80076f4:	1b40      	subs	r0, r0, r5
 80076f6:	6060      	str	r0, [r4, #4]
 80076f8:	6863      	ldr	r3, [r4, #4]
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	2300      	movs	r3, #0
 80076fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007702:	e7a7      	b.n	8007654 <_printf_i+0x118>
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	462a      	mov	r2, r5
 8007708:	4639      	mov	r1, r7
 800770a:	4630      	mov	r0, r6
 800770c:	47c0      	blx	r8
 800770e:	3001      	adds	r0, #1
 8007710:	d0aa      	beq.n	8007668 <_printf_i+0x12c>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	079b      	lsls	r3, r3, #30
 8007716:	d413      	bmi.n	8007740 <_printf_i+0x204>
 8007718:	68e0      	ldr	r0, [r4, #12]
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	4298      	cmp	r0, r3
 800771e:	bfb8      	it	lt
 8007720:	4618      	movlt	r0, r3
 8007722:	e7a3      	b.n	800766c <_printf_i+0x130>
 8007724:	2301      	movs	r3, #1
 8007726:	464a      	mov	r2, r9
 8007728:	4639      	mov	r1, r7
 800772a:	4630      	mov	r0, r6
 800772c:	47c0      	blx	r8
 800772e:	3001      	adds	r0, #1
 8007730:	d09a      	beq.n	8007668 <_printf_i+0x12c>
 8007732:	3501      	adds	r5, #1
 8007734:	68e3      	ldr	r3, [r4, #12]
 8007736:	9a03      	ldr	r2, [sp, #12]
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	42ab      	cmp	r3, r5
 800773c:	dcf2      	bgt.n	8007724 <_printf_i+0x1e8>
 800773e:	e7eb      	b.n	8007718 <_printf_i+0x1dc>
 8007740:	2500      	movs	r5, #0
 8007742:	f104 0919 	add.w	r9, r4, #25
 8007746:	e7f5      	b.n	8007734 <_printf_i+0x1f8>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1ac      	bne.n	80076a6 <_printf_i+0x16a>
 800774c:	7803      	ldrb	r3, [r0, #0]
 800774e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007752:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007756:	e76c      	b.n	8007632 <_printf_i+0xf6>
 8007758:	08007e39 	.word	0x08007e39
 800775c:	08007e4a 	.word	0x08007e4a

08007760 <memmove>:
 8007760:	4288      	cmp	r0, r1
 8007762:	b510      	push	{r4, lr}
 8007764:	eb01 0302 	add.w	r3, r1, r2
 8007768:	d807      	bhi.n	800777a <memmove+0x1a>
 800776a:	1e42      	subs	r2, r0, #1
 800776c:	4299      	cmp	r1, r3
 800776e:	d00a      	beq.n	8007786 <memmove+0x26>
 8007770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007774:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007778:	e7f8      	b.n	800776c <memmove+0xc>
 800777a:	4283      	cmp	r3, r0
 800777c:	d9f5      	bls.n	800776a <memmove+0xa>
 800777e:	1881      	adds	r1, r0, r2
 8007780:	1ad2      	subs	r2, r2, r3
 8007782:	42d3      	cmn	r3, r2
 8007784:	d100      	bne.n	8007788 <memmove+0x28>
 8007786:	bd10      	pop	{r4, pc}
 8007788:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800778c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007790:	e7f7      	b.n	8007782 <memmove+0x22>
	...

08007794 <_free_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4605      	mov	r5, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	d045      	beq.n	8007828 <_free_r+0x94>
 800779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a0:	1f0c      	subs	r4, r1, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	18e4      	addlt	r4, r4, r3
 80077a8:	f000 f8d2 	bl	8007950 <__malloc_lock>
 80077ac:	4a1f      	ldr	r2, [pc, #124]	; (800782c <_free_r+0x98>)
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	4610      	mov	r0, r2
 80077b2:	b933      	cbnz	r3, 80077c2 <_free_r+0x2e>
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	6014      	str	r4, [r2, #0]
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077be:	f000 b8c8 	b.w	8007952 <__malloc_unlock>
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	d90c      	bls.n	80077e0 <_free_r+0x4c>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	1862      	adds	r2, r4, r1
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bf04      	itt	eq
 80077ce:	681a      	ldreq	r2, [r3, #0]
 80077d0:	685b      	ldreq	r3, [r3, #4]
 80077d2:	6063      	str	r3, [r4, #4]
 80077d4:	bf04      	itt	eq
 80077d6:	1852      	addeq	r2, r2, r1
 80077d8:	6022      	streq	r2, [r4, #0]
 80077da:	6004      	str	r4, [r0, #0]
 80077dc:	e7ec      	b.n	80077b8 <_free_r+0x24>
 80077de:	4613      	mov	r3, r2
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	b10a      	cbz	r2, 80077e8 <_free_r+0x54>
 80077e4:	42a2      	cmp	r2, r4
 80077e6:	d9fa      	bls.n	80077de <_free_r+0x4a>
 80077e8:	6819      	ldr	r1, [r3, #0]
 80077ea:	1858      	adds	r0, r3, r1
 80077ec:	42a0      	cmp	r0, r4
 80077ee:	d10b      	bne.n	8007808 <_free_r+0x74>
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	4401      	add	r1, r0
 80077f4:	1858      	adds	r0, r3, r1
 80077f6:	4282      	cmp	r2, r0
 80077f8:	6019      	str	r1, [r3, #0]
 80077fa:	d1dd      	bne.n	80077b8 <_free_r+0x24>
 80077fc:	6810      	ldr	r0, [r2, #0]
 80077fe:	6852      	ldr	r2, [r2, #4]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	4401      	add	r1, r0
 8007804:	6019      	str	r1, [r3, #0]
 8007806:	e7d7      	b.n	80077b8 <_free_r+0x24>
 8007808:	d902      	bls.n	8007810 <_free_r+0x7c>
 800780a:	230c      	movs	r3, #12
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	e7d3      	b.n	80077b8 <_free_r+0x24>
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	1821      	adds	r1, r4, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	bf04      	itt	eq
 8007818:	6811      	ldreq	r1, [r2, #0]
 800781a:	6852      	ldreq	r2, [r2, #4]
 800781c:	6062      	str	r2, [r4, #4]
 800781e:	bf04      	itt	eq
 8007820:	1809      	addeq	r1, r1, r0
 8007822:	6021      	streq	r1, [r4, #0]
 8007824:	605c      	str	r4, [r3, #4]
 8007826:	e7c7      	b.n	80077b8 <_free_r+0x24>
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	20000454 	.word	0x20000454

08007830 <_malloc_r>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	1ccd      	adds	r5, r1, #3
 8007834:	f025 0503 	bic.w	r5, r5, #3
 8007838:	3508      	adds	r5, #8
 800783a:	2d0c      	cmp	r5, #12
 800783c:	bf38      	it	cc
 800783e:	250c      	movcc	r5, #12
 8007840:	2d00      	cmp	r5, #0
 8007842:	4606      	mov	r6, r0
 8007844:	db01      	blt.n	800784a <_malloc_r+0x1a>
 8007846:	42a9      	cmp	r1, r5
 8007848:	d903      	bls.n	8007852 <_malloc_r+0x22>
 800784a:	230c      	movs	r3, #12
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	2000      	movs	r0, #0
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	f000 f87d 	bl	8007950 <__malloc_lock>
 8007856:	4a21      	ldr	r2, [pc, #132]	; (80078dc <_malloc_r+0xac>)
 8007858:	6814      	ldr	r4, [r2, #0]
 800785a:	4621      	mov	r1, r4
 800785c:	b991      	cbnz	r1, 8007884 <_malloc_r+0x54>
 800785e:	4c20      	ldr	r4, [pc, #128]	; (80078e0 <_malloc_r+0xb0>)
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	b91b      	cbnz	r3, 800786c <_malloc_r+0x3c>
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f863 	bl	8007930 <_sbrk_r>
 800786a:	6020      	str	r0, [r4, #0]
 800786c:	4629      	mov	r1, r5
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f85e 	bl	8007930 <_sbrk_r>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d124      	bne.n	80078c2 <_malloc_r+0x92>
 8007878:	230c      	movs	r3, #12
 800787a:	6033      	str	r3, [r6, #0]
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f868 	bl	8007952 <__malloc_unlock>
 8007882:	e7e4      	b.n	800784e <_malloc_r+0x1e>
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	1b5b      	subs	r3, r3, r5
 8007888:	d418      	bmi.n	80078bc <_malloc_r+0x8c>
 800788a:	2b0b      	cmp	r3, #11
 800788c:	d90f      	bls.n	80078ae <_malloc_r+0x7e>
 800788e:	600b      	str	r3, [r1, #0]
 8007890:	50cd      	str	r5, [r1, r3]
 8007892:	18cc      	adds	r4, r1, r3
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f85c 	bl	8007952 <__malloc_unlock>
 800789a:	f104 000b 	add.w	r0, r4, #11
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	f020 0007 	bic.w	r0, r0, #7
 80078a4:	1ac3      	subs	r3, r0, r3
 80078a6:	d0d3      	beq.n	8007850 <_malloc_r+0x20>
 80078a8:	425a      	negs	r2, r3
 80078aa:	50e2      	str	r2, [r4, r3]
 80078ac:	e7d0      	b.n	8007850 <_malloc_r+0x20>
 80078ae:	428c      	cmp	r4, r1
 80078b0:	684b      	ldr	r3, [r1, #4]
 80078b2:	bf16      	itet	ne
 80078b4:	6063      	strne	r3, [r4, #4]
 80078b6:	6013      	streq	r3, [r2, #0]
 80078b8:	460c      	movne	r4, r1
 80078ba:	e7eb      	b.n	8007894 <_malloc_r+0x64>
 80078bc:	460c      	mov	r4, r1
 80078be:	6849      	ldr	r1, [r1, #4]
 80078c0:	e7cc      	b.n	800785c <_malloc_r+0x2c>
 80078c2:	1cc4      	adds	r4, r0, #3
 80078c4:	f024 0403 	bic.w	r4, r4, #3
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d005      	beq.n	80078d8 <_malloc_r+0xa8>
 80078cc:	1a21      	subs	r1, r4, r0
 80078ce:	4630      	mov	r0, r6
 80078d0:	f000 f82e 	bl	8007930 <_sbrk_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d0cf      	beq.n	8007878 <_malloc_r+0x48>
 80078d8:	6025      	str	r5, [r4, #0]
 80078da:	e7db      	b.n	8007894 <_malloc_r+0x64>
 80078dc:	20000454 	.word	0x20000454
 80078e0:	20000458 	.word	0x20000458

080078e4 <_realloc_r>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	4607      	mov	r7, r0
 80078e8:	4614      	mov	r4, r2
 80078ea:	460e      	mov	r6, r1
 80078ec:	b921      	cbnz	r1, 80078f8 <_realloc_r+0x14>
 80078ee:	4611      	mov	r1, r2
 80078f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078f4:	f7ff bf9c 	b.w	8007830 <_malloc_r>
 80078f8:	b922      	cbnz	r2, 8007904 <_realloc_r+0x20>
 80078fa:	f7ff ff4b 	bl	8007794 <_free_r>
 80078fe:	4625      	mov	r5, r4
 8007900:	4628      	mov	r0, r5
 8007902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007904:	f000 f826 	bl	8007954 <_malloc_usable_size_r>
 8007908:	42a0      	cmp	r0, r4
 800790a:	d20f      	bcs.n	800792c <_realloc_r+0x48>
 800790c:	4621      	mov	r1, r4
 800790e:	4638      	mov	r0, r7
 8007910:	f7ff ff8e 	bl	8007830 <_malloc_r>
 8007914:	4605      	mov	r5, r0
 8007916:	2800      	cmp	r0, #0
 8007918:	d0f2      	beq.n	8007900 <_realloc_r+0x1c>
 800791a:	4631      	mov	r1, r6
 800791c:	4622      	mov	r2, r4
 800791e:	f7ff fbf7 	bl	8007110 <memcpy>
 8007922:	4631      	mov	r1, r6
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ff35 	bl	8007794 <_free_r>
 800792a:	e7e9      	b.n	8007900 <_realloc_r+0x1c>
 800792c:	4635      	mov	r5, r6
 800792e:	e7e7      	b.n	8007900 <_realloc_r+0x1c>

08007930 <_sbrk_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4c06      	ldr	r4, [pc, #24]	; (800794c <_sbrk_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4605      	mov	r5, r0
 8007938:	4608      	mov	r0, r1
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	f7ff f980 	bl	8006c40 <_sbrk>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_sbrk_r+0x1a>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	b103      	cbz	r3, 800794a <_sbrk_r+0x1a>
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20000788 	.word	0x20000788

08007950 <__malloc_lock>:
 8007950:	4770      	bx	lr

08007952 <__malloc_unlock>:
 8007952:	4770      	bx	lr

08007954 <_malloc_usable_size_r>:
 8007954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007958:	1f18      	subs	r0, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	bfbc      	itt	lt
 800795e:	580b      	ldrlt	r3, [r1, r0]
 8007960:	18c0      	addlt	r0, r0, r3
 8007962:	4770      	bx	lr
 8007964:	0000      	movs	r0, r0
	...

08007968 <ceil>:
 8007968:	ec51 0b10 	vmov	r0, r1, d0
 800796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007978:	2e13      	cmp	r6, #19
 800797a:	460c      	mov	r4, r1
 800797c:	ee10 5a10 	vmov	r5, s0
 8007980:	4680      	mov	r8, r0
 8007982:	dc30      	bgt.n	80079e6 <ceil+0x7e>
 8007984:	2e00      	cmp	r6, #0
 8007986:	da12      	bge.n	80079ae <ceil+0x46>
 8007988:	a333      	add	r3, pc, #204	; (adr r3, 8007a58 <ceil+0xf0>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f8 fc7d 	bl	800028c <__adddf3>
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	f7f9 f8bf 	bl	8000b18 <__aeabi_dcmpgt>
 800799a:	b128      	cbz	r0, 80079a8 <ceil+0x40>
 800799c:	2c00      	cmp	r4, #0
 800799e:	db55      	blt.n	8007a4c <ceil+0xe4>
 80079a0:	432c      	orrs	r4, r5
 80079a2:	d057      	beq.n	8007a54 <ceil+0xec>
 80079a4:	4c2e      	ldr	r4, [pc, #184]	; (8007a60 <ceil+0xf8>)
 80079a6:	2500      	movs	r5, #0
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	e025      	b.n	80079fa <ceil+0x92>
 80079ae:	4f2d      	ldr	r7, [pc, #180]	; (8007a64 <ceil+0xfc>)
 80079b0:	4137      	asrs	r7, r6
 80079b2:	ea01 0307 	and.w	r3, r1, r7
 80079b6:	4303      	orrs	r3, r0
 80079b8:	d01f      	beq.n	80079fa <ceil+0x92>
 80079ba:	a327      	add	r3, pc, #156	; (adr r3, 8007a58 <ceil+0xf0>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fc64 	bl	800028c <__adddf3>
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	f7f9 f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d0eb      	beq.n	80079a8 <ceil+0x40>
 80079d0:	2c00      	cmp	r4, #0
 80079d2:	bfc2      	ittt	gt
 80079d4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80079d8:	fa43 f606 	asrgt.w	r6, r3, r6
 80079dc:	19a4      	addgt	r4, r4, r6
 80079de:	ea24 0407 	bic.w	r4, r4, r7
 80079e2:	2500      	movs	r5, #0
 80079e4:	e7e0      	b.n	80079a8 <ceil+0x40>
 80079e6:	2e33      	cmp	r6, #51	; 0x33
 80079e8:	dd0b      	ble.n	8007a02 <ceil+0x9a>
 80079ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80079ee:	d104      	bne.n	80079fa <ceil+0x92>
 80079f0:	ee10 2a10 	vmov	r2, s0
 80079f4:	460b      	mov	r3, r1
 80079f6:	f7f8 fc49 	bl	800028c <__adddf3>
 80079fa:	ec41 0b10 	vmov	d0, r0, r1
 80079fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a02:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007a06:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0a:	fa23 f707 	lsr.w	r7, r3, r7
 8007a0e:	4207      	tst	r7, r0
 8007a10:	d0f3      	beq.n	80079fa <ceil+0x92>
 8007a12:	a311      	add	r3, pc, #68	; (adr r3, 8007a58 <ceil+0xf0>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fc38 	bl	800028c <__adddf3>
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f7f9 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d0bf      	beq.n	80079a8 <ceil+0x40>
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	dd02      	ble.n	8007a32 <ceil+0xca>
 8007a2c:	2e14      	cmp	r6, #20
 8007a2e:	d103      	bne.n	8007a38 <ceil+0xd0>
 8007a30:	3401      	adds	r4, #1
 8007a32:	ea25 0507 	bic.w	r5, r5, r7
 8007a36:	e7b7      	b.n	80079a8 <ceil+0x40>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007a3e:	fa03 f606 	lsl.w	r6, r3, r6
 8007a42:	4435      	add	r5, r6
 8007a44:	4545      	cmp	r5, r8
 8007a46:	bf38      	it	cc
 8007a48:	18e4      	addcc	r4, r4, r3
 8007a4a:	e7f2      	b.n	8007a32 <ceil+0xca>
 8007a4c:	2500      	movs	r5, #0
 8007a4e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007a52:	e7a9      	b.n	80079a8 <ceil+0x40>
 8007a54:	4625      	mov	r5, r4
 8007a56:	e7a7      	b.n	80079a8 <ceil+0x40>
 8007a58:	8800759c 	.word	0x8800759c
 8007a5c:	7e37e43c 	.word	0x7e37e43c
 8007a60:	3ff00000 	.word	0x3ff00000
 8007a64:	000fffff 	.word	0x000fffff

08007a68 <floor>:
 8007a68:	ec51 0b10 	vmov	r0, r1, d0
 8007a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007a78:	2e13      	cmp	r6, #19
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	ee10 5a10 	vmov	r5, s0
 8007a80:	4680      	mov	r8, r0
 8007a82:	dc34      	bgt.n	8007aee <floor+0x86>
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	da16      	bge.n	8007ab6 <floor+0x4e>
 8007a88:	a335      	add	r3, pc, #212	; (adr r3, 8007b60 <floor+0xf8>)
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f7f8 fbfd 	bl	800028c <__adddf3>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	f7f9 f83f 	bl	8000b18 <__aeabi_dcmpgt>
 8007a9a:	b148      	cbz	r0, 8007ab0 <floor+0x48>
 8007a9c:	2c00      	cmp	r4, #0
 8007a9e:	da59      	bge.n	8007b54 <floor+0xec>
 8007aa0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007aa4:	4a30      	ldr	r2, [pc, #192]	; (8007b68 <floor+0x100>)
 8007aa6:	432b      	orrs	r3, r5
 8007aa8:	2500      	movs	r5, #0
 8007aaa:	42ab      	cmp	r3, r5
 8007aac:	bf18      	it	ne
 8007aae:	4614      	movne	r4, r2
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	e025      	b.n	8007b02 <floor+0x9a>
 8007ab6:	4f2d      	ldr	r7, [pc, #180]	; (8007b6c <floor+0x104>)
 8007ab8:	4137      	asrs	r7, r6
 8007aba:	ea01 0307 	and.w	r3, r1, r7
 8007abe:	4303      	orrs	r3, r0
 8007ac0:	d01f      	beq.n	8007b02 <floor+0x9a>
 8007ac2:	a327      	add	r3, pc, #156	; (adr r3, 8007b60 <floor+0xf8>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fbe0 	bl	800028c <__adddf3>
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f7f9 f822 	bl	8000b18 <__aeabi_dcmpgt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d0eb      	beq.n	8007ab0 <floor+0x48>
 8007ad8:	2c00      	cmp	r4, #0
 8007ada:	bfbe      	ittt	lt
 8007adc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ae0:	fa43 f606 	asrlt.w	r6, r3, r6
 8007ae4:	19a4      	addlt	r4, r4, r6
 8007ae6:	ea24 0407 	bic.w	r4, r4, r7
 8007aea:	2500      	movs	r5, #0
 8007aec:	e7e0      	b.n	8007ab0 <floor+0x48>
 8007aee:	2e33      	cmp	r6, #51	; 0x33
 8007af0:	dd0b      	ble.n	8007b0a <floor+0xa2>
 8007af2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007af6:	d104      	bne.n	8007b02 <floor+0x9a>
 8007af8:	ee10 2a10 	vmov	r2, s0
 8007afc:	460b      	mov	r3, r1
 8007afe:	f7f8 fbc5 	bl	800028c <__adddf3>
 8007b02:	ec41 0b10 	vmov	d0, r0, r1
 8007b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b12:	fa23 f707 	lsr.w	r7, r3, r7
 8007b16:	4207      	tst	r7, r0
 8007b18:	d0f3      	beq.n	8007b02 <floor+0x9a>
 8007b1a:	a311      	add	r3, pc, #68	; (adr r3, 8007b60 <floor+0xf8>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fbb4 	bl	800028c <__adddf3>
 8007b24:	2200      	movs	r2, #0
 8007b26:	2300      	movs	r3, #0
 8007b28:	f7f8 fff6 	bl	8000b18 <__aeabi_dcmpgt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d0bf      	beq.n	8007ab0 <floor+0x48>
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	da02      	bge.n	8007b3a <floor+0xd2>
 8007b34:	2e14      	cmp	r6, #20
 8007b36:	d103      	bne.n	8007b40 <floor+0xd8>
 8007b38:	3401      	adds	r4, #1
 8007b3a:	ea25 0507 	bic.w	r5, r5, r7
 8007b3e:	e7b7      	b.n	8007ab0 <floor+0x48>
 8007b40:	2301      	movs	r3, #1
 8007b42:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007b46:	fa03 f606 	lsl.w	r6, r3, r6
 8007b4a:	4435      	add	r5, r6
 8007b4c:	4545      	cmp	r5, r8
 8007b4e:	bf38      	it	cc
 8007b50:	18e4      	addcc	r4, r4, r3
 8007b52:	e7f2      	b.n	8007b3a <floor+0xd2>
 8007b54:	2500      	movs	r5, #0
 8007b56:	462c      	mov	r4, r5
 8007b58:	e7aa      	b.n	8007ab0 <floor+0x48>
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w
 8007b60:	8800759c 	.word	0x8800759c
 8007b64:	7e37e43c 	.word	0x7e37e43c
 8007b68:	bff00000 	.word	0xbff00000
 8007b6c:	000fffff 	.word	0x000fffff

08007b70 <round>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	ec57 6b10 	vmov	r6, r7, d0
 8007b76:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007b7a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007b7e:	2c13      	cmp	r4, #19
 8007b80:	463b      	mov	r3, r7
 8007b82:	463d      	mov	r5, r7
 8007b84:	dc17      	bgt.n	8007bb6 <round+0x46>
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	da09      	bge.n	8007b9e <round+0x2e>
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007b90:	d103      	bne.n	8007b9a <round+0x2a>
 8007b92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b96:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	e02c      	b.n	8007bf8 <round+0x88>
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <round+0x90>)
 8007ba0:	4122      	asrs	r2, r4
 8007ba2:	4217      	tst	r7, r2
 8007ba4:	d100      	bne.n	8007ba8 <round+0x38>
 8007ba6:	b19e      	cbz	r6, 8007bd0 <round+0x60>
 8007ba8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bac:	4123      	asrs	r3, r4
 8007bae:	442b      	add	r3, r5
 8007bb0:	ea23 0302 	bic.w	r3, r3, r2
 8007bb4:	e7f1      	b.n	8007b9a <round+0x2a>
 8007bb6:	2c33      	cmp	r4, #51	; 0x33
 8007bb8:	dd0d      	ble.n	8007bd6 <round+0x66>
 8007bba:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007bbe:	d107      	bne.n	8007bd0 <round+0x60>
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	ee10 2a10 	vmov	r2, s0
 8007bc8:	f7f8 fb60 	bl	800028c <__adddf3>
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460f      	mov	r7, r1
 8007bd0:	ec47 6b10 	vmov	d0, r6, r7
 8007bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8007bda:	f04f 30ff 	mov.w	r0, #4294967295
 8007bde:	40d0      	lsrs	r0, r2
 8007be0:	4206      	tst	r6, r0
 8007be2:	d0f5      	beq.n	8007bd0 <round+0x60>
 8007be4:	2201      	movs	r2, #1
 8007be6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007bea:	fa02 f404 	lsl.w	r4, r2, r4
 8007bee:	1931      	adds	r1, r6, r4
 8007bf0:	bf28      	it	cs
 8007bf2:	189b      	addcs	r3, r3, r2
 8007bf4:	ea21 0100 	bic.w	r1, r1, r0
 8007bf8:	461f      	mov	r7, r3
 8007bfa:	460e      	mov	r6, r1
 8007bfc:	e7e8      	b.n	8007bd0 <round+0x60>
 8007bfe:	bf00      	nop
 8007c00:	000fffff 	.word	0x000fffff

08007c04 <_init>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr

08007c10 <_fini>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr
