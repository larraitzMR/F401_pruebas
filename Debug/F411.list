
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800602c  0800602c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000040  08006074  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08006074  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127b4  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d2a  00000000  00000000  00032824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  00035550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  000360c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019485  00000000  00000000  00036b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6cc  00000000  00000000  0004ff85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000953d2  00000000  00000000  0005c651  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1a23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee4  00000000  00000000  000f1aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005e84 	.word	0x08005e84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08005e84 	.word	0x08005e84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f92b 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f004 fd62 	bl	80058c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f943 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f90b 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000003c 	.word	0x2000003c
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000290 	.word	0x20000290

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000290 	.word	0x20000290

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff3e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff31 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e159      	b.n	800139c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8148 	bne.w	8001396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x4a>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	69b9      	ldr	r1, [r7, #24]
 800115a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0203 	and.w	r2, r3, #3
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d00b      	beq.n	80011b2 <HAL_GPIO_Init+0xe6>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a6:	2b11      	cmp	r3, #17
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d130      	bne.n	8001214 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a2 	beq.w	8001396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <HAL_GPIO_Init+0x2e4>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a55      	ldr	r2, [pc, #340]	; (80013b0 <HAL_GPIO_Init+0x2e4>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_GPIO_Init+0x2e4>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a48      	ldr	r2, [pc, #288]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x202>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a47      	ldr	r2, [pc, #284]	; (80013bc <HAL_GPIO_Init+0x2f0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x1fe>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <HAL_GPIO_Init+0x2f4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x1fa>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a45      	ldr	r2, [pc, #276]	; (80013c4 <HAL_GPIO_Init+0x2f8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x1f6>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <HAL_GPIO_Init+0x2fc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x1f2>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012be:	2307      	movs	r3, #7
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	4934      	ldr	r1, [pc, #208]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_GPIO_Init+0x300>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001312:	4a2e      	ldr	r2, [pc, #184]	; (80013cc <HAL_GPIO_Init+0x300>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_GPIO_Init+0x300>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133c:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x300>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_GPIO_Init+0x300>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_GPIO_Init+0x300>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x300>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_GPIO_Init+0x300>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f aea2 	bls.w	80010e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a4:	bf00      	nop
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e22d      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d075      	beq.n	800150e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	4ba3      	ldr	r3, [pc, #652]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00c      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4ba0      	ldr	r3, [pc, #640]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143a:	4b9d      	ldr	r3, [pc, #628]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <HAL_RCC_OscConfig+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d157      	bne.n	800150c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e208      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x74>
 800146a:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a90      	ldr	r2, [pc, #576]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a8a      	ldr	r2, [pc, #552]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 800149c:	4b84      	ldr	r3, [pc, #528]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a83      	ldr	r2, [pc, #524]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fce8 	bl	8000e90 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fce4 	bl	8000e90 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1cd      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xc0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcd4 	bl	8000e90 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fcd0 	bl	8000e90 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1b9      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0xe8>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e18d      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4952      	ldr	r1, [pc, #328]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b4f      	ldr	r3, [pc, #316]	; (80016b4 <HAL_RCC_OscConfig+0x2b0>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fc89 	bl	8000e90 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fc85 	bl	8000e90 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e16e      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4940      	ldr	r1, [pc, #256]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_OscConfig+0x2b0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc68 	bl	8000e90 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc64 	bl	8000e90 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e14d      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d030      	beq.n	8001650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_OscConfig+0x2b4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc48 	bl	8000e90 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fc44 	bl	8000e90 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e12d      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x200>
 8001622:	e015      	b.n	8001650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_OscConfig+0x2b4>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fc31 	bl	8000e90 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fc2d 	bl	8000e90 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e116      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a0 	beq.w	800179e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x2b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d121      	bne.n	80016de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_RCC_OscConfig+0x2b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fbf3 	bl	8000e90 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e011      	b.n	80016d2 <HAL_RCC_OscConfig+0x2ce>
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
 80016bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff fbe6 	bl	8000e90 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0cf      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x478>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 80016e6:	4b66      	ldr	r3, [pc, #408]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a65      	ldr	r2, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x32a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x312>
 80016fc:	4b60      	ldr	r3, [pc, #384]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a5f      	ldr	r2, [pc, #380]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a5c      	ldr	r2, [pc, #368]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x32a>
 8001716:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a59      	ldr	r2, [pc, #356]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a56      	ldr	r2, [pc, #344]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff fbab 	bl	8000e90 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fba7 	bl	8000e90 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e08e      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x33a>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fb95 	bl	8000e90 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fb91 	bl	8000e90 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e078      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a3a      	ldr	r2, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d064      	beq.n	8001870 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d05c      	beq.n	800186c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d141      	bne.n	800183e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x480>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb66 	bl	8000e90 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fb62 	bl	8000e90 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04b      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	019b      	lsls	r3, r3, #6
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	491d      	ldr	r1, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_RCC_OscConfig+0x480>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb3b 	bl	8000e90 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff fb37 	bl	8000e90 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e020      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x41a>
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_RCC_OscConfig+0x480>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb24 	bl	8000e90 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb20 	bl	8000e90 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e009      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x47c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x448>
 800186a:	e001      	b.n	8001870 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40007000 	.word	0x40007000
 8001880:	40023800 	.word	0x40023800
 8001884:	42470060 	.word	0x42470060

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0ca      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_RCC_ClockConfig+0x1b4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <HAL_RCC_ClockConfig+0x1b4>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <HAL_RCC_ClockConfig+0x1b4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b6      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494c      	ldr	r1, [pc, #304]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07d      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06d      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e065      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4933      	ldr	r1, [pc, #204]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa8a 	bl	8000e90 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa86 	bl	8000e90 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04d      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_ClockConfig+0x1b4>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_RCC_ClockConfig+0x1b4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e030      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4915      	ldr	r1, [pc, #84]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490d      	ldr	r1, [pc, #52]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f81d 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8001a12:	4601      	mov	r1, r0
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	fa21 f303 	lsr.w	r3, r1, r3
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff f9ec 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08006014 	.word	0x08006014
 8001a48:	2000003c 	.word	0x2000003c

08001a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x32>
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d008      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x38>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 808d 	bne.w	8001b92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a7a:	60bb      	str	r3, [r7, #8]
       break;
 8001a7c:	e08c      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7e:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_RCC_GetSysClockFreq+0x160>)
 8001a80:	60bb      	str	r3, [r7, #8]
      break;
 8001a82:	e089      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d023      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	f04f 0400 	mov.w	r4, #0
 8001aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	ea03 0501 	and.w	r5, r3, r1
 8001ab0:	ea04 0602 	and.w	r6, r4, r2
 8001ab4:	4a3d      	ldr	r2, [pc, #244]	; (8001bac <HAL_RCC_GetSysClockFreq+0x160>)
 8001ab6:	fb02 f106 	mul.w	r1, r2, r6
 8001aba:	2200      	movs	r2, #0
 8001abc:	fb02 f205 	mul.w	r2, r2, r5
 8001ac0:	440a      	add	r2, r1
 8001ac2:	493a      	ldr	r1, [pc, #232]	; (8001bac <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac4:	fba5 0101 	umull	r0, r1, r5, r1
 8001ac8:	1853      	adds	r3, r2, r1
 8001aca:	4619      	mov	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f04f 0400 	mov.w	r4, #0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	f7fe fff5 	bl	8000ac4 <__aeabi_uldivmod>
 8001ada:	4603      	mov	r3, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e049      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	f04f 0400 	mov.w	r4, #0
 8001aec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	ea03 0501 	and.w	r5, r3, r1
 8001af8:	ea04 0602 	and.w	r6, r4, r2
 8001afc:	4629      	mov	r1, r5
 8001afe:	4632      	mov	r2, r6
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	0154      	lsls	r4, r2, #5
 8001b0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b0e:	014b      	lsls	r3, r1, #5
 8001b10:	4619      	mov	r1, r3
 8001b12:	4622      	mov	r2, r4
 8001b14:	1b49      	subs	r1, r1, r5
 8001b16:	eb62 0206 	sbc.w	r2, r2, r6
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	f04f 0400 	mov.w	r4, #0
 8001b22:	0194      	lsls	r4, r2, #6
 8001b24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b28:	018b      	lsls	r3, r1, #6
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	00e2      	lsls	r2, r4, #3
 8001b3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b3e:	00d9      	lsls	r1, r3, #3
 8001b40:	460b      	mov	r3, r1
 8001b42:	4614      	mov	r4, r2
 8001b44:	195b      	adds	r3, r3, r5
 8001b46:	eb44 0406 	adc.w	r4, r4, r6
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	02a2      	lsls	r2, r4, #10
 8001b54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b58:	0299      	lsls	r1, r3, #10
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	f7fe ffaa 	bl	8000ac4 <__aeabi_uldivmod>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	3301      	adds	r3, #1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	60bb      	str	r3, [r7, #8]
      break;
 8001b90:	e002      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b94:	60bb      	str	r3, [r7, #8]
      break;
 8001b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b98:	68bb      	ldr	r3, [r7, #8]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	017d7840 	.word	0x017d7840

08001bb0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	605a      	str	r2, [r3, #4]
  
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001be2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	70da      	strb	r2, [r3, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11a      	bne.n	8001c62 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fa1a 	bl	800206a <RTC_Bcd2ToByte>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fa11 	bl	800206a <RTC_Bcd2ToByte>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	789b      	ldrb	r3, [r3, #2]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fa08 	bl	800206a <RTC_Bcd2ToByte>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <HAL_RTC_SetAlarm_IT+0x29c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4aa1      	ldr	r2, [pc, #644]	; (8001f0c <HAL_RTC_SetAlarm_IT+0x2a0>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
      
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	7f1b      	ldrb	r3, [r3, #28]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RTC_SetAlarm_IT+0x36>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e12e      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x294>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2202      	movs	r2, #2
 8001cac:	775a      	strb	r2, [r3, #29]
  
  if(Format == RTC_FORMAT_BIN)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d137      	bne.n	8001d24 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 f9ae 	bl	800202e <RTC_ByteToBcd2>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	785b      	ldrb	r3, [r3, #1]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f9a7 	bl	800202e <RTC_ByteToBcd2>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ce4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	789b      	ldrb	r3, [r3, #2]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f99f 	bl	800202e <RTC_ByteToBcd2>
 8001cf0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001cf2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	78db      	ldrb	r3, [r3, #3]
 8001cfa:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001cfc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f991 	bl	800202e <RTC_ByteToBcd2>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001d10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask)); 
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e040      	b.n	8001da6 <HAL_RTC_SetAlarm_IT+0x13a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_RTC_SetAlarm_IT+0xd6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f997 	bl	800206a <RTC_Bcd2ToByte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	e002      	b.n	8001d48 <HAL_RTC_SetAlarm_IT+0xdc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <HAL_RTC_SetAlarm_IT+0xf6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f987 	bl	800206a <RTC_Bcd2ToByte>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	e007      	b.n	8001d72 <HAL_RTC_SetAlarm_IT+0x106>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f97e 	bl	800206a <RTC_Bcd2ToByte>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001d7e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001d84:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	78db      	ldrb	r3, [r3, #3]
 8001d8a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001d8c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001d96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001d9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	22ca      	movs	r2, #202	; 0xca
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2253      	movs	r2, #83	; 0x53
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dca:	d141      	bne.n	8001e50 <HAL_RTC_SetAlarm_IT+0x1e4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dda:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001dec:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	617a      	str	r2, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <HAL_RTC_SetAlarm_IT+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	22ff      	movs	r2, #255	; 0xff
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2203      	movs	r2, #3
 8001e04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e077      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0e7      	beq.n	8001dee <HAL_RTC_SetAlarm_IT+0x182>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	e040      	b.n	8001ed2 <HAL_RTC_SetAlarm_IT+0x266>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e5e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001e70:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	617a      	str	r2, [r7, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RTC_SetAlarm_IT+0x228>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	22ff      	movs	r2, #255	; 0xff
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2203      	movs	r2, #3
 8001e88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e035      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x294>
      }
    } 
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0e7      	beq.n	8001e72 <HAL_RTC_SetAlarm_IT+0x206>
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	6013      	str	r3, [r2, #0]
  
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_RTC_SetAlarm_IT+0x2a4>)
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee8:	6093      	str	r3, [r2, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3724      	adds	r7, #36	; 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	2000003c 	.word	0x2000003c
 8001f0c:	10624dd3 	.word	0x10624dd3
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7f1b      	ldrb	r3, [r3, #28]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_RTC_DeactivateAlarm+0x1a>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e07b      	b.n	8002026 <HAL_RTC_DeactivateAlarm+0x112>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	775a      	strb	r2, [r3, #29]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	22ca      	movs	r2, #202	; 0xca
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2253      	movs	r2, #83	; 0x53
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
  
  if(Alarm == RTC_ALARM_A)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f50:	d12f      	bne.n	8001fb2 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f60:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f70:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f72:	f7fe ff8d 	bl	8000e90 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001f78:	e013      	b.n	8001fa2 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001f7a:	f7fe ff89 	bl	8000e90 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f88:	d90b      	bls.n	8001fa2 <HAL_RTC_DeactivateAlarm+0x8e>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e041      	b.n	8002026 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0e4      	beq.n	8001f7a <HAL_RTC_DeactivateAlarm+0x66>
 8001fb0:	e02e      	b.n	8002010 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc0:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe ff5d 	bl	8000e90 <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8001fd8:	e013      	b.n	8002002 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001fda:	f7fe ff59 	bl	8000e90 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe8:	d90b      	bls.n	8002002 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	22ff      	movs	r2, #255	; 0xff
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	775a      	strb	r2, [r3, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
        
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e011      	b.n	8002026 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0e4      	beq.n	8001fda <HAL_RTC_DeactivateAlarm+0xc6>
      }    
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY; 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);  
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK; 
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10U)
 800203c:	e005      	b.n	800204a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	3b0a      	subs	r3, #10
 8002048:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b09      	cmp	r3, #9
 800204e:	d8f6      	bhi.n	800203e <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	b2da      	uxtb	r2, r3
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4313      	orrs	r3, r2
 800205c:	b2db      	uxtb	r3, r3
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4413      	add	r3, r2
 8002098:	b2db      	uxtb	r3, r3
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e056      	b.n	8002166 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f003 fc1c 	bl	8005910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	ea42 0103 	orr.w	r1, r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	f003 0104 	and.w	r1, r3, #4
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08c      	sub	sp, #48	; 0x30
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x26>
 8002190:	2302      	movs	r3, #2
 8002192:	e18a      	b.n	80024aa <HAL_SPI_TransmitReceive+0x33c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800219c:	f7fe fe78 	bl	8000e90 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00f      	beq.n	80021de <HAL_SPI_TransmitReceive+0x70>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c4:	d107      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x68>
 80021ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d003      	beq.n	80021de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021dc:	e15b      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x82>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x82>
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021f6:	e14e      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b04      	cmp	r3, #4
 8002202:	d003      	beq.n	800220c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2205      	movs	r2, #5
 8002208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d007      	beq.n	8002260 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002268:	d178      	bne.n	800235c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x10a>
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d166      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	1c9a      	adds	r2, r3, #2
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229c:	e053      	b.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d11b      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d113      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	1c9a      	adds	r2, r3, #2
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d119      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x1b8>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d014      	beq.n	8002326 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	b292      	uxth	r2, r2
 8002308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	1c9a      	adds	r2, r3, #2
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002326:	f7fe fdb3 	bl	8000e90 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002332:	429a      	cmp	r2, r3
 8002334:	d807      	bhi.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d003      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002344:	e0a7      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1a6      	bne.n	800229e <HAL_SPI_TransmitReceive+0x130>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1a1      	bne.n	800229e <HAL_SPI_TransmitReceive+0x130>
 800235a:	e07c      	b.n	8002456 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_TransmitReceive+0x1fc>
 8002364:	8b7b      	ldrh	r3, [r7, #26]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d16b      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002390:	e057      	b.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d11c      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d017      	beq.n	80023da <HAL_SPI_TransmitReceive+0x26c>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d114      	bne.n	80023da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d119      	bne.n	800241c <HAL_SPI_TransmitReceive+0x2ae>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002418:	2301      	movs	r3, #1
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800241c:	f7fe fd38 	bl	8000e90 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002428:	429a      	cmp	r2, r3
 800242a:	d803      	bhi.n	8002434 <HAL_SPI_TransmitReceive+0x2c6>
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d102      	bne.n	800243a <HAL_SPI_TransmitReceive+0x2cc>
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002440:	e029      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1a2      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x224>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d19d      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f894 	bl	8002588 <SPI_EndRxTxTransaction>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002472:	e010      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	e000      	b.n	8002496 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c2:	e04c      	b.n	800255e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d048      	beq.n	800255e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024cc:	f7fe fce0 	bl	8000e90 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d902      	bls.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13d      	bne.n	800255e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fa:	d111      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002504:	d004      	beq.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d107      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002528:	d10f      	bne.n	800254a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e00f      	b.n	800257e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4013      	ands	r3, r2
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	429a      	cmp	r2, r3
 800257a:	d1a3      	bne.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <SPI_EndRxTxTransaction+0x7c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <SPI_EndRxTxTransaction+0x80>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0d5b      	lsrs	r3, r3, #21
 80025a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b2:	d112      	bne.n	80025da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2200      	movs	r2, #0
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ff77 	bl	80024b2 <SPI_WaitFlagStateUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e00f      	b.n	80025fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d0f2      	beq.n	80025da <SPI_EndRxTxTransaction+0x52>
 80025f4:	e000      	b.n	80025f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80025f6:	bf00      	nop
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000003c 	.word	0x2000003c
 8002608:	165e9f81 	.word	0x165e9f81

0800260c <SX1272BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1272BoardInit( LoRaBoardCallback_t *callbacks )
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <SX1272BoardInit+0x1c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6013      	str	r3, [r2, #0]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000160 	.word	0x20000160

0800262c <SX1272Init>:

uint32_t SX1272Init( RadioEvents_t *events )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8002634:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <SX1272Init+0xb4>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 800263a:	492a      	ldr	r1, [pc, #168]	; (80026e4 <SX1272Init+0xb8>)
 800263c:	482a      	ldr	r0, [pc, #168]	; (80026e8 <SX1272Init+0xbc>)
 800263e:	f001 fffd 	bl	800463c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1272OnTimeoutIrq );
 8002642:	4928      	ldr	r1, [pc, #160]	; (80026e4 <SX1272Init+0xb8>)
 8002644:	4829      	ldr	r0, [pc, #164]	; (80026ec <SX1272Init+0xc0>)
 8002646:	f001 fff9 	bl	800463c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 800264a:	4926      	ldr	r1, [pc, #152]	; (80026e4 <SX1272Init+0xb8>)
 800264c:	4828      	ldr	r0, [pc, #160]	; (80026f0 <SX1272Init+0xc4>)
 800264e:	f001 fff5 	bl	800463c <TimerInit>

    LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 8002652:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <SX1272Init+0xc8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2001      	movs	r0, #1
 800265a:	4798      	blx	r3

    SX1272Reset( );
 800265c:	f001 f968 	bl	8003930 <SX1272Reset>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 8002660:	2000      	movs	r0, #0
 8002662:	f001 f995 	bl	8003990 <SX1272SetOpMode>

    LoRaBoardCallbacks->SX1272BoardIoIrqInit( DioIrq );
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <SX1272Init+0xc8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4822      	ldr	r0, [pc, #136]	; (80026f8 <SX1272Init+0xcc>)
 800266e:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e020      	b.n	80026b8 <SX1272Init+0x8c>
    {
        SX1272SetModem( RadioRegsInit[i].Modem );
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	4920      	ldr	r1, [pc, #128]	; (80026fc <SX1272Init+0xd0>)
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	440b      	add	r3, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f001 f9b9 	bl	80039fc <SX1272SetModem>
        SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	491b      	ldr	r1, [pc, #108]	; (80026fc <SX1272Init+0xd0>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	440b      	add	r3, r1
 8002696:	3301      	adds	r3, #1
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b298      	uxth	r0, r3
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	4917      	ldr	r1, [pc, #92]	; (80026fc <SX1272Init+0xd0>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	3302      	adds	r3, #2
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f001 f9f9 	bl	8003aa4 <SX1272Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	3301      	adds	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d9db      	bls.n	8002676 <SX1272Init+0x4a>
    }

    SX1272SetModem( MODEM_FSK );
 80026be:	2000      	movs	r0, #0
 80026c0:	f001 f99c 	bl	80039fc <SX1272SetModem>

    SX1272.Settings.State = RF_IDLE;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <SX1272Init+0xd4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <SX1272Init+0xc8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4798      	blx	r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	3302      	adds	r3, #2
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000005c 	.word	0x2000005c
 80026e4:	08003c99 	.word	0x08003c99
 80026e8:	200002fc 	.word	0x200002fc
 80026ec:	2000032c 	.word	0x2000032c
 80026f0:	20000314 	.word	0x20000314
 80026f4:	20000160 	.word	0x20000160
 80026f8:	20000008 	.word	0x20000008
 80026fc:	08005ea4 	.word	0x08005ea4
 8002700:	20000294 	.word	0x20000294

08002704 <SX1272GetStatus>:

RadioState_t SX1272GetStatus( void )
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
    return SX1272.Settings.State;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <SX1272GetStatus+0x14>)
 800270a:	791b      	ldrb	r3, [r3, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000294 	.word	0x20000294

0800271c <SX1272SetChannel>:

void SX1272SetChannel( uint32_t freq )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1272.Settings.Channel = freq;
 8002724:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <SX1272SetChannel+0x74>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6093      	str	r3, [r2, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <SX1272SetChannel+0x78>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0b1b      	lsrs	r3, r3, #12
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f643 5209 	movw	r2, #15625	; 0x3d09
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	021a      	lsls	r2, r3, #8
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8002752:	3304      	adds	r3, #4
 8002754:	490f      	ldr	r1, [pc, #60]	; (8002794 <SX1272SetChannel+0x78>)
 8002756:	fba1 1303 	umull	r1, r3, r1, r3
 800275a:	0b1b      	lsrs	r3, r3, #12
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    SX1272Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4619      	mov	r1, r3
 8002768:	2006      	movs	r0, #6
 800276a:	f001 f99b 	bl	8003aa4 <SX1272Write>
    SX1272Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4619      	mov	r1, r3
 8002776:	2007      	movs	r0, #7
 8002778:	f001 f994 	bl	8003aa4 <SX1272Write>
    SX1272Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	2008      	movs	r0, #8
 8002784:	f001 f98e 	bl	8003aa4 <SX1272Write>
}
 8002788:	bf00      	nop
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000294 	.word	0x20000294
 8002794:	431bde83 	.word	0x431bde83

08002798 <SX1272IsChannelFree>:

bool SX1272IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4603      	mov	r3, r0
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	4613      	mov	r3, r2
 80027a8:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]

    if( SX1272GetStatus( ) != RF_IDLE )
 80027b6:	f7ff ffa5 	bl	8002704 <SX1272GetStatus>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <SX1272IsChannelFree+0x2c>
    {
        return false;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e029      	b.n	8002818 <SX1272IsChannelFree+0x80>
    }

    SX1272SetModem( modem );
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 f918 	bl	80039fc <SX1272SetModem>

    SX1272SetChannel( freq );
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	f7ff ffa5 	bl	800271c <SX1272SetChannel>

    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80027d2:	2005      	movs	r0, #5
 80027d4:	f001 f8dc 	bl	8003990 <SX1272SetOpMode>

    DelayMs( 1 );
 80027d8:	2001      	movs	r0, #1
 80027da:	f001 fecb 	bl	8004574 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 80027de:	f002 f838 	bl	8004852 <TimerGetCurrentTime>
 80027e2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80027e4:	e00e      	b.n	8002804 <SX1272IsChannelFree+0x6c>
    {
        rssi = SX1272ReadRssi( modem );
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f875 	bl	80038d8 <SX1272ReadRssi>
 80027ee:	4603      	mov	r3, r0
 80027f0:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80027f2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	dd02      	ble.n	8002804 <SX1272IsChannelFree+0x6c>
        {
            status = false;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
            break;
 8002802:	e006      	b.n	8002812 <SX1272IsChannelFree+0x7a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8002804:	6938      	ldr	r0, [r7, #16]
 8002806:	f002 f832 	bl	800486e <TimerGetElapsedTime>
 800280a:	4602      	mov	r2, r0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4293      	cmp	r3, r2
 8002810:	d8e9      	bhi.n	80027e6 <SX1272IsChannelFree+0x4e>
        }
    }
    SX1272SetSleep( );
 8002812:	f000 fe59 	bl	80034c8 <SX1272SetSleep>
    return status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <SX1272Random>:

uint32_t SX1272Random( void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1272SetModem( MODEM_LORA );
 800282a:	2001      	movs	r0, #1
 800282c:	f001 f8e6 	bl	80039fc <SX1272SetModem>

    // Disable LoRa modem interrupts
    SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002830:	21ff      	movs	r1, #255	; 0xff
 8002832:	2011      	movs	r0, #17
 8002834:	f001 f936 	bl	8003aa4 <SX1272Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8002838:	2005      	movs	r0, #5
 800283a:	f001 f8a9 	bl	8003990 <SX1272SetOpMode>

    for( i = 0; i < 32; i++ )
 800283e:	2300      	movs	r3, #0
 8002840:	71fb      	strb	r3, [r7, #7]
 8002842:	e011      	b.n	8002868 <SX1272Random+0x48>
    {
        DelayMs( 1 );
 8002844:	2001      	movs	r0, #1
 8002846:	f001 fe95 	bl	8004574 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1272Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800284a:	202c      	movs	r0, #44	; 0x2c
 800284c:	f001 f93c 	bl	8003ac8 <SX1272Read>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	3301      	adds	r3, #1
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	2b1f      	cmp	r3, #31
 800286c:	d9ea      	bls.n	8002844 <SX1272Random+0x24>
    }

    SX1272SetSleep( );
 800286e:	f000 fe2b 	bl	80034c8 <SX1272SetSleep>

    return rnd;
 8002872:	683b      	ldr	r3, [r7, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e017      	b.n	80028ba <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <GetFskBandwidthRegValue+0x54>)
 800288e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d30d      	bcc.n	80028b4 <GetFskBandwidthRegValue+0x38>
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <GetFskBandwidthRegValue+0x54>)
 800289e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d205      	bcs.n	80028b4 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <GetFskBandwidthRegValue+0x54>)
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	791b      	ldrb	r3, [r3, #4]
 80028b2:	e006      	b.n	80028c2 <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	3301      	adds	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b14      	cmp	r3, #20
 80028be:	d9e4      	bls.n	800288a <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80028c0:	e7fe      	b.n	80028c0 <GetFskBandwidthRegValue+0x44>
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	08005ed8 	.word	0x08005ed8
 80028d4:	00000000 	.word	0x00000000

080028d8 <SX1272SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	4613      	mov	r3, r2
 80028ea:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f884 	bl	80039fc <SX1272SetModem>

    switch( modem )
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <SX1272SetRxConfig+0x2a>
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f000 80cf 	beq.w	8002a9e <SX1272SetRxConfig+0x1c6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002900:	e1cb      	b.n	8002c9a <SX1272SetRxConfig+0x3c2>
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002902:	4a91      	ldr	r2, [pc, #580]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6153      	str	r3, [r2, #20]
            SX1272.Settings.Fsk.Datarate = datarate;
 8002908:	4a8f      	ldr	r2, [pc, #572]	; (8002b48 <SX1272SetRxConfig+0x270>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	61d3      	str	r3, [r2, #28]
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800290e:	4a8e      	ldr	r2, [pc, #568]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	6193      	str	r3, [r2, #24]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002914:	4a8c      	ldr	r2, [pc, #560]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800291a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1272.Settings.Fsk.PayloadLen = payloadLen;
 800291e:	4a8a      	ldr	r2, [pc, #552]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002920:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002924:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8002928:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <SX1272SetRxConfig+0x270>)
 800292a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800292e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8002932:	4a85      	ldr	r2, [pc, #532]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002934:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002938:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 800293c:	4a82      	ldr	r2, [pc, #520]	; (8002b48 <SX1272SetRxConfig+0x270>)
 800293e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002942:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002946:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800294a:	8413      	strh	r3, [r2, #32]
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800294c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd94 	bl	800047c <__aeabi_i2d>
 8002954:	4604      	mov	r4, r0
 8002956:	460d      	mov	r5, r1
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fd fd7f 	bl	800045c <__aeabi_ui2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	4979      	ldr	r1, [pc, #484]	; (8002b4c <SX1272SetRxConfig+0x274>)
 8002968:	f7fd ff1c 	bl	80007a4 <__aeabi_ddiv>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	4b75      	ldr	r3, [pc, #468]	; (8002b50 <SX1272SetRxConfig+0x278>)
 800297a:	f7fd fde9 	bl	8000550 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4620      	mov	r0, r4
 8002984:	4629      	mov	r1, r5
 8002986:	f7fd fde3 	bl	8000550 <__aeabi_dmul>
 800298a:	4603      	mov	r3, r0
 800298c:	460c      	mov	r4, r1
 800298e:	4618      	mov	r0, r3
 8002990:	4621      	mov	r1, r4
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <SX1272SetRxConfig+0x27c>)
 8002998:	f7fd fdda 	bl	8000550 <__aeabi_dmul>
 800299c:	4603      	mov	r3, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	4618      	mov	r0, r3
 80029a2:	4621      	mov	r1, r4
 80029a4:	f7fe f86e 	bl	8000a84 <__aeabi_d2uiz>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b67      	ldr	r3, [pc, #412]	; (8002b48 <SX1272SetRxConfig+0x270>)
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd fd54 	bl	800045c <__aeabi_ui2d>
 80029b4:	4603      	mov	r3, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	a160      	add	r1, pc, #384	; (adr r1, 8002b40 <SX1272SetRxConfig+0x268>)
 80029be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029c2:	f7fd feef 	bl	80007a4 <__aeabi_ddiv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	460c      	mov	r4, r1
 80029ca:	4618      	mov	r0, r3
 80029cc:	4621      	mov	r1, r4
 80029ce:	f7fe f859 	bl	8000a84 <__aeabi_d2uiz>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	607b      	str	r3, [r7, #4]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4619      	mov	r1, r3
 80029e0:	2002      	movs	r0, #2
 80029e2:	f001 f85f 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	2003      	movs	r0, #3
 80029ee:	f001 f859 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80029f2:	68b8      	ldr	r0, [r7, #8]
 80029f4:	f7ff ff42 	bl	800287c <GetFskBandwidthRegValue>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4619      	mov	r1, r3
 80029fc:	2012      	movs	r0, #18
 80029fe:	f001 f851 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002a02:	6a38      	ldr	r0, [r7, #32]
 8002a04:	f7ff ff3a 	bl	800287c <GetFskBandwidthRegValue>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	2013      	movs	r0, #19
 8002a0e:	f001 f849 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	2025      	movs	r0, #37	; 0x25
 8002a1e:	f001 f841 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	2026      	movs	r0, #38	; 0x26
 8002a2a:	f001 f83b 	bl	8003aa4 <SX1272Write>
            if( fixLen == 1 )
 8002a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <SX1272SetRxConfig+0x16c>
                SX1272Write( REG_PAYLOADLENGTH, payloadLen );
 8002a36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2032      	movs	r0, #50	; 0x32
 8002a3e:	f001 f831 	bl	8003aa4 <SX1272Write>
 8002a42:	e003      	b.n	8002a4c <SX1272SetRxConfig+0x174>
                SX1272Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002a44:	21ff      	movs	r1, #255	; 0xff
 8002a46:	2032      	movs	r0, #50	; 0x32
 8002a48:	f001 f82c 	bl	8003aa4 <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8002a4c:	2030      	movs	r0, #48	; 0x30
 8002a4e:	f001 f83b 	bl	8003ac8 <SX1272Read>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002a56:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8002a5a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002a5c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d001      	beq.n	8002a68 <SX1272SetRxConfig+0x190>
 8002a64:	2200      	movs	r2, #0
 8002a66:	e001      	b.n	8002a6c <SX1272SetRxConfig+0x194>
 8002a68:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002a70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a74:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2030      	movs	r0, #48	; 0x30
 8002a82:	f001 f80f 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002a86:	2031      	movs	r0, #49	; 0x31
 8002a88:	f001 f81e 	bl	8003ac8 <SX1272Read>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	2031      	movs	r0, #49	; 0x31
 8002a98:	f001 f804 	bl	8003aa4 <SX1272Write>
        break;
 8002a9c:	e0fd      	b.n	8002c9a <SX1272SetRxConfig+0x3c2>
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6453      	str	r3, [r2, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8002aa4:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6493      	str	r3, [r2, #72]	; 0x48
            SX1272.Settings.LoRa.Coderate = coderate;
 8002aaa:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8002ab2:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ab6:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1272.Settings.LoRa.FixLen = fixLen;
 8002aba:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002abc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ac0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1272.Settings.LoRa.PayloadLen = payloadLen;
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002ac6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002aca:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8002ace:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002ad0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ad4:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002ada:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002ade:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002ae4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ae8:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002aee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002af2:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002af8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002afc:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
            if( datarate > 12 )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d902      	bls.n	8002b0c <SX1272SetRxConfig+0x234>
                datarate = 12;
 8002b06:	230c      	movs	r3, #12
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	e004      	b.n	8002b16 <SX1272SetRxConfig+0x23e>
            else if( datarate < 6 )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d801      	bhi.n	8002b16 <SX1272SetRxConfig+0x23e>
                datarate = 6;
 8002b12:	2306      	movs	r3, #6
 8002b14:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <SX1272SetRxConfig+0x250>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b0b      	cmp	r3, #11
 8002b20:	d008      	beq.n	8002b34 <SX1272SetRxConfig+0x25c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	d005      	beq.n	8002b34 <SX1272SetRxConfig+0x25c>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d114      	bne.n	8002b58 <SX1272SetRxConfig+0x280>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d111      	bne.n	8002b58 <SX1272SetRxConfig+0x280>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SX1272SetRxConfig+0x270>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002b3c:	e010      	b.n	8002b60 <SX1272SetRxConfig+0x288>
 8002b3e:	bf00      	nop
 8002b40:	00000000 	.word	0x00000000
 8002b44:	417e8480 	.word	0x417e8480
 8002b48:	20000294 	.word	0x20000294
 8002b4c:	3ff00000 	.word	0x3ff00000
 8002b50:	40200000 	.word	0x40200000
 8002b54:	408f4000 	.word	0x408f4000
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002b58:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <SX1272SetRxConfig+0x3cc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8002b60:	201d      	movs	r0, #29
 8002b62:	f000 ffb1 	bl	8003ac8 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	019b      	lsls	r3, r3, #6
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	7bbb      	ldrb	r3, [r7, #14]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002b78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002b84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8002b90:	4a44      	ldr	r2, [pc, #272]	; (8002ca4 <SX1272SetRxConfig+0x3cc>)
 8002b92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	201d      	movs	r0, #29
 8002b9e:	f000 ff81 	bl	8003aa4 <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8002ba2:	201e      	movs	r0, #30
 8002ba4:	f000 ff90 	bl	8003ac8 <SX1272Read>
 8002ba8:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002bbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	201e      	movs	r0, #30
 8002bd2:	f000 ff67 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	201f      	movs	r0, #31
 8002bde:	f000 ff61 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	2020      	movs	r0, #32
 8002bee:	f000 ff59 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	2021      	movs	r0, #33	; 0x21
 8002bfa:	f000 ff53 	bl	8003aa4 <SX1272Write>
            if( fixLen == 1 )
 8002bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <SX1272SetRxConfig+0x33a>
                SX1272Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8002c06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	2022      	movs	r0, #34	; 0x22
 8002c0e:	f000 ff49 	bl	8003aa4 <SX1272Write>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <SX1272SetRxConfig+0x3cc>)
 8002c14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d011      	beq.n	8002c40 <SX1272SetRxConfig+0x368>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002c1c:	204b      	movs	r0, #75	; 0x4b
 8002c1e:	f000 ff53 	bl	8003ac8 <SX1272Read>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	204b      	movs	r0, #75	; 0x4b
 8002c2e:	f000 ff39 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <SX1272SetRxConfig+0x3cc>)
 8002c34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2024      	movs	r0, #36	; 0x24
 8002c3c:	f000 ff32 	bl	8003aa4 <SX1272Write>
            if( datarate == 6 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d114      	bne.n	8002c70 <SX1272SetRxConfig+0x398>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002c46:	2031      	movs	r0, #49	; 0x31
 8002c48:	f000 ff3e 	bl	8003ac8 <SX1272Read>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	f023 0307 	bic.w	r3, r3, #7
 8002c54:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002c56:	f043 0305 	orr.w	r3, r3, #5
 8002c5a:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	2031      	movs	r0, #49	; 0x31
 8002c62:	f000 ff1f 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002c66:	210c      	movs	r1, #12
 8002c68:	2037      	movs	r0, #55	; 0x37
 8002c6a:	f000 ff1b 	bl	8003aa4 <SX1272Write>
        break;
 8002c6e:	e013      	b.n	8002c98 <SX1272SetRxConfig+0x3c0>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002c70:	2031      	movs	r0, #49	; 0x31
 8002c72:	f000 ff29 	bl	8003ac8 <SX1272Read>
 8002c76:	4603      	mov	r3, r0
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
 8002c7e:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002c80:	f043 0303 	orr.w	r3, r3, #3
 8002c84:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2031      	movs	r0, #49	; 0x31
 8002c8c:	f000 ff0a 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002c90:	210a      	movs	r1, #10
 8002c92:	2037      	movs	r0, #55	; 0x37
 8002c94:	f000 ff06 	bl	8003aa4 <SX1272Write>
        break;
 8002c98:	bf00      	nop
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000294 	.word	0x20000294

08002ca8 <SX1272SetTxConfig>:
void SX1272SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60ba      	str	r2, [r7, #8]
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fe9d 	bl	80039fc <SX1272SetModem>

    LoRaBoardCallbacks->SX1272BoardSetRfTxPower( power );
 8002cc2:	4bb9      	ldr	r3, [pc, #740]	; (8002fa8 <SX1272SetTxConfig+0x300>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4798      	blx	r3

    switch( modem )
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <SX1272SetTxConfig+0x36>
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f000 8099 	beq.w	8002e0e <SX1272SetTxConfig+0x166>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002cdc:	e17d      	b.n	8002fda <SX1272SetTxConfig+0x332>
            SX1272.Settings.Fsk.Power = power;
 8002cde:	4ab3      	ldr	r2, [pc, #716]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002ce0:	7bbb      	ldrb	r3, [r7, #14]
 8002ce2:	7313      	strb	r3, [r2, #12]
            SX1272.Settings.Fsk.Fdev = fdev;
 8002ce4:	4ab1      	ldr	r2, [pc, #708]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6113      	str	r3, [r2, #16]
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002cea:	4ab0      	ldr	r2, [pc, #704]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6153      	str	r3, [r2, #20]
            SX1272.Settings.Fsk.Datarate = datarate;
 8002cf0:	4aae      	ldr	r2, [pc, #696]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	61d3      	str	r3, [r2, #28]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002cf6:	4aad      	ldr	r2, [pc, #692]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002cf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cfa:	8413      	strh	r3, [r2, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002cfc:	4aab      	ldr	r2, [pc, #684]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002cfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d02:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8002d06:	4aa9      	ldr	r2, [pc, #676]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002d08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d0c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8002d10:	4aa6      	ldr	r2, [pc, #664]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002d12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002d16:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8002d1a:	4aa4      	ldr	r2, [pc, #656]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	6293      	str	r3, [r2, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002d20:	68b8      	ldr	r0, [r7, #8]
 8002d22:	f7fd fb9b 	bl	800045c <__aeabi_ui2d>
 8002d26:	a39c      	add	r3, pc, #624	; (adr r3, 8002f98 <SX1272SetTxConfig+0x2f0>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fd3a 	bl	80007a4 <__aeabi_ddiv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	4618      	mov	r0, r3
 8002d36:	4621      	mov	r1, r4
 8002d38:	f7fd fea4 	bl	8000a84 <__aeabi_d2uiz>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	60bb      	str	r3, [r7, #8]
            SX1272Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2004      	movs	r0, #4
 8002d4c:	f000 feaa 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	2005      	movs	r0, #5
 8002d58:	f000 fea4 	bl	8003aa4 <SX1272Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002d5c:	6a38      	ldr	r0, [r7, #32]
 8002d5e:	f7fd fb7d 	bl	800045c <__aeabi_ui2d>
 8002d62:	4603      	mov	r3, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	461a      	mov	r2, r3
 8002d68:	4623      	mov	r3, r4
 8002d6a:	a18d      	add	r1, pc, #564	; (adr r1, 8002fa0 <SX1272SetTxConfig+0x2f8>)
 8002d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d70:	f7fd fd18 	bl	80007a4 <__aeabi_ddiv>
 8002d74:	4603      	mov	r3, r0
 8002d76:	460c      	mov	r4, r1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	f7fd fe82 	bl	8000a84 <__aeabi_d2uiz>
 8002d80:	4603      	mov	r3, r0
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	623b      	str	r3, [r7, #32]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f000 fe88 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f000 fe82 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002da0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	2025      	movs	r0, #37	; 0x25
 8002dac:	f000 fe7a 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002db0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	2026      	movs	r0, #38	; 0x26
 8002db8:	f000 fe74 	bl	8003aa4 <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8002dbc:	2030      	movs	r0, #48	; 0x30
 8002dbe:	f000 fe83 	bl	8003ac8 <SX1272Read>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002dc6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8002dca:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002dcc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	d001      	beq.n	8002dd8 <SX1272SetTxConfig+0x130>
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	e001      	b.n	8002ddc <SX1272SetTxConfig+0x134>
 8002dd8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002de0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002de4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	2030      	movs	r0, #48	; 0x30
 8002df2:	f000 fe57 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002df6:	2031      	movs	r0, #49	; 0x31
 8002df8:	f000 fe66 	bl	8003ac8 <SX1272Read>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	2031      	movs	r0, #49	; 0x31
 8002e08:	f000 fe4c 	bl	8003aa4 <SX1272Write>
        break;
 8002e0c:	e0e5      	b.n	8002fda <SX1272SetTxConfig+0x332>
            SX1272.Settings.LoRa.Power = power;
 8002e0e:	4a67      	ldr	r2, [pc, #412]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8002e16:	4a65      	ldr	r2, [pc, #404]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6453      	str	r3, [r2, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8002e1c:	4a63      	ldr	r2, [pc, #396]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	6493      	str	r3, [r2, #72]	; 0x48
            SX1272.Settings.LoRa.Coderate = coderate;
 8002e22:	4a62      	ldr	r2, [pc, #392]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e28:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8002e2c:	4a5f      	ldr	r2, [pc, #380]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e30:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1272.Settings.LoRa.FixLen = fixLen;
 8002e34:	4a5d      	ldr	r2, [pc, #372]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e3a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8002e3e:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e40:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e44:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8002e48:	4a58      	ldr	r2, [pc, #352]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e4a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002e4e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8002e52:	4a56      	ldr	r2, [pc, #344]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e58:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002e5c:	4a53      	ldr	r2, [pc, #332]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e5e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e62:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8002e66:	4a51      	ldr	r2, [pc, #324]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
            if( datarate > 12 )
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d902      	bls.n	8002e78 <SX1272SetTxConfig+0x1d0>
                datarate = 12;
 8002e72:	230c      	movs	r3, #12
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	e004      	b.n	8002e82 <SX1272SetTxConfig+0x1da>
            else if( datarate < 6 )
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d801      	bhi.n	8002e82 <SX1272SetTxConfig+0x1da>
                datarate = 6;
 8002e7e:	2306      	movs	r3, #6
 8002e80:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <SX1272SetTxConfig+0x1ec>
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2b0b      	cmp	r3, #11
 8002e8c:	d008      	beq.n	8002ea0 <SX1272SetTxConfig+0x1f8>
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	2b0c      	cmp	r3, #12
 8002e92:	d005      	beq.n	8002ea0 <SX1272SetTxConfig+0x1f8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <SX1272SetTxConfig+0x202>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	d104      	bne.n	8002eaa <SX1272SetTxConfig+0x202>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002ea0:	4b42      	ldr	r3, [pc, #264]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002ea8:	e003      	b.n	8002eb2 <SX1272SetTxConfig+0x20a>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002eb4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d011      	beq.n	8002ee0 <SX1272SetTxConfig+0x238>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002ebc:	204b      	movs	r0, #75	; 0x4b
 8002ebe:	f000 fe03 	bl	8003ac8 <SX1272Read>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	204b      	movs	r0, #75	; 0x4b
 8002ece:	f000 fde9 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002ed4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ed8:	4619      	mov	r1, r3
 8002eda:	2024      	movs	r0, #36	; 0x24
 8002edc:	f000 fde2 	bl	8003aa4 <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8002ee0:	201d      	movs	r0, #29
 8002ee2:	f000 fdf1 	bl	8003ac8 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	019b      	lsls	r3, r3, #6
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002efa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002f02:	4313      	orrs	r3, r2
 8002f04:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002f06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <SX1272SetTxConfig+0x304>)
 8002f14:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	201d      	movs	r0, #29
 8002f20:	f000 fdc0 	bl	8003aa4 <SX1272Write>
                        ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8002f24:	201e      	movs	r0, #30
 8002f26:	f000 fdcf 	bl	8003ac8 <SX1272Read>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
                          ( datarate << 4 ) );
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	201e      	movs	r0, #30
 8002f42:	f000 fdaf 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002f46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	2020      	movs	r0, #32
 8002f52:	f000 fda7 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8002f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	2021      	movs	r0, #33	; 0x21
 8002f5e:	f000 fda1 	bl	8003aa4 <SX1272Write>
            if( datarate == 6 )
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d123      	bne.n	8002fb0 <SX1272SetTxConfig+0x308>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002f68:	2031      	movs	r0, #49	; 0x31
 8002f6a:	f000 fdad 	bl	8003ac8 <SX1272Read>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	f023 0307 	bic.w	r3, r3, #7
 8002f76:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002f78:	f043 0305 	orr.w	r3, r3, #5
 8002f7c:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	2031      	movs	r0, #49	; 0x31
 8002f84:	f000 fd8e 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002f88:	210c      	movs	r1, #12
 8002f8a:	2037      	movs	r0, #55	; 0x37
 8002f8c:	f000 fd8a 	bl	8003aa4 <SX1272Write>
        break;
 8002f90:	e022      	b.n	8002fd8 <SX1272SetTxConfig+0x330>
 8002f92:	bf00      	nop
 8002f94:	f3af 8000 	nop.w
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	404e8480 	.word	0x404e8480
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	417e8480 	.word	0x417e8480
 8002fa8:	20000160 	.word	0x20000160
 8002fac:	20000294 	.word	0x20000294
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002fb0:	2031      	movs	r0, #49	; 0x31
 8002fb2:	f000 fd89 	bl	8003ac8 <SX1272Read>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	f023 0307 	bic.w	r3, r3, #7
 8002fbe:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002fc0:	f043 0303 	orr.w	r3, r3, #3
 8002fc4:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2031      	movs	r0, #49	; 0x31
 8002fcc:	f000 fd6a 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002fd0:	210a      	movs	r1, #10
 8002fd2:	2037      	movs	r0, #55	; 0x37
 8002fd4:	f000 fd66 	bl	8003aa4 <SX1272Write>
        break;
 8002fd8:	bf00      	nop
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0000      	movs	r0, r0
	...

08002fe8 <SX1272GetTimeOnAir>:

uint32_t SX1272GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8002fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fea:	b095      	sub	sp, #84	; 0x54
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	71fb      	strb	r3, [r7, #7]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <SX1272GetTimeOnAir+0x22>
 8003002:	2b01      	cmp	r3, #1
 8003004:	f000 8092 	beq.w	800312c <SX1272GetTimeOnAir+0x144>
 8003008:	e1a0      	b.n	800334c <SX1272GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 800300a:	4bad      	ldr	r3, [pc, #692]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 800300c:	8c1b      	ldrh	r3, [r3, #32]
 800300e:	461c      	mov	r4, r3
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003010:	2027      	movs	r0, #39	; 0x27
 8003012:	f000 fd59 	bl	8003ac8 <SX1272Read>
 8003016:	4603      	mov	r3, r0
 8003018:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800301c:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 800301e:	4423      	add	r3, r4
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa2b 	bl	800047c <__aeabi_i2d>
 8003026:	4604      	mov	r4, r0
 8003028:	460d      	mov	r5, r1
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800302a:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 800302c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <SX1272GetTimeOnAir+0x56>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	e002      	b.n	8003044 <SX1272GetTimeOnAir+0x5c>
 800303e:	f04f 0000 	mov.w	r0, #0
 8003042:	49a0      	ldr	r1, [pc, #640]	; (80032c4 <SX1272GetTimeOnAir+0x2dc>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003044:	4622      	mov	r2, r4
 8003046:	462b      	mov	r3, r5
 8003048:	f7fd f8cc 	bl	80001e4 <__adddf3>
 800304c:	4603      	mov	r3, r0
 800304e:	460c      	mov	r4, r1
 8003050:	4625      	mov	r5, r4
 8003052:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003054:	2030      	movs	r0, #48	; 0x30
 8003056:	f000 fd37 	bl	8003ac8 <SX1272Read>
 800305a:	4603      	mov	r3, r0
 800305c:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <SX1272GetTimeOnAir+0x84>
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	4996      	ldr	r1, [pc, #600]	; (80032c4 <SX1272GetTimeOnAir+0x2dc>)
 800306a:	e003      	b.n	8003074 <SX1272GetTimeOnAir+0x8c>
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003074:	4622      	mov	r2, r4
 8003076:	462b      	mov	r3, r5
 8003078:	f7fd f8b4 	bl	80001e4 <__adddf3>
 800307c:	4603      	mov	r3, r0
 800307e:	460c      	mov	r4, r1
 8003080:	4625      	mov	r5, r4
 8003082:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003084:	79bb      	ldrb	r3, [r7, #6]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd f9f8 	bl	800047c <__aeabi_i2d>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4620      	mov	r0, r4
 8003092:	4629      	mov	r1, r5
 8003094:	f7fd f8a6 	bl	80001e4 <__adddf3>
 8003098:	4603      	mov	r3, r0
 800309a:	460c      	mov	r4, r1
 800309c:	4625      	mov	r5, r4
 800309e:	461c      	mov	r4, r3
                                     pktLen +
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80030a0:	4b87      	ldr	r3, [pc, #540]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 80030a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <SX1272GetTimeOnAir+0xcc>
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030b2:	e003      	b.n	80030bc <SX1272GetTimeOnAir+0xd4>
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 80030bc:	4622      	mov	r2, r4
 80030be:	462b      	mov	r3, r5
 80030c0:	f7fd f890 	bl	80001e4 <__adddf3>
 80030c4:	4603      	mov	r3, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	4618      	mov	r0, r3
 80030ca:	4621      	mov	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <SX1272GetTimeOnAir+0x2e0>)
 80030d2:	f7fd fa3d 	bl	8000550 <__aeabi_dmul>
 80030d6:	4603      	mov	r3, r0
 80030d8:	460c      	mov	r4, r1
 80030da:	4625      	mov	r5, r4
 80030dc:	461c      	mov	r4, r3
                                     SX1272.Settings.Fsk.Datarate ) * 1000 );
 80030de:	4b78      	ldr	r3, [pc, #480]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 80030e0:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd f9ba 	bl	800045c <__aeabi_ui2d>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd fb58 	bl	80007a4 <__aeabi_ddiv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	4618      	mov	r0, r3
 80030fa:	4621      	mov	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	4b72      	ldr	r3, [pc, #456]	; (80032cc <SX1272GetTimeOnAir+0x2e4>)
 8003102:	f7fd fa25 	bl	8000550 <__aeabi_dmul>
 8003106:	4603      	mov	r3, r0
 8003108:	460c      	mov	r4, r1
 800310a:	ec44 3b17 	vmov	d7, r3, r4
 800310e:	eeb0 0a47 	vmov.f32	s0, s14
 8003112:	eef0 0a67 	vmov.f32	s1, s15
 8003116:	f002 fe6b 	bl	8005df0 <round>
 800311a:	ec54 3b10 	vmov	r3, r4, d0
 800311e:	4618      	mov	r0, r3
 8003120:	4621      	mov	r1, r4
 8003122:	f7fd fcaf 	bl	8000a84 <__aeabi_d2uiz>
 8003126:	4603      	mov	r3, r0
 8003128:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800312a:	e10f      	b.n	800334c <SX1272GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	f04f 0400 	mov.w	r4, #0
 8003134:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            switch( SX1272.Settings.LoRa.Bandwidth )
 8003138:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	2b01      	cmp	r3, #1
 800313e:	d00a      	beq.n	8003156 <SX1272GetTimeOnAir+0x16e>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d302      	bcc.n	800314a <SX1272GetTimeOnAir+0x162>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d00c      	beq.n	8003162 <SX1272GetTimeOnAir+0x17a>
 8003148:	e011      	b.n	800316e <SX1272GetTimeOnAir+0x186>
            {
            case 0: // 125 kHz
                bw = 125000;
 800314a:	a457      	add	r4, pc, #348	; (adr r4, 80032a8 <SX1272GetTimeOnAir+0x2c0>)
 800314c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003150:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003154:	e00b      	b.n	800316e <SX1272GetTimeOnAir+0x186>
            case 1: // 250 kHz
                bw = 250000;
 8003156:	a456      	add	r4, pc, #344	; (adr r4, 80032b0 <SX1272GetTimeOnAir+0x2c8>)
 8003158:	e9d4 3400 	ldrd	r3, r4, [r4]
 800315c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8003160:	e005      	b.n	800316e <SX1272GetTimeOnAir+0x186>
            case 2: // 500 kHz
                bw = 500000;
 8003162:	a455      	add	r4, pc, #340	; (adr r4, 80032b8 <SX1272GetTimeOnAir+0x2d0>)
 8003164:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003168:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 800316c:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2201      	movs	r2, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f97f 	bl	800047c <__aeabi_i2d>
 800317e:	4603      	mov	r3, r0
 8003180:	460c      	mov	r4, r1
 8003182:	461a      	mov	r2, r3
 8003184:	4623      	mov	r3, r4
 8003186:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800318a:	f7fd fb0b 	bl	80007a4 <__aeabi_ddiv>
 800318e:	4603      	mov	r3, r0
 8003190:	460c      	mov	r4, r1
 8003192:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
            double ts = 1 / rs;
 8003196:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800319a:	f04f 0000 	mov.w	r0, #0
 800319e:	4949      	ldr	r1, [pc, #292]	; (80032c4 <SX1272GetTimeOnAir+0x2dc>)
 80031a0:	f7fd fb00 	bl	80007a4 <__aeabi_ddiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 80031ae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f962 	bl	800047c <__aeabi_i2d>
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <SX1272GetTimeOnAir+0x2e8>)
 80031be:	f7fd f811 	bl	80001e4 <__adddf3>
 80031c2:	4603      	mov	r3, r0
 80031c4:	460c      	mov	r4, r1
 80031c6:	461a      	mov	r2, r3
 80031c8:	4623      	mov	r3, r4
 80031ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031ce:	f7fd f9bf 	bl	8000550 <__aeabi_dmul>
 80031d2:	4603      	mov	r3, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80031da:	79bb      	ldrb	r3, [r7, #6]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	461a      	mov	r2, r3
 80031e0:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 80031e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 80031ea:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	441a      	add	r2, r3
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80031f2:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 80031f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <SX1272GetTimeOnAir+0x218>
 80031fc:	2314      	movs	r3, #20
 80031fe:	e000      	b.n	8003202 <SX1272GetTimeOnAir+0x21a>
 8003200:	2300      	movs	r3, #0
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f928 	bl	800045c <__aeabi_ui2d>
 800320c:	4604      	mov	r4, r0
 800320e:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 8003212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 8003216:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <SX1272GetTimeOnAir+0x23a>
 800321e:	2302      	movs	r3, #2
 8003220:	e000      	b.n	8003224 <SX1272GetTimeOnAir+0x23c>
 8003222:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f917 	bl	800045c <__aeabi_ui2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fd fab5 	bl	80007a4 <__aeabi_ddiv>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	ec44 3b17 	vmov	d7, r3, r4
 8003242:	eeb0 0a47 	vmov.f32	s0, s14
 8003246:	eef0 0a67 	vmov.f32	s1, s15
 800324a:	f002 fccd 	bl	8005be8 <ceil>
 800324e:	ec56 5b10 	vmov	r5, r6, d0
                                 ( SX1272.Settings.LoRa.Coderate + 4 );
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <SX1272GetTimeOnAir+0x2d8>)
 8003254:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003258:	3304      	adds	r3, #4
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f90e 	bl	800047c <__aeabi_i2d>
 8003260:	4603      	mov	r3, r0
 8003262:	460c      	mov	r4, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8003264:	461a      	mov	r2, r3
 8003266:	4623      	mov	r3, r4
 8003268:	4628      	mov	r0, r5
 800326a:	4631      	mov	r1, r6
 800326c:	f7fd f970 	bl	8000550 <__aeabi_dmul>
 8003270:	4603      	mov	r3, r0
 8003272:	460c      	mov	r4, r1
 8003274:	e9c7 3408 	strd	r3, r4, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003284:	f7fd fbf4 	bl	8000a70 <__aeabi_dcmpgt>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d022      	beq.n	80032d4 <SX1272GetTimeOnAir+0x2ec>
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <SX1272GetTimeOnAir+0x2e0>)
 8003294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003298:	f7fc ffa4 	bl	80001e4 <__adddf3>
 800329c:	4603      	mov	r3, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	e01b      	b.n	80032da <SX1272GetTimeOnAir+0x2f2>
 80032a2:	bf00      	nop
 80032a4:	f3af 8000 	nop.w
 80032a8:	00000000 	.word	0x00000000
 80032ac:	40fe8480 	.word	0x40fe8480
 80032b0:	00000000 	.word	0x00000000
 80032b4:	410e8480 	.word	0x410e8480
 80032b8:	00000000 	.word	0x00000000
 80032bc:	411e8480 	.word	0x411e8480
 80032c0:	20000294 	.word	0x20000294
 80032c4:	3ff00000 	.word	0x3ff00000
 80032c8:	40200000 	.word	0x40200000
 80032cc:	408f4000 	.word	0x408f4000
 80032d0:	40110000 	.word	0x40110000
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	4c21      	ldr	r4, [pc, #132]	; (8003360 <SX1272GetTimeOnAir+0x378>)
 80032da:	e9c7 3406 	strd	r3, r4, [r7, #24]
            double tPayload = nPayload * ts;
 80032de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032e6:	f7fd f933 	bl	8000550 <__aeabi_dmul>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80032f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032fa:	f7fc ff73 	bl	80001e4 <__adddf3>
 80032fe:	4603      	mov	r3, r0
 8003300:	460c      	mov	r4, r1
 8003302:	e9c7 3402 	strd	r3, r4, [r7, #8]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <SX1272GetTimeOnAir+0x37c>)
 800330c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003310:	f7fd f91e 	bl	8000550 <__aeabi_dmul>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	4618      	mov	r0, r3
 800331a:	4621      	mov	r1, r4
 800331c:	a30e      	add	r3, pc, #56	; (adr r3, 8003358 <SX1272GetTimeOnAir+0x370>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fc ff5f 	bl	80001e4 <__adddf3>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	ec44 3b17 	vmov	d7, r3, r4
 800332e:	eeb0 0a47 	vmov.f32	s0, s14
 8003332:	eef0 0a67 	vmov.f32	s1, s15
 8003336:	f002 fcd7 	bl	8005ce8 <floor>
 800333a:	ec54 3b10 	vmov	r3, r4, d0
 800333e:	4618      	mov	r0, r3
 8003340:	4621      	mov	r1, r4
 8003342:	f7fd fb9f 	bl	8000a84 <__aeabi_d2uiz>
 8003346:	4603      	mov	r3, r0
 8003348:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800334a:	bf00      	nop
    }
    return airTime;
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800334e:	4618      	mov	r0, r3
 8003350:	3754      	adds	r7, #84	; 0x54
 8003352:	46bd      	mov	sp, r7
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	bf00      	nop
 8003358:	d916872b 	.word	0xd916872b
 800335c:	3feff7ce 	.word	0x3feff7ce
 8003360:	40200000 	.word	0x40200000
 8003364:	408f4000 	.word	0x408f4000

08003368 <SX1272Send>:

void SX1272Send( uint8_t *buffer, uint8_t size )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

    switch( SX1272.Settings.Modem )
 8003378:	4b51      	ldr	r3, [pc, #324]	; (80034c0 <SX1272Send+0x158>)
 800337a:	795b      	ldrb	r3, [r3, #5]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <SX1272Send+0x1e>
 8003380:	2b01      	cmp	r3, #1
 8003382:	d045      	beq.n	8003410 <SX1272Send+0xa8>
 8003384:	e094      	b.n	80034b0 <SX1272Send+0x148>
    {
    case MODEM_FSK:
        {
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <SX1272Send+0x158>)
 8003388:	2200      	movs	r2, #0
 800338a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = size;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <SX1272Send+0x158>)
 8003392:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1272.Settings.Fsk.FixLen == false )
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <SX1272Send+0x158>)
 8003396:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800339a:	f083 0301 	eor.w	r3, r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <SX1272Send+0x48>
            {
                SX1272WriteFifo( ( uint8_t* )&size, 1 );
 80033a4:	1cfb      	adds	r3, r7, #3
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fc09 	bl	8003bc0 <SX1272WriteFifo>
 80033ae:	e004      	b.n	80033ba <SX1272Send+0x52>
            }
            else
            {
                SX1272Write( REG_PAYLOADLENGTH, size );
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	4619      	mov	r1, r3
 80033b4:	2032      	movs	r0, #50	; 0x32
 80033b6:	f000 fb75 	bl	8003aa4 <SX1272Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <SX1272Send+0x68>
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d804      	bhi.n	80033d0 <SX1272Send+0x68>
            {
                SX1272.Settings.FskPacketHandler.ChunkSize = size;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <SX1272Send+0x158>)
 80033ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ce:	e00a      	b.n	80033e6 <SX1272Send+0x7e>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	483a      	ldr	r0, [pc, #232]	; (80034c4 <SX1272Send+0x15c>)
 80033da:	f001 faf3 	bl	80049c4 <memcpy1>
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <SX1272Send+0x158>)
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
            }

            // Write payload buffer
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <SX1272Send+0x158>)
 80033e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fbe6 	bl	8003bc0 <SX1272WriteFifo>
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <SX1272Send+0x158>)
 80033f6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <SX1272Send+0x158>)
 80033fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4413      	add	r3, r2
 8003402:	b29a      	uxth	r2, r3
 8003404:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <SX1272Send+0x158>)
 8003406:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1272.Settings.Fsk.TxTimeout;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <SX1272Send+0x158>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800340e:	e04f      	b.n	80034b0 <SX1272Send+0x148>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <SX1272Send+0x158>)
 8003412:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00f      	beq.n	800343a <SX1272Send+0xd2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800341a:	2033      	movs	r0, #51	; 0x33
 800341c:	f000 fb54 	bl	8003ac8 <SX1272Read>
 8003420:	4603      	mov	r3, r0
 8003422:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4619      	mov	r1, r3
 800342a:	2033      	movs	r0, #51	; 0x33
 800342c:	f000 fb3a 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003430:	2119      	movs	r1, #25
 8003432:	203b      	movs	r0, #59	; 0x3b
 8003434:	f000 fb36 	bl	8003aa4 <SX1272Write>
 8003438:	e013      	b.n	8003462 <SX1272Send+0xfa>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800343a:	2033      	movs	r0, #51	; 0x33
 800343c:	f000 fb44 	bl	8003ac8 <SX1272Read>
 8003440:	4603      	mov	r3, r0
 8003442:	b25b      	sxtb	r3, r3
 8003444:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8003448:	b25b      	sxtb	r3, r3
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	b25b      	sxtb	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	4619      	mov	r1, r3
 8003454:	2033      	movs	r0, #51	; 0x33
 8003456:	f000 fb25 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800345a:	211d      	movs	r1, #29
 800345c:	203b      	movs	r0, #59	; 0x3b
 800345e:	f000 fb21 	bl	8003aa4 <SX1272Write>
            }

            SX1272.Settings.LoRaPacketHandler.Size = size;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <SX1272Send+0x158>)
 8003466:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

            // Initializes the payload size
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	4619      	mov	r1, r3
 800346e:	2022      	movs	r0, #34	; 0x22
 8003470:	f000 fb18 	bl	8003aa4 <SX1272Write>

            // Full buffer used for Tx
            SX1272Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003474:	2100      	movs	r1, #0
 8003476:	200e      	movs	r0, #14
 8003478:	f000 fb14 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 800347c:	2100      	movs	r1, #0
 800347e:	200d      	movs	r0, #13
 8003480:	f000 fb10 	bl	8003aa4 <SX1272Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1272Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003484:	2001      	movs	r0, #1
 8003486:	f000 fb1f 	bl	8003ac8 <SX1272Read>
 800348a:	4603      	mov	r3, r0
 800348c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <SX1272Send+0x136>
            {
                SX1272SetStby( );
 8003494:	f000 f836 	bl	8003504 <SX1272SetStby>
                DelayMs( 1 );
 8003498:	2001      	movs	r0, #1
 800349a:	f001 f86b 	bl	8004574 <DelayMs>
            }
            // Write payload buffer
            SX1272WriteFifo( buffer, size );
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fb8c 	bl	8003bc0 <SX1272WriteFifo>
            txTimeout = SX1272.Settings.LoRa.TxTimeout;
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SX1272Send+0x158>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 80034ae:	bf00      	nop
    }

    SX1272SetTx( txTimeout );
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f91f 	bl	80036f4 <SX1272SetTx>
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000294 	.word	0x20000294
 80034c4:	20000060 	.word	0x20000060

080034c8 <SX1272SetSleep>:

void SX1272SetSleep( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80034cc:	4809      	ldr	r0, [pc, #36]	; (80034f4 <SX1272SetSleep+0x2c>)
 80034ce:	f001 f925 	bl	800471c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80034d2:	4809      	ldr	r0, [pc, #36]	; (80034f8 <SX1272SetSleep+0x30>)
 80034d4:	f001 f922 	bl	800471c <TimerStop>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 80034d8:	2000      	movs	r0, #0
 80034da:	f000 fa59 	bl	8003990 <SX1272SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1272BoardSetXO( RESET );
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <SX1272SetSleep+0x34>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2000      	movs	r0, #0
 80034e6:	4798      	blx	r3

    SX1272.Settings.State = RF_IDLE;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <SX1272SetSleep+0x38>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	711a      	strb	r2, [r3, #4]
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000032c 	.word	0x2000032c
 80034f8:	200002fc 	.word	0x200002fc
 80034fc:	20000160 	.word	0x20000160
 8003500:	20000294 	.word	0x20000294

08003504 <SX1272SetStby>:

void SX1272SetStby( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003508:	4806      	ldr	r0, [pc, #24]	; (8003524 <SX1272SetStby+0x20>)
 800350a:	f001 f907 	bl	800471c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <SX1272SetStby+0x24>)
 8003510:	f001 f904 	bl	800471c <TimerStop>

    SX1272SetOpMode( RF_OPMODE_STANDBY );
 8003514:	2001      	movs	r0, #1
 8003516:	f000 fa3b 	bl	8003990 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <SX1272SetStby+0x28>)
 800351c:	2200      	movs	r2, #0
 800351e:	711a      	strb	r2, [r3, #4]
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2000032c 	.word	0x2000032c
 8003528:	200002fc 	.word	0x200002fc
 800352c:	20000294 	.word	0x20000294

08003530 <SX1272SetRx>:

void SX1272SetRx( uint32_t timeout )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 800353c:	4868      	ldr	r0, [pc, #416]	; (80036e0 <SX1272SetRx+0x1b0>)
 800353e:	f001 f8ed 	bl	800471c <TimerStop>

    switch( SX1272.Settings.Modem )
 8003542:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <SX1272SetRx+0x1b4>)
 8003544:	795b      	ldrb	r3, [r3, #5]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <SX1272SetRx+0x20>
 800354a:	2b01      	cmp	r3, #1
 800354c:	d03c      	beq.n	80035c8 <SX1272SetRx+0x98>
 800354e:	e095      	b.n	800367c <SX1272SetRx+0x14c>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 8003550:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <SX1272SetRx+0x1b4>)
 8003552:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003556:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003558:	2040      	movs	r0, #64	; 0x40
 800355a:	f000 fab5 	bl	8003ac8 <SX1272Read>
 800355e:	4603      	mov	r3, r0
 8003560:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8003568:	f043 030c 	orr.w	r3, r3, #12
 800356c:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	2040      	movs	r0, #64	; 0x40
 8003574:	f000 fa96 	bl	8003aa4 <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003578:	2041      	movs	r0, #65	; 0x41
 800357a:	f000 faa5 	bl	8003ac8 <SX1272Read>
 800357e:	4603      	mov	r3, r0
 8003580:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4619      	mov	r1, r3
 8003588:	2041      	movs	r0, #65	; 0x41
 800358a:	f000 fa8b 	bl	8003aa4 <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 800358e:	2035      	movs	r0, #53	; 0x35
 8003590:	f000 fa9a 	bl	8003ac8 <SX1272Read>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <SX1272SetRx+0x1b4>)
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

            SX1272Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80035a2:	211e      	movs	r1, #30
 80035a4:	200d      	movs	r0, #13
 80035a6:	f000 fa7d 	bl	8003aa4 <SX1272Write>

            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <SX1272SetRx+0x1b4>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 80035b2:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <SX1272SetRx+0x1b4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <SX1272SetRx+0x1b4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 80035c0:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <SX1272SetRx+0x1b4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 80035c6:	e059      	b.n	800367c <SX1272SetRx+0x14c>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <SX1272SetRx+0x1b4>)
 80035ca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00f      	beq.n	80035f2 <SX1272SetRx+0xc2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80035d2:	2033      	movs	r0, #51	; 0x33
 80035d4:	f000 fa78 	bl	8003ac8 <SX1272Read>
 80035d8:	4603      	mov	r3, r0
 80035da:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	2033      	movs	r0, #51	; 0x33
 80035e4:	f000 fa5e 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80035e8:	2119      	movs	r1, #25
 80035ea:	203b      	movs	r0, #59	; 0x3b
 80035ec:	f000 fa5a 	bl	8003aa4 <SX1272Write>
 80035f0:	e013      	b.n	800361a <SX1272SetRx+0xea>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80035f2:	2033      	movs	r0, #51	; 0x33
 80035f4:	f000 fa68 	bl	8003ac8 <SX1272Read>
 80035f8:	4603      	mov	r3, r0
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8003600:	b25b      	sxtb	r3, r3
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	b25b      	sxtb	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	2033      	movs	r0, #51	; 0x33
 800360e:	f000 fa49 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003612:	211d      	movs	r1, #29
 8003614:	203b      	movs	r0, #59	; 0x3b
 8003616:	f000 fa45 	bl	8003aa4 <SX1272Write>
            }

            rxContinuous = SX1272.Settings.LoRa.RxContinuous;
 800361a:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <SX1272SetRx+0x1b4>)
 800361c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003620:	73fb      	strb	r3, [r7, #15]

            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <SX1272SetRx+0x1b4>)
 8003624:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00f      	beq.n	800364c <SX1272SetRx+0x11c>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800362c:	211d      	movs	r1, #29
 800362e:	2011      	movs	r0, #17
 8003630:	f000 fa38 	bl	8003aa4 <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003634:	2040      	movs	r0, #64	; 0x40
 8003636:	f000 fa47 	bl	8003ac8 <SX1272Read>
 800363a:	4603      	mov	r3, r0
 800363c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4619      	mov	r1, r3
 8003644:	2040      	movs	r0, #64	; 0x40
 8003646:	f000 fa2d 	bl	8003aa4 <SX1272Write>
 800364a:	e00e      	b.n	800366a <SX1272SetRx+0x13a>
            }
            else
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800364c:	211f      	movs	r1, #31
 800364e:	2011      	movs	r0, #17
 8003650:	f000 fa28 	bl	8003aa4 <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003654:	2040      	movs	r0, #64	; 0x40
 8003656:	f000 fa37 	bl	8003ac8 <SX1272Read>
 800365a:	4603      	mov	r3, r0
 800365c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	2040      	movs	r0, #64	; 0x40
 8003666:	f000 fa1d 	bl	8003aa4 <SX1272Write>
            }
            SX1272Write( REG_LR_FIFORXBASEADDR, 0 );
 800366a:	2100      	movs	r1, #0
 800366c:	200f      	movs	r0, #15
 800366e:	f000 fa19 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8003672:	2100      	movs	r1, #0
 8003674:	200d      	movs	r0, #13
 8003676:	f000 fa15 	bl	8003aa4 <SX1272Write>
        }
        break;
 800367a:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800367c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003680:	2100      	movs	r1, #0
 8003682:	4819      	ldr	r0, [pc, #100]	; (80036e8 <SX1272SetRx+0x1b8>)
 8003684:	f002 fa95 	bl	8005bb2 <memset>

    SX1272.Settings.State = RF_RX_RUNNING;
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <SX1272SetRx+0x1b4>)
 800368a:	2201      	movs	r2, #1
 800368c:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <SX1272SetRx+0x172>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4815      	ldr	r0, [pc, #84]	; (80036ec <SX1272SetRx+0x1bc>)
 8003698:	f001 f8ba 	bl	8004810 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800369c:	4813      	ldr	r0, [pc, #76]	; (80036ec <SX1272SetRx+0x1bc>)
 800369e:	f000 ffed 	bl	800467c <TimerStart>
    }

    if( SX1272.Settings.Modem == MODEM_FSK )
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <SX1272SetRx+0x1b4>)
 80036a4:	795b      	ldrb	r3, [r3, #5]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <SX1272SetRx+0x194>
    {
        SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80036aa:	2005      	movs	r0, #5
 80036ac:	f000 f970 	bl	8003990 <SX1272SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1272.Settings.Fsk.RxSingleTimeout );
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <SX1272SetRx+0x1b4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4619      	mov	r1, r3
 80036b6:	480e      	ldr	r0, [pc, #56]	; (80036f0 <SX1272SetRx+0x1c0>)
 80036b8:	f001 f8aa 	bl	8004810 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 80036bc:	480c      	ldr	r0, [pc, #48]	; (80036f0 <SX1272SetRx+0x1c0>)
 80036be:	f000 ffdd 	bl	800467c <TimerStart>
        else
        {
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80036c2:	e009      	b.n	80036d8 <SX1272SetRx+0x1a8>
        if( rxContinuous == true )
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <SX1272SetRx+0x1a2>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER );
 80036ca:	2005      	movs	r0, #5
 80036cc:	f000 f960 	bl	8003990 <SX1272SetOpMode>
}
 80036d0:	e002      	b.n	80036d8 <SX1272SetRx+0x1a8>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80036d2:	2006      	movs	r0, #6
 80036d4:	f000 f95c 	bl	8003990 <SX1272SetOpMode>
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200002fc 	.word	0x200002fc
 80036e4:	20000294 	.word	0x20000294
 80036e8:	20000060 	.word	0x20000060
 80036ec:	2000032c 	.word	0x2000032c
 80036f0:	20000314 	.word	0x20000314

080036f4 <SX1272SetTx>:

void SX1272SetTx( uint32_t timeout )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 80036fc:	4837      	ldr	r0, [pc, #220]	; (80037dc <SX1272SetTx+0xe8>)
 80036fe:	f001 f80d 	bl	800471c <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4836      	ldr	r0, [pc, #216]	; (80037e0 <SX1272SetTx+0xec>)
 8003706:	f001 f883 	bl	8004810 <TimerSetValue>

    switch( SX1272.Settings.Modem )
 800370a:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <SX1272SetTx+0xf0>)
 800370c:	795b      	ldrb	r3, [r3, #5]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <SX1272SetTx+0x24>
 8003712:	2b01      	cmp	r3, #1
 8003714:	d026      	beq.n	8003764 <SX1272SetTx+0x70>
 8003716:	e054      	b.n	80037c2 <SX1272SetTx+0xce>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003718:	2040      	movs	r0, #64	; 0x40
 800371a:	f000 f9d5 	bl	8003ac8 <SX1272Read>
 800371e:	4603      	mov	r3, r0
 8003720:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800372e:	b2db      	uxtb	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	2040      	movs	r0, #64	; 0x40
 8003734:	f000 f9b6 	bl	8003aa4 <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003738:	2041      	movs	r0, #65	; 0x41
 800373a:	f000 f9c5 	bl	8003ac8 <SX1272Read>
 800373e:	4603      	mov	r3, r0
 8003740:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	2041      	movs	r0, #65	; 0x41
 800374a:	f000 f9ab 	bl	8003aa4 <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 800374e:	2035      	movs	r0, #53	; 0x35
 8003750:	f000 f9ba 	bl	8003ac8 <SX1272Read>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <SX1272SetTx+0xf0>)
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
        break;
 8003762:	e02e      	b.n	80037c2 <SX1272SetTx+0xce>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8003764:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <SX1272SetTx+0xf0>)
 8003766:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800376a:	2b00      	cmp	r3, #0
 800376c:	d014      	beq.n	8003798 <SX1272SetTx+0xa4>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800376e:	21f5      	movs	r1, #245	; 0xf5
 8003770:	2011      	movs	r0, #17
 8003772:	f000 f997 	bl	8003aa4 <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003776:	2040      	movs	r0, #64	; 0x40
 8003778:	f000 f9a6 	bl	8003ac8 <SX1272Read>
 800377c:	4603      	mov	r3, r0
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003784:	b25b      	sxtb	r3, r3
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	b25b      	sxtb	r3, r3
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	2040      	movs	r0, #64	; 0x40
 8003792:	f000 f987 	bl	8003aa4 <SX1272Write>

                // DIO0=TxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8003796:	e013      	b.n	80037c0 <SX1272SetTx+0xcc>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003798:	21f7      	movs	r1, #247	; 0xf7
 800379a:	2011      	movs	r0, #17
 800379c:	f000 f982 	bl	8003aa4 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80037a0:	2040      	movs	r0, #64	; 0x40
 80037a2:	f000 f991 	bl	8003ac8 <SX1272Read>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	2040      	movs	r0, #64	; 0x40
 80037bc:	f000 f972 	bl	8003aa4 <SX1272Write>
        break;
 80037c0:	bf00      	nop
    }

    SX1272.Settings.State = RF_TX_RUNNING;
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <SX1272SetTx+0xf0>)
 80037c4:	2202      	movs	r2, #2
 80037c6:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <SX1272SetTx+0xec>)
 80037ca:	f000 ff57 	bl	800467c <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 80037ce:	2003      	movs	r0, #3
 80037d0:	f000 f8de 	bl	8003990 <SX1272SetOpMode>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2000032c 	.word	0x2000032c
 80037e0:	200002fc 	.word	0x200002fc
 80037e4:	20000294 	.word	0x20000294

080037e8 <SX1272StartCad>:

void SX1272StartCad( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.Modem )
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <SX1272StartCad+0x44>)
 80037ee:	795b      	ldrb	r3, [r3, #5]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d018      	beq.n	8003826 <SX1272StartCad+0x3e>
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d000      	beq.n	80037fa <SX1272StartCad+0x12>
            SX1272.Settings.State = RF_CAD;
            SX1272SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80037f8:	e016      	b.n	8003828 <SX1272StartCad+0x40>
            SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80037fa:	21fa      	movs	r1, #250	; 0xfa
 80037fc:	2011      	movs	r0, #17
 80037fe:	f000 f951 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003802:	2040      	movs	r0, #64	; 0x40
 8003804:	f000 f960 	bl	8003ac8 <SX1272Read>
 8003808:	4603      	mov	r3, r0
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	2040      	movs	r0, #64	; 0x40
 8003814:	f000 f946 	bl	8003aa4 <SX1272Write>
            SX1272.Settings.State = RF_CAD;
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <SX1272StartCad+0x44>)
 800381a:	2203      	movs	r2, #3
 800381c:	711a      	strb	r2, [r3, #4]
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 800381e:	2007      	movs	r0, #7
 8003820:	f000 f8b6 	bl	8003990 <SX1272SetOpMode>
        break;
 8003824:	e000      	b.n	8003828 <SX1272StartCad+0x40>
        break;
 8003826:	bf00      	nop
    }
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000294 	.word	0x20000294

08003830 <SX1272SetTxContinuousWave>:

void SX1272SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	; 0x38
 8003834:	af0a      	add	r7, sp, #40	; 0x28
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	4613      	mov	r3, r2
 800383e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8003840:	883b      	ldrh	r3, [r7, #0]
 8003842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	60fb      	str	r3, [r7, #12]

    SX1272SetChannel( freq );
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fe ff65 	bl	800271c <SX1272SetChannel>

    SX1272SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003852:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	9308      	str	r3, [sp, #32]
 800385a:	2300      	movs	r3, #0
 800385c:	9307      	str	r3, [sp, #28]
 800385e:	2300      	movs	r3, #0
 8003860:	9306      	str	r3, [sp, #24]
 8003862:	2300      	movs	r3, #0
 8003864:	9305      	str	r3, [sp, #20]
 8003866:	2300      	movs	r3, #0
 8003868:	9304      	str	r3, [sp, #16]
 800386a:	2300      	movs	r3, #0
 800386c:	9303      	str	r3, [sp, #12]
 800386e:	2305      	movs	r3, #5
 8003870:	9302      	str	r3, [sp, #8]
 8003872:	2300      	movs	r3, #0
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	2200      	movs	r2, #0
 8003880:	2000      	movs	r0, #0
 8003882:	f7ff fa11 	bl	8002ca8 <SX1272SetTxConfig>

    SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003886:	2031      	movs	r0, #49	; 0x31
 8003888:	f000 f91e 	bl	8003ac8 <SX1272Read>
 800388c:	4603      	mov	r3, r0
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	2031      	movs	r0, #49	; 0x31
 8003898:	f000 f904 	bl	8003aa4 <SX1272Write>
    // Disable radio interrupts
    SX1272Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800389c:	21f0      	movs	r1, #240	; 0xf0
 800389e:	2040      	movs	r0, #64	; 0x40
 80038a0:	f000 f900 	bl	8003aa4 <SX1272Write>
    SX1272Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80038a4:	21a0      	movs	r1, #160	; 0xa0
 80038a6:	2041      	movs	r0, #65	; 0x41
 80038a8:	f000 f8fc 	bl	8003aa4 <SX1272Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	4808      	ldr	r0, [pc, #32]	; (80038d0 <SX1272SetTxContinuousWave+0xa0>)
 80038b0:	f000 ffae 	bl	8004810 <TimerSetValue>

    SX1272.Settings.State = RF_TX_RUNNING;
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <SX1272SetTxContinuousWave+0xa4>)
 80038b6:	2202      	movs	r2, #2
 80038b8:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <SX1272SetTxContinuousWave+0xa0>)
 80038bc:	f000 fede 	bl	800467c <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 80038c0:	2003      	movs	r0, #3
 80038c2:	f000 f865 	bl	8003990 <SX1272SetOpMode>
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200002fc 	.word	0x200002fc
 80038d4:	20000294 	.word	0x20000294

080038d8 <SX1272ReadRssi>:

int16_t SX1272ReadRssi( RadioModems_t modem )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <SX1272ReadRssi+0x1a>
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d00b      	beq.n	8003908 <SX1272ReadRssi+0x30>
 80038f0:	e013      	b.n	800391a <SX1272ReadRssi+0x42>
    {
    case MODEM_FSK:
        rssi = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 80038f2:	2011      	movs	r0, #17
 80038f4:	f000 f8e8 	bl	8003ac8 <SX1272Read>
 80038f8:	4603      	mov	r3, r0
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	b29b      	uxth	r3, r3
 8003900:	425b      	negs	r3, r3
 8003902:	b29b      	uxth	r3, r3
 8003904:	81fb      	strh	r3, [r7, #14]
        break;
 8003906:	e00c      	b.n	8003922 <SX1272ReadRssi+0x4a>
    case MODEM_LORA:
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 8003908:	201b      	movs	r0, #27
 800390a:	f000 f8dd 	bl	8003ac8 <SX1272Read>
 800390e:	4603      	mov	r3, r0
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b8b      	subs	r3, #139	; 0x8b
 8003914:	b29b      	uxth	r3, r3
 8003916:	81fb      	strh	r3, [r7, #14]
        break;
 8003918:	e003      	b.n	8003922 <SX1272ReadRssi+0x4a>
    default:
        rssi = -1;
 800391a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800391e:	81fb      	strh	r3, [r7, #14]
        break;
 8003920:	bf00      	nop
    }
    return rssi;
 8003922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <SX1272Reset>:

void SX1272Reset( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003944:	2301      	movs	r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	613b      	str	r3, [r7, #16]

    // Set RESET pin to 1
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	461a      	mov	r2, r3
 8003954:	2101      	movs	r1, #1
 8003956:	480d      	ldr	r0, [pc, #52]	; (800398c <SX1272Reset+0x5c>)
 8003958:	f001 f84f 	bl	80049fa <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 1 );
 800395c:	2201      	movs	r2, #1
 800395e:	2101      	movs	r1, #1
 8003960:	480a      	ldr	r0, [pc, #40]	; (800398c <SX1272Reset+0x5c>)
 8003962:	f001 f891 	bl	8004a88 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 8003966:	2001      	movs	r0, #1
 8003968:	f000 fe04 	bl	8004574 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	461a      	mov	r2, r3
 8003974:	2101      	movs	r1, #1
 8003976:	4805      	ldr	r0, [pc, #20]	; (800398c <SX1272Reset+0x5c>)
 8003978:	f001 f83f 	bl	80049fa <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 800397c:	2006      	movs	r0, #6
 800397e:	f000 fdf9 	bl	8004574 <DelayMs>
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40020800 	.word	0x40020800

08003990 <SX1272SetOpMode>:

void SX1272SetOpMode( uint8_t opMode )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <SX1272SetOpMode+0x1c>
    {
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( true );
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <SX1272SetOpMode+0x68>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2001      	movs	r0, #1
 80039a8:	4798      	blx	r3
 80039aa:	e00f      	b.n	80039cc <SX1272SetOpMode+0x3c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <SX1272SetOpMode+0x68>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2001      	movs	r0, #1
 80039b4:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( false );
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <SX1272SetOpMode+0x68>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2000      	movs	r0, #0
 80039be:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSw( opMode );
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <SX1272SetOpMode+0x68>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	79fa      	ldrb	r2, [r7, #7]
 80039c8:	4610      	mov	r0, r2
 80039ca:	4798      	blx	r3
    }
    SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80039cc:	2001      	movs	r0, #1
 80039ce:	f000 f87b 	bl	8003ac8 <SX1272Read>
 80039d2:	4603      	mov	r3, r0
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	f023 0307 	bic.w	r3, r3, #7
 80039da:	b25a      	sxtb	r2, r3
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	2001      	movs	r0, #1
 80039ea:	f000 f85b 	bl	8003aa4 <SX1272Write>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000160 	.word	0x20000160

080039fc <SX1272SetModem>:

void SX1272SetModem( RadioModems_t modem )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
    if( ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8003a06:	2001      	movs	r0, #1
 8003a08:	f000 f85e 	bl	8003ac8 <SX1272Read>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da03      	bge.n	8003a1c <SX1272SetModem+0x20>
    {
        SX1272.Settings.Modem = MODEM_LORA;
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <SX1272SetModem+0xa4>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	715a      	strb	r2, [r3, #5]
 8003a1a:	e002      	b.n	8003a22 <SX1272SetModem+0x26>
    }
    else
    {
        SX1272.Settings.Modem = MODEM_FSK;
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <SX1272SetModem+0xa4>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	715a      	strb	r2, [r3, #5]
    }

    if( SX1272.Settings.Modem == modem )
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <SX1272SetModem+0xa4>)
 8003a24:	795b      	ldrb	r3, [r3, #5]
 8003a26:	79fa      	ldrb	r2, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d035      	beq.n	8003a98 <SX1272SetModem+0x9c>
    {
        return;
    }

    SX1272.Settings.Modem = modem;
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <SX1272SetModem+0xa4>)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	7153      	strb	r3, [r2, #5]
    switch( SX1272.Settings.Modem )
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <SX1272SetModem+0xa4>)
 8003a34:	795b      	ldrb	r3, [r3, #5]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d016      	beq.n	8003a68 <SX1272SetModem+0x6c>
    {
    default:
    case MODEM_FSK:
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7ff ffa8 	bl	8003990 <SX1272SetOpMode>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003a40:	2001      	movs	r0, #1
 8003a42:	f000 f841 	bl	8003ac8 <SX1272Read>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2001      	movs	r0, #1
 8003a52:	f000 f827 	bl	8003aa4 <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 8003a56:	2100      	movs	r1, #0
 8003a58:	2040      	movs	r0, #64	; 0x40
 8003a5a:	f000 f823 	bl	8003aa4 <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003a5e:	2130      	movs	r1, #48	; 0x30
 8003a60:	2041      	movs	r0, #65	; 0x41
 8003a62:	f000 f81f 	bl	8003aa4 <SX1272Write>
        break;
 8003a66:	e018      	b.n	8003a9a <SX1272SetModem+0x9e>
    case MODEM_LORA:
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7ff ff91 	bl	8003990 <SX1272SetOpMode>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f000 f82a 	bl	8003ac8 <SX1272Read>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f000 f810 	bl	8003aa4 <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 8003a84:	2100      	movs	r1, #0
 8003a86:	2040      	movs	r0, #64	; 0x40
 8003a88:	f000 f80c 	bl	8003aa4 <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2041      	movs	r0, #65	; 0x41
 8003a90:	f000 f808 	bl	8003aa4 <SX1272Write>
        break;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <SX1272SetModem+0x9e>
        return;
 8003a98:	bf00      	nop
    }
}
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000294 	.word	0x20000294

08003aa4 <SX1272Write>:

void SX1272Write( uint16_t addr, uint8_t data )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460a      	mov	r2, r1
 8003aae:	80fb      	strh	r3, [r7, #6]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	717b      	strb	r3, [r7, #5]
    SX1272WriteBuffer( addr, &data, 1 );
 8003ab4:	1d79      	adds	r1, r7, #5
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f816 	bl	8003aec <SX1272WriteBuffer>
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SX1272Read>:

uint8_t SX1272Read( uint16_t addr )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX1272ReadBuffer( addr, &data, 1 );
 8003ad2:	f107 010f 	add.w	r1, r7, #15
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f83a 	bl	8003b54 <SX1272ReadBuffer>
    return data;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	80fb      	strh	r3, [r7, #6]
 8003af8:	4613      	mov	r3, r2
 8003afa:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b02:	4813      	ldr	r0, [pc, #76]	; (8003b50 <SX1272WriteBuffer+0x64>)
 8003b04:	f000 ffc0 	bl	8004a88 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 facb 	bl	80050ac <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	e00a      	b.n	8003b32 <SX1272WriteBuffer+0x46>
    {
        HW_SPI_InOut( buffer[i] );
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fac0 	bl	80050ac <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	797b      	ldrb	r3, [r7, #5]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3f0      	bcc.n	8003b1c <SX1272WriteBuffer+0x30>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b40:	4803      	ldr	r0, [pc, #12]	; (8003b50 <SX1272WriteBuffer+0x64>)
 8003b42:	f000 ffa1 	bl	8004a88 <HW_GPIO_Write>
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40020000 	.word	0x40020000

08003b54 <SX1272ReadBuffer>:

void SX1272ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	6039      	str	r1, [r7, #0]
 8003b5e:	80fb      	strh	r3, [r7, #6]
 8003b60:	4613      	mov	r3, r2
 8003b62:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b6a:	4814      	ldr	r0, [pc, #80]	; (8003bbc <SX1272ReadBuffer+0x68>)
 8003b6c:	f000 ff8c 	bl	8004a88 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fa97 	bl	80050ac <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e00c      	b.n	8003b9e <SX1272ReadBuffer+0x4a>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 8003b84:	2000      	movs	r0, #0
 8003b86:	f001 fa91 	bl	80050ac <HW_SPI_InOut>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	b2ca      	uxtb	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	797b      	ldrb	r3, [r7, #5]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3ee      	bcc.n	8003b84 <SX1272ReadBuffer+0x30>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bac:	4803      	ldr	r0, [pc, #12]	; (8003bbc <SX1272ReadBuffer+0x68>)
 8003bae:	f000 ff6b 	bl	8004a88 <HW_GPIO_Write>
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40020000 	.word	0x40020000

08003bc0 <SX1272WriteFifo>:

void SX1272WriteFifo( uint8_t *buffer, uint8_t size )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
    SX1272WriteBuffer( 0, buffer, size );
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7ff ff8a 	bl	8003aec <SX1272WriteBuffer>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint8_t size )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
    SX1272ReadBuffer( 0, buffer, size );
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7ff ffae 	bl	8003b54 <SX1272ReadBuffer>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <SX1272SetMaxPayloadLength>:

void SX1272SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	460a      	mov	r2, r1
 8003c0a:	71fb      	strb	r3, [r7, #7]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71bb      	strb	r3, [r7, #6]
    SX1272SetModem( modem );
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fef2 	bl	80039fc <SX1272SetModem>

    switch( modem )
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <SX1272SetMaxPayloadLength+0x24>
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00e      	beq.n	8003c40 <SX1272SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8003c22:	e014      	b.n	8003c4e <SX1272SetMaxPayloadLength+0x4e>
        if( SX1272.Settings.Fsk.FixLen == false )
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <SX1272SetMaxPayloadLength+0x58>)
 8003c26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c2a:	f083 0301 	eor.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <SX1272SetMaxPayloadLength+0x4c>
            SX1272Write( REG_PAYLOADLENGTH, max );
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	4619      	mov	r1, r3
 8003c38:	2032      	movs	r0, #50	; 0x32
 8003c3a:	f7ff ff33 	bl	8003aa4 <SX1272Write>
        break;
 8003c3e:	e005      	b.n	8003c4c <SX1272SetMaxPayloadLength+0x4c>
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003c40:	79bb      	ldrb	r3, [r7, #6]
 8003c42:	4619      	mov	r1, r3
 8003c44:	2023      	movs	r0, #35	; 0x23
 8003c46:	f7ff ff2d 	bl	8003aa4 <SX1272Write>
        break;
 8003c4a:	e000      	b.n	8003c4e <SX1272SetMaxPayloadLength+0x4e>
        break;
 8003c4c:	bf00      	nop
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000294 	.word	0x20000294

08003c5c <SX1272SetPublicNetwork>:

void SX1272SetPublicNetwork( bool enable )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
    SX1272SetModem( MODEM_LORA );
 8003c66:	2001      	movs	r0, #1
 8003c68:	f7ff fec8 	bl	80039fc <SX1272SetModem>
    SX1272.Settings.LoRa.PublicNetwork = enable;
 8003c6c:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <SX1272SetPublicNetwork+0x38>)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    if( enable == true )
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <SX1272SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8003c7a:	2134      	movs	r1, #52	; 0x34
 8003c7c:	2039      	movs	r0, #57	; 0x39
 8003c7e:	f7ff ff11 	bl	8003aa4 <SX1272Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8003c82:	e003      	b.n	8003c8c <SX1272SetPublicNetwork+0x30>
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8003c84:	2112      	movs	r1, #18
 8003c86:	2039      	movs	r0, #57	; 0x39
 8003c88:	f7ff ff0c 	bl	8003aa4 <SX1272Write>
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000294 	.word	0x20000294

08003c98 <SX1272OnTimeoutIrq>:
{
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
}

void SX1272OnTimeoutIrq( void* context )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.State )
 8003ca0:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003ca2:	791b      	ldrb	r3, [r3, #4]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d002      	beq.n	8003cae <SX1272OnTimeoutIrq+0x16>
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d042      	beq.n	8003d32 <SX1272OnTimeoutIrq+0x9a>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8003cac:	e08a      	b.n	8003dc4 <SX1272OnTimeoutIrq+0x12c>
        if( SX1272.Settings.Modem == MODEM_FSK )
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003cb0:	795b      	ldrb	r3, [r3, #5]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d12f      	bne.n	8003d16 <SX1272OnTimeoutIrq+0x7e>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003cb6:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003cc6:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003cd2:	210b      	movs	r1, #11
 8003cd4:	203e      	movs	r0, #62	; 0x3e
 8003cd6:	f7ff fee5 	bl	8003aa4 <SX1272Write>
            SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003cda:	2110      	movs	r1, #16
 8003cdc:	203f      	movs	r0, #63	; 0x3f
 8003cde:	f7ff fee1 	bl	8003aa4 <SX1272Write>
            if( SX1272.Settings.Fsk.RxContinuous == true )
 8003ce2:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003ce4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <SX1272OnTimeoutIrq+0x72>
                SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003cec:	200d      	movs	r0, #13
 8003cee:	f7ff feeb 	bl	8003ac8 <SX1272Read>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	200d      	movs	r0, #13
 8003cfe:	f7ff fed1 	bl	8003aa4 <SX1272Write>
                TimerStart( &RxTimeoutSyncWord );
 8003d02:	4833      	ldr	r0, [pc, #204]	; (8003dd0 <SX1272OnTimeoutIrq+0x138>)
 8003d04:	f000 fcba 	bl	800467c <TimerStart>
 8003d08:	e005      	b.n	8003d16 <SX1272OnTimeoutIrq+0x7e>
                SX1272.Settings.State = RF_IDLE;
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8003d10:	482f      	ldr	r0, [pc, #188]	; (8003dd0 <SX1272OnTimeoutIrq+0x138>)
 8003d12:	f000 fd03 	bl	800471c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <SX1272OnTimeoutIrq+0x13c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04f      	beq.n	8003dbe <SX1272OnTimeoutIrq+0x126>
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <SX1272OnTimeoutIrq+0x13c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d04a      	beq.n	8003dbe <SX1272OnTimeoutIrq+0x126>
            RadioEvents->RxTimeout( );
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <SX1272OnTimeoutIrq+0x13c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4798      	blx	r3
        break;
 8003d30:	e045      	b.n	8003dbe <SX1272OnTimeoutIrq+0x126>
        SX1272Reset( );
 8003d32:	f7ff fdfd 	bl	8003930 <SX1272Reset>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7ff fe2a 	bl	8003990 <SX1272SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	e020      	b.n	8003d84 <SX1272OnTimeoutIrq+0xec>
            SX1272SetModem( RadioRegsInit[i].Modem );
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	4924      	ldr	r1, [pc, #144]	; (8003dd8 <SX1272OnTimeoutIrq+0x140>)
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fe53 	bl	80039fc <SX1272SetModem>
            SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	491f      	ldr	r1, [pc, #124]	; (8003dd8 <SX1272OnTimeoutIrq+0x140>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	440b      	add	r3, r1
 8003d62:	3301      	adds	r3, #1
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b298      	uxth	r0, r3
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <SX1272OnTimeoutIrq+0x140>)
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	440b      	add	r3, r1
 8003d74:	3302      	adds	r3, #2
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f7ff fe93 	bl	8003aa4 <SX1272Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	3301      	adds	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d9db      	bls.n	8003d42 <SX1272OnTimeoutIrq+0xaa>
        SX1272SetModem( MODEM_FSK );
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7ff fe36 	bl	80039fc <SX1272SetModem>
        SX1272SetPublicNetwork( SX1272.Settings.LoRa.PublicNetwork );
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003d92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ff60 	bl	8003c5c <SX1272SetPublicNetwork>
        SX1272.Settings.State = RF_IDLE;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <SX1272OnTimeoutIrq+0x134>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <SX1272OnTimeoutIrq+0x13c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <SX1272OnTimeoutIrq+0x12a>
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <SX1272OnTimeoutIrq+0x13c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <SX1272OnTimeoutIrq+0x12a>
            RadioEvents->TxTimeout( );
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <SX1272OnTimeoutIrq+0x13c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4798      	blx	r3
        break;
 8003dbc:	e001      	b.n	8003dc2 <SX1272OnTimeoutIrq+0x12a>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <SX1272OnTimeoutIrq+0x12c>
        break;
 8003dc2:	bf00      	nop
    }
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000294 	.word	0x20000294
 8003dd0:	20000314 	.word	0x20000314
 8003dd4:	2000005c 	.word	0x2000005c
 8003dd8:	08005ea4 	.word	0x08005ea4

08003ddc <SX1272OnDio0Irq>:

void SX1272OnDio0Irq( void* context )
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	737b      	strb	r3, [r7, #13]

    switch( SX1272.Settings.State )
 8003de8:	4ba3      	ldr	r3, [pc, #652]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003dea:	791b      	ldrb	r3, [r3, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d003      	beq.n	8003df8 <SX1272OnDio0Irq+0x1c>
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f000 819d 	beq.w	8004130 <SX1272OnDio0Irq+0x354>
                }
                break;
            }
            break;
        default:
            break;
 8003df6:	e1b8      	b.n	800416a <SX1272OnDio0Irq+0x38e>
            switch( SX1272.Settings.Modem )
 8003df8:	4b9f      	ldr	r3, [pc, #636]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003dfa:	795b      	ldrb	r3, [r3, #5]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <SX1272OnDio0Irq+0x2c>
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	f000 80de 	beq.w	8003fc2 <SX1272OnDio0Irq+0x1e6>
                break;
 8003e06:	e192      	b.n	800412e <SX1272OnDio0Irq+0x352>
                if( SX1272.Settings.Fsk.CrcOn == true )
 8003e08:	4b9b      	ldr	r3, [pc, #620]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04e      	beq.n	8003eb0 <SX1272OnDio0Irq+0xd4>
                    irqFlags = SX1272Read( REG_IRQFLAGS2 );
 8003e12:	203f      	movs	r0, #63	; 0x3f
 8003e14:	f7ff fe58 	bl	8003ac8 <SX1272Read>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003e1c:	7b7b      	ldrb	r3, [r7, #13]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d043      	beq.n	8003eb0 <SX1272OnDio0Irq+0xd4>
                        SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003e28:	210b      	movs	r1, #11
 8003e2a:	203e      	movs	r0, #62	; 0x3e
 8003e2c:	f7ff fe3a 	bl	8003aa4 <SX1272Write>
                        SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003e30:	2110      	movs	r1, #16
 8003e32:	203f      	movs	r0, #63	; 0x3f
 8003e34:	f7ff fe36 	bl	8003aa4 <SX1272Write>
                        TimerStop( &RxTimeoutTimer );
 8003e38:	4890      	ldr	r0, [pc, #576]	; (800407c <SX1272OnDio0Irq+0x2a0>)
 8003e3a:	f000 fc6f 	bl	800471c <TimerStop>
                        if( SX1272.Settings.Fsk.RxContinuous == false )
 8003e3e:	4b8e      	ldr	r3, [pc, #568]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003e40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <SX1272OnDio0Irq+0x80>
                            TimerStop( &RxTimeoutSyncWord );
 8003e4e:	488c      	ldr	r0, [pc, #560]	; (8004080 <SX1272OnDio0Irq+0x2a4>)
 8003e50:	f000 fc64 	bl	800471c <TimerStop>
                            SX1272.Settings.State = RF_IDLE;
 8003e54:	4b88      	ldr	r3, [pc, #544]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	711a      	strb	r2, [r3, #4]
 8003e5a:	e00d      	b.n	8003e78 <SX1272OnDio0Irq+0x9c>
                            SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003e5c:	200d      	movs	r0, #13
 8003e5e:	f7ff fe33 	bl	8003ac8 <SX1272Read>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	200d      	movs	r0, #13
 8003e6e:	f7ff fe19 	bl	8003aa4 <SX1272Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003e72:	4883      	ldr	r0, [pc, #524]	; (8004080 <SX1272OnDio0Irq+0x2a4>)
 8003e74:	f000 fc02 	bl	800467c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003e78:	4b82      	ldr	r3, [pc, #520]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <SX1272OnDio0Irq+0xb6>
 8003e80:	4b80      	ldr	r3, [pc, #512]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <SX1272OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8003e8a:	4b7e      	ldr	r3, [pc, #504]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	4798      	blx	r3
                        SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003e92:	4b79      	ldr	r3, [pc, #484]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003e9a:	4b77      	ldr	r3, [pc, #476]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003ea2:	4b75      	ldr	r3, [pc, #468]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1272.Settings.FskPacketHandler.Size = 0;
 8003ea8:	4b73      	ldr	r3, [pc, #460]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8003eae:	e13e      	b.n	800412e <SX1272OnDio0Irq+0x352>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003eb0:	4b71      	ldr	r3, [pc, #452]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003eb2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d12c      	bne.n	8003f12 <SX1272OnDio0Irq+0x136>
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003eba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d128      	bne.n	8003f12 <SX1272OnDio0Irq+0x136>
                    if( SX1272.Settings.Fsk.FixLen == false )
 8003ec0:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003ec2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ec6:	f083 0301 	eor.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <SX1272OnDio0Irq+0xfe>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	486d      	ldr	r0, [pc, #436]	; (8004088 <SX1272OnDio0Irq+0x2ac>)
 8003ed4:	f7ff fe84 	bl	8003be0 <SX1272ReadFifo>
 8003ed8:	e006      	b.n	8003ee8 <SX1272OnDio0Irq+0x10c>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8003eda:	2032      	movs	r0, #50	; 0x32
 8003edc:	f7ff fdf4 	bl	8003ac8 <SX1272Read>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b64      	ldr	r3, [pc, #400]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003ee6:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003ee8:	4b63      	ldr	r3, [pc, #396]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003eea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b67      	ldr	r3, [pc, #412]	; (800408c <SX1272OnDio0Irq+0x2b0>)
 8003ef0:	18d0      	adds	r0, r2, r3
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003ef4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003efa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7ff fe6c 	bl	8003be0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003f08:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f0a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8003f0c:	4b5a      	ldr	r3, [pc, #360]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003f10:	e013      	b.n	8003f3a <SX1272OnDio0Irq+0x15e>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003f16:	461a      	mov	r2, r3
 8003f18:	4b5c      	ldr	r3, [pc, #368]	; (800408c <SX1272OnDio0Irq+0x2b0>)
 8003f1a:	18d0      	adds	r0, r2, r3
 8003f1c:	4b56      	ldr	r3, [pc, #344]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b55      	ldr	r3, [pc, #340]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f7ff fe57 	bl	8003be0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003f32:	4b51      	ldr	r3, [pc, #324]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f34:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8003f36:	4b50      	ldr	r3, [pc, #320]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f38:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8003f3a:	4850      	ldr	r0, [pc, #320]	; (800407c <SX1272OnDio0Irq+0x2a0>)
 8003f3c:	f000 fbee 	bl	800471c <TimerStop>
                if( SX1272.Settings.Fsk.RxContinuous == false )
 8003f40:	4b4d      	ldr	r3, [pc, #308]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f42:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f46:	f083 0301 	eor.w	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <SX1272OnDio0Irq+0x182>
                    SX1272.Settings.State = RF_IDLE;
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8003f56:	484a      	ldr	r0, [pc, #296]	; (8004080 <SX1272OnDio0Irq+0x2a4>)
 8003f58:	f000 fbe0 	bl	800471c <TimerStop>
 8003f5c:	e00d      	b.n	8003f7a <SX1272OnDio0Irq+0x19e>
                    SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003f5e:	200d      	movs	r0, #13
 8003f60:	f7ff fdb2 	bl	8003ac8 <SX1272Read>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	200d      	movs	r0, #13
 8003f70:	f7ff fd98 	bl	8003aa4 <SX1272Write>
                    TimerStart( &RxTimeoutSyncWord );
 8003f74:	4842      	ldr	r0, [pc, #264]	; (8004080 <SX1272OnDio0Irq+0x2a4>)
 8003f76:	f000 fb81 	bl	800467c <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003f7a:	4b42      	ldr	r3, [pc, #264]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <SX1272OnDio0Irq+0x1c8>
 8003f82:	4b40      	ldr	r3, [pc, #256]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <SX1272OnDio0Irq+0x1c8>
                    RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.FskPacketHandler.Size, SX1272.Settings.FskPacketHandler.RssiValue, 0 );
 8003f8c:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689c      	ldr	r4, [r3, #8]
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f94:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8003f96:	4b38      	ldr	r3, [pc, #224]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003f98:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	483a      	ldr	r0, [pc, #232]	; (800408c <SX1272OnDio0Irq+0x2b0>)
 8003fa2:	47a0      	blx	r4
                SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003fa4:	4b34      	ldr	r3, [pc, #208]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003fac:	4b32      	ldr	r3, [pc, #200]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1272.Settings.FskPacketHandler.Size = 0;
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8003fc0:	e0b5      	b.n	800412e <SX1272OnDio0Irq+0x352>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003fc2:	2140      	movs	r1, #64	; 0x40
 8003fc4:	2012      	movs	r0, #18
 8003fc6:	f7ff fd6d 	bl	8003aa4 <SX1272Write>
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 8003fca:	2012      	movs	r0, #18
 8003fcc:	f7ff fd7c 	bl	8003ac8 <SX1272Read>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003fd4:	7b7b      	ldrb	r3, [r7, #13]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d121      	bne.n	8004024 <SX1272OnDio0Irq+0x248>
                        SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	2012      	movs	r0, #18
 8003fe4:	f7ff fd5e 	bl	8003aa4 <SX1272Write>
                        if( SX1272.Settings.LoRa.RxContinuous == false )
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003fea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003fee:	f083 0301 	eor.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <SX1272OnDio0Irq+0x222>
                            SX1272.Settings.State = RF_IDLE;
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8003ffe:	481f      	ldr	r0, [pc, #124]	; (800407c <SX1272OnDio0Irq+0x2a0>)
 8004000:	f000 fb8c 	bl	800471c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004004:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 808d 	beq.w	8004128 <SX1272OnDio0Irq+0x34c>
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8087 	beq.w	8004128 <SX1272OnDio0Irq+0x34c>
                            RadioEvents->RxError( );
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <SX1272OnDio0Irq+0x2a8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4798      	blx	r3
                        break;
 8004022:	e081      	b.n	8004128 <SX1272OnDio0Irq+0x34c>
                    SX1272.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1272Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004024:	2019      	movs	r0, #25
 8004026:	f7ff fd4f 	bl	8003ac8 <SX1272Read>
 800402a:	4603      	mov	r3, r0
 800402c:	b25b      	sxtb	r3, r3
 800402e:	3302      	adds	r3, #2
 8004030:	109b      	asrs	r3, r3, #2
 8004032:	b25a      	sxtb	r2, r3
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8004036:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 800403a:	201a      	movs	r0, #26
 800403c:	f7ff fd44 	bl	8003ac8 <SX1272Read>
 8004040:	4603      	mov	r3, r0
 8004042:	81fb      	strh	r3, [r7, #14]
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8004046:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 800404a:	2b00      	cmp	r3, #0
 800404c:	da20      	bge.n	8004090 <SX1272OnDio0Irq+0x2b4>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 800404e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004052:	111b      	asrs	r3, r3, #4
 8004054:	b21b      	sxth	r3, r3
 8004056:	b29a      	uxth	r2, r3
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	4413      	add	r3, r2
 800405c:	b29a      	uxth	r2, r3
                                                                      SX1272.Settings.LoRaPacketHandler.SnrValue;
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8004060:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004064:	b29b      	uxth	r3, r3
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 8004066:	4413      	add	r3, r2
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b8b      	subs	r3, #139	; 0x8b
 800406c:	b29b      	uxth	r3, r3
 800406e:	b21a      	sxth	r2, r3
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <SX1272OnDio0Irq+0x29c>)
 8004072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004076:	e019      	b.n	80040ac <SX1272OnDio0Irq+0x2d0>
 8004078:	20000294 	.word	0x20000294
 800407c:	2000032c 	.word	0x2000032c
 8004080:	20000314 	.word	0x20000314
 8004084:	2000005c 	.word	0x2000005c
 8004088:	200002ce 	.word	0x200002ce
 800408c:	20000060 	.word	0x20000060
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 8004090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004094:	111b      	asrs	r3, r3, #4
 8004096:	b21b      	sxth	r3, r3
 8004098:	b29a      	uxth	r2, r3
 800409a:	89fb      	ldrh	r3, [r7, #14]
 800409c:	4413      	add	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b8b      	subs	r3, #139	; 0x8b
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	b21a      	sxth	r2, r3
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <SX1272OnDio0Irq+0x398>)
 80040a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 80040ac:	2013      	movs	r0, #19
 80040ae:	f7ff fd0b 	bl	8003ac8 <SX1272Read>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <SX1272OnDio0Irq+0x398>)
 80040b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    SX1272Write( REG_LR_FIFOADDRPTR, SX1272Read( REG_LR_FIFORXCURRENTADDR ) );
 80040bc:	2010      	movs	r0, #16
 80040be:	f7ff fd03 	bl	8003ac8 <SX1272Read>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4619      	mov	r1, r3
 80040c6:	200d      	movs	r0, #13
 80040c8:	f7ff fcec 	bl	8003aa4 <SX1272Write>
                    SX1272ReadFifo( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size );
 80040cc:	4b29      	ldr	r3, [pc, #164]	; (8004174 <SX1272OnDio0Irq+0x398>)
 80040ce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80040d2:	4619      	mov	r1, r3
 80040d4:	4828      	ldr	r0, [pc, #160]	; (8004178 <SX1272OnDio0Irq+0x39c>)
 80040d6:	f7ff fd83 	bl	8003be0 <SX1272ReadFifo>
                    if( SX1272.Settings.LoRa.RxContinuous == false )
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <SX1272OnDio0Irq+0x398>)
 80040dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80040e0:	f083 0301 	eor.w	r3, r3, #1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <SX1272OnDio0Irq+0x314>
                        SX1272.Settings.State = RF_IDLE;
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <SX1272OnDio0Irq+0x398>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80040f0:	4822      	ldr	r0, [pc, #136]	; (800417c <SX1272OnDio0Irq+0x3a0>)
 80040f2:	f000 fb13 	bl	800471c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <SX1272OnDio0Irq+0x3a4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <SX1272OnDio0Irq+0x350>
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <SX1272OnDio0Irq+0x3a4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d011      	beq.n	800412c <SX1272OnDio0Irq+0x350>
                        RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size, SX1272.Settings.LoRaPacketHandler.RssiValue, SX1272.Settings.LoRaPacketHandler.SnrValue );
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <SX1272OnDio0Irq+0x3a4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689c      	ldr	r4, [r3, #8]
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <SX1272OnDio0Irq+0x398>)
 8004110:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004114:	b299      	uxth	r1, r3
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <SX1272OnDio0Irq+0x398>)
 8004118:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	; 0x62
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <SX1272OnDio0Irq+0x398>)
 800411e:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8004122:	4815      	ldr	r0, [pc, #84]	; (8004178 <SX1272OnDio0Irq+0x39c>)
 8004124:	47a0      	blx	r4
                break;
 8004126:	e001      	b.n	800412c <SX1272OnDio0Irq+0x350>
                        break;
 8004128:	bf00      	nop
 800412a:	e01e      	b.n	800416a <SX1272OnDio0Irq+0x38e>
                break;
 800412c:	bf00      	nop
            break;
 800412e:	e01c      	b.n	800416a <SX1272OnDio0Irq+0x38e>
            TimerStop( &TxTimeoutTimer );
 8004130:	4814      	ldr	r0, [pc, #80]	; (8004184 <SX1272OnDio0Irq+0x3a8>)
 8004132:	f000 faf3 	bl	800471c <TimerStop>
            switch( SX1272.Settings.Modem )
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <SX1272OnDio0Irq+0x398>)
 8004138:	795b      	ldrb	r3, [r3, #5]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d103      	bne.n	8004146 <SX1272OnDio0Irq+0x36a>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800413e:	2108      	movs	r1, #8
 8004140:	2012      	movs	r0, #18
 8004142:	f7ff fcaf 	bl	8003aa4 <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <SX1272OnDio0Irq+0x398>)
 8004148:	2200      	movs	r2, #0
 800414a:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <SX1272OnDio0Irq+0x3a4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <SX1272OnDio0Irq+0x38a>
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <SX1272OnDio0Irq+0x3a4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <SX1272OnDio0Irq+0x38a>
                    RadioEvents->TxDone( );
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <SX1272OnDio0Irq+0x3a4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4798      	blx	r3
                break;
 8004166:	bf00      	nop
            break;
 8004168:	bf00      	nop
    }
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	bf00      	nop
 8004174:	20000294 	.word	0x20000294
 8004178:	20000060 	.word	0x20000060
 800417c:	2000032c 	.word	0x2000032c
 8004180:	2000005c 	.word	0x2000005c
 8004184:	200002fc 	.word	0x200002fc

08004188 <SX1272OnDio1Irq>:

void SX1272OnDio1Irq( void* context )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.State )
 8004190:	4b62      	ldr	r3, [pc, #392]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d002      	beq.n	800419e <SX1272OnDio1Irq+0x16>
 8004198:	2b02      	cmp	r3, #2
 800419a:	d07a      	beq.n	8004292 <SX1272OnDio1Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 800419c:	e0b9      	b.n	8004312 <SX1272OnDio1Irq+0x18a>
            switch( SX1272.Settings.Modem )
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041a0:	795b      	ldrb	r3, [r3, #5]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <SX1272OnDio1Irq+0x24>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d05a      	beq.n	8004260 <SX1272OnDio1Irq+0xd8>
                break;
 80041aa:	e071      	b.n	8004290 <SX1272OnDio1Irq+0x108>
                TimerStop( &RxTimeoutSyncWord );
 80041ac:	485c      	ldr	r0, [pc, #368]	; (8004320 <SX1272OnDio1Irq+0x198>)
 80041ae:	f000 fab5 	bl	800471c <TimerStop>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 80041b2:	4b5a      	ldr	r3, [pc, #360]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d117      	bne.n	80041ea <SX1272OnDio1Irq+0x62>
 80041ba:	4b58      	ldr	r3, [pc, #352]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <SX1272OnDio1Irq+0x62>
                    if( SX1272.Settings.Fsk.FixLen == false )
 80041c2:	4b56      	ldr	r3, [pc, #344]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80041c8:	f083 0301 	eor.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <SX1272OnDio1Irq+0x54>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 80041d2:	2101      	movs	r1, #1
 80041d4:	4853      	ldr	r0, [pc, #332]	; (8004324 <SX1272OnDio1Irq+0x19c>)
 80041d6:	f7ff fd03 	bl	8003be0 <SX1272ReadFifo>
 80041da:	e006      	b.n	80041ea <SX1272OnDio1Irq+0x62>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 80041dc:	2032      	movs	r0, #50	; 0x32
 80041de:	f7ff fc73 	bl	8003ac8 <SX1272Read>
 80041e2:	4603      	mov	r3, r0
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	4b4d      	ldr	r3, [pc, #308]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041e8:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) >= SX1272.Settings.FskPacketHandler.FifoThresh )
 80041ea:	4b4c      	ldr	r3, [pc, #304]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b4a      	ldr	r3, [pc, #296]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <SX1272OnDio1Irq+0x194>)
 80041f8:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80041fc:	4293      	cmp	r3, r2
 80041fe:	db1a      	blt.n	8004236 <SX1272OnDio1Irq+0xae>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.FifoThresh - 1 );
 8004200:	4b46      	ldr	r3, [pc, #280]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004202:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004204:	461a      	mov	r2, r3
 8004206:	4b48      	ldr	r3, [pc, #288]	; (8004328 <SX1272OnDio1Irq+0x1a0>)
 8004208:	441a      	add	r2, r3
 800420a:	4b44      	ldr	r3, [pc, #272]	; (800431c <SX1272OnDio1Irq+0x194>)
 800420c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004210:	3b01      	subs	r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f7ff fce2 	bl	8003be0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.FifoThresh - 1;
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <SX1272OnDio1Irq+0x194>)
 800421e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8004220:	4b3e      	ldr	r3, [pc, #248]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	4413      	add	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	4b3a      	ldr	r3, [pc, #232]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004232:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8004234:	e02c      	b.n	8004290 <SX1272OnDio1Irq+0x108>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004238:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800423a:	461a      	mov	r2, r3
 800423c:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <SX1272OnDio1Irq+0x1a0>)
 800423e:	18d0      	adds	r0, r2, r3
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004242:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b35      	ldr	r3, [pc, #212]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004248:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800424a:	b2db      	uxtb	r3, r3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4619      	mov	r1, r3
 8004252:	f7ff fcc5 	bl	8003be0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004258:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <SX1272OnDio1Irq+0x194>)
 800425c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800425e:	e017      	b.n	8004290 <SX1272OnDio1Irq+0x108>
                TimerStop( &RxTimeoutTimer );
 8004260:	4832      	ldr	r0, [pc, #200]	; (800432c <SX1272OnDio1Irq+0x1a4>)
 8004262:	f000 fa5b 	bl	800471c <TimerStop>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	2012      	movs	r0, #18
 800426a:	f7ff fc1b 	bl	8003aa4 <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004270:	2200      	movs	r2, #0
 8004272:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <SX1272OnDio1Irq+0x1a8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <SX1272OnDio1Irq+0x106>
 800427c:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <SX1272OnDio1Irq+0x1a8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <SX1272OnDio1Irq+0x106>
                    RadioEvents->RxTimeout( );
 8004286:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <SX1272OnDio1Irq+0x1a8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4798      	blx	r3
                break;
 800428e:	bf00      	nop
            break;
 8004290:	e03f      	b.n	8004312 <SX1272OnDio1Irq+0x18a>
            switch( SX1272.Settings.Modem )
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004294:	795b      	ldrb	r3, [r3, #5]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <SX1272OnDio1Irq+0x118>
 800429a:	2b01      	cmp	r3, #1
 800429c:	d037      	beq.n	800430e <SX1272OnDio1Irq+0x186>
                break;
 800429e:	e037      	b.n	8004310 <SX1272OnDio1Irq+0x188>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.ChunkSize )
 80042a0:	4b1e      	ldr	r3, [pc, #120]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042a4:	461a      	mov	r2, r3
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042ae:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 80042b2:	4293      	cmp	r3, r2
 80042b4:	dd16      	ble.n	80042e4 <SX1272OnDio1Irq+0x15c>
                    SX1272WriteFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.ChunkSize );
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <SX1272OnDio1Irq+0x1a0>)
 80042be:	441a      	add	r2, r3
 80042c0:	4b16      	ldr	r3, [pc, #88]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7ff fc79 	bl	8003bc0 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042d0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4413      	add	r3, r2
 80042dc:	b29a      	uxth	r2, r3
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042e0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80042e2:	e015      	b.n	8004310 <SX1272OnDio1Irq+0x188>
                    SX1272WriteFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <SX1272OnDio1Irq+0x1a0>)
 80042ec:	18d0      	adds	r0, r2, r3
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <SX1272OnDio1Irq+0x194>)
 80042f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	4619      	mov	r1, r3
 8004300:	f7ff fc5e 	bl	8003bc0 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <SX1272OnDio1Irq+0x194>)
 8004306:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <SX1272OnDio1Irq+0x194>)
 800430a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800430c:	e000      	b.n	8004310 <SX1272OnDio1Irq+0x188>
                break;
 800430e:	bf00      	nop
            break;
 8004310:	bf00      	nop
    }
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000294 	.word	0x20000294
 8004320:	20000314 	.word	0x20000314
 8004324:	200002ce 	.word	0x200002ce
 8004328:	20000060 	.word	0x20000060
 800432c:	2000032c 	.word	0x2000032c
 8004330:	2000005c 	.word	0x2000005c

08004334 <SX1272OnDio2Irq>:

void SX1272OnDio2Irq( void* context )
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

    switch( SX1272.Settings.State )
 8004340:	4b57      	ldr	r3, [pc, #348]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d002      	beq.n	800434e <SX1272OnDio2Irq+0x1a>
 8004348:	2b02      	cmp	r3, #2
 800434a:	d07b      	beq.n	8004444 <SX1272OnDio2Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 800434c:	e0a4      	b.n	8004498 <SX1272OnDio2Irq+0x164>
            switch( SX1272.Settings.Modem )
 800434e:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <SX1272OnDio2Irq+0x28>
 8004356:	2b01      	cmp	r3, #1
 8004358:	d051      	beq.n	80043fe <SX1272OnDio2Irq+0xca>
                break;
 800435a:	e072      	b.n	8004442 <SX1272OnDio2Irq+0x10e>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 800435c:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                if( ( SX1272.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1272.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8004364:	4b4e      	ldr	r3, [pc, #312]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800436a:	2b01      	cmp	r3, #1
 800436c:	d166      	bne.n	800443c <SX1272OnDio2Irq+0x108>
 800436e:	4b4c      	ldr	r3, [pc, #304]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004370:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004374:	2b00      	cmp	r3, #0
 8004376:	d161      	bne.n	800443c <SX1272OnDio2Irq+0x108>
                    TimerStop( &RxTimeoutSyncWord );
 8004378:	484a      	ldr	r0, [pc, #296]	; (80044a4 <SX1272OnDio2Irq+0x170>)
 800437a:	f000 f9cf 	bl	800471c <TimerStop>
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 800437e:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8004386:	2011      	movs	r0, #17
 8004388:	f7ff fb9e 	bl	8003ac8 <SX1272Read>
 800438c:	4603      	mov	r3, r0
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	425b      	negs	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	b25a      	sxtb	r2, r3
 8004398:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 800439a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 800439e:	201b      	movs	r0, #27
 80043a0:	f7ff fb92 	bl	8003ac8 <SX1272Read>
 80043a4:	4603      	mov	r3, r0
 80043a6:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1272Read( REG_AFCLSB ) );
 80043a8:	201c      	movs	r0, #28
 80043aa:	f7ff fb8d 	bl	8003ac8 <SX1272Read>
 80043ae:	4603      	mov	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 80043b0:	4323      	orrs	r3, r4
 80043b2:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f643 5209 	movw	r2, #15625	; 0x3d09
 80043ca:	fb02 f203 	mul.w	r2, r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f643 5109 	movw	r1, #15625	; 0x3d09
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	3380      	adds	r3, #128	; 0x80
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	4413      	add	r3, r2
 80043de:	461a      	mov	r2, r3
 80043e0:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1272.Settings.FskPacketHandler.RxGain = ( SX1272Read( REG_LNA ) >> 5 ) & 0x07;
 80043e4:	200c      	movs	r0, #12
 80043e6:	f7ff fb6f 	bl	8003ac8 <SX1272Read>
 80043ea:	4603      	mov	r3, r0
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 80043f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                break;
 80043fc:	e01e      	b.n	800443c <SX1272OnDio2Irq+0x108>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004400:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <SX1272OnDio2Irq+0x10c>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004408:	2102      	movs	r1, #2
 800440a:	2012      	movs	r0, #18
 800440c:	f7ff fb4a 	bl	8003aa4 <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <SX1272OnDio2Irq+0x174>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <SX1272OnDio2Irq+0x10c>
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <SX1272OnDio2Irq+0x174>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <SX1272OnDio2Irq+0x10c>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004422:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <SX1272OnDio2Irq+0x174>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695c      	ldr	r4, [r3, #20]
 8004428:	201c      	movs	r0, #28
 800442a:	f7ff fb4d 	bl	8003ac8 <SX1272Read>
 800442e:	4603      	mov	r3, r0
 8004430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4618      	mov	r0, r3
 8004438:	47a0      	blx	r4
                break;
 800443a:	e001      	b.n	8004440 <SX1272OnDio2Irq+0x10c>
                break;
 800443c:	bf00      	nop
 800443e:	e02b      	b.n	8004498 <SX1272OnDio2Irq+0x164>
                break;
 8004440:	bf00      	nop
            break;
 8004442:	e029      	b.n	8004498 <SX1272OnDio2Irq+0x164>
            switch( SX1272.Settings.Modem )
 8004444:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004446:	795b      	ldrb	r3, [r3, #5]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d021      	beq.n	8004490 <SX1272OnDio2Irq+0x15c>
 800444c:	2b01      	cmp	r3, #1
 800444e:	d000      	beq.n	8004452 <SX1272OnDio2Irq+0x11e>
                break;
 8004450:	e021      	b.n	8004496 <SX1272OnDio2Irq+0x162>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <SX1272OnDio2Irq+0x16c>)
 8004454:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <SX1272OnDio2Irq+0x160>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800445c:	2102      	movs	r1, #2
 800445e:	2012      	movs	r0, #18
 8004460:	f7ff fb20 	bl	8003aa4 <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <SX1272OnDio2Irq+0x174>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <SX1272OnDio2Irq+0x160>
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <SX1272OnDio2Irq+0x174>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <SX1272OnDio2Irq+0x160>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <SX1272OnDio2Irq+0x174>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695c      	ldr	r4, [r3, #20]
 800447c:	201c      	movs	r0, #28
 800447e:	f7ff fb23 	bl	8003ac8 <SX1272Read>
 8004482:	4603      	mov	r3, r0
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4618      	mov	r0, r3
 800448c:	47a0      	blx	r4
                break;
 800448e:	e001      	b.n	8004494 <SX1272OnDio2Irq+0x160>
                break;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <SX1272OnDio2Irq+0x162>
                break;
 8004494:	bf00      	nop
            break;
 8004496:	bf00      	nop
    }
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}
 80044a0:	20000294 	.word	0x20000294
 80044a4:	20000314 	.word	0x20000314
 80044a8:	2000005c 	.word	0x2000005c

080044ac <SX1272OnDio3Irq>:

void SX1272OnDio3Irq( void* context )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.Modem )
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <SX1272OnDio3Irq+0x80>)
 80044b6:	795b      	ldrb	r3, [r3, #5]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d030      	beq.n	800451e <SX1272OnDio3Irq+0x72>
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d000      	beq.n	80044c2 <SX1272OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80044c0:	e030      	b.n	8004524 <SX1272OnDio3Irq+0x78>
        if( ( SX1272Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80044c2:	2012      	movs	r0, #18
 80044c4:	f7ff fb00 	bl	8003ac8 <SX1272Read>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d112      	bne.n	80044f8 <SX1272OnDio3Irq+0x4c>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80044d2:	2105      	movs	r1, #5
 80044d4:	2012      	movs	r0, #18
 80044d6:	f7ff fae5 	bl	8003aa4 <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <SX1272OnDio3Irq+0x84>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01f      	beq.n	8004522 <SX1272OnDio3Irq+0x76>
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <SX1272OnDio3Irq+0x84>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01a      	beq.n	8004522 <SX1272OnDio3Irq+0x76>
                RadioEvents->CadDone( true );
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <SX1272OnDio3Irq+0x84>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2001      	movs	r0, #1
 80044f4:	4798      	blx	r3
        break;
 80044f6:	e014      	b.n	8004522 <SX1272OnDio3Irq+0x76>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80044f8:	2104      	movs	r1, #4
 80044fa:	2012      	movs	r0, #18
 80044fc:	f7ff fad2 	bl	8003aa4 <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <SX1272OnDio3Irq+0x84>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <SX1272OnDio3Irq+0x76>
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <SX1272OnDio3Irq+0x84>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <SX1272OnDio3Irq+0x76>
                RadioEvents->CadDone( false );
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <SX1272OnDio3Irq+0x84>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2000      	movs	r0, #0
 800451a:	4798      	blx	r3
        break;
 800451c:	e001      	b.n	8004522 <SX1272OnDio3Irq+0x76>
        break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <SX1272OnDio3Irq+0x78>
        break;
 8004522:	bf00      	nop
    }
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000294 	.word	0x20000294
 8004530:	2000005c 	.word	0x2000005c

08004534 <SX1272OnDio4Irq>:

void SX1272OnDio4Irq( void* context )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
    switch( SX1272.Settings.Modem )
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <SX1272OnDio4Irq+0x3c>)
 800453e:	795b      	ldrb	r3, [r3, #5]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <SX1272OnDio4Irq+0x16>
 8004544:	2b01      	cmp	r3, #1
 8004546:	d00a      	beq.n	800455e <SX1272OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8004548:	e00c      	b.n	8004564 <SX1272OnDio4Irq+0x30>
            if( SX1272.Settings.FskPacketHandler.PreambleDetected == false )
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <SX1272OnDio4Irq+0x3c>)
 800454c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <SX1272OnDio4Irq+0x2e>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <SX1272OnDio4Irq+0x3c>)
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        break;
 800455c:	e001      	b.n	8004562 <SX1272OnDio4Irq+0x2e>
        break;
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <SX1272OnDio4Irq+0x30>
        break;
 8004562:	bf00      	nop
    }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000294 	.word	0x20000294

08004574 <DelayMs>:

/* Includes ------------------------------------------------------------------*/
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
//  HW_RTC_DelayMs( ms );

}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LPM_SetStopMode>:

  return;
}

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	460a      	mov	r2, r1
 8004592:	71fb      	strb	r3, [r7, #7]
 8004594:	4613      	mov	r3, r2
 8004596:	71bb      	strb	r3, [r7, #6]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	613b      	str	r3, [r7, #16]
  return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80045a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80045a2:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 80045a4:	79bb      	ldrb	r3, [r7, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <LPM_SetStopMode+0x36>
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d000      	beq.n	80045b0 <LPM_SetStopMode+0x28>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 80045ae:	e00e      	b.n	80045ce <LPM_SetStopMode+0x46>
      StopModeDisable |= (uint32_t)id;
 80045b0:	79fa      	ldrb	r2, [r7, #7]
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <LPM_SetStopMode+0x5c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <LPM_SetStopMode+0x5c>)
 80045ba:	6013      	str	r3, [r2, #0]
      break;
 80045bc:	e007      	b.n	80045ce <LPM_SetStopMode+0x46>
      StopModeDisable &= ~(uint32_t)id;
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <LPM_SetStopMode+0x5c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4013      	ands	r3, r2
 80045c8:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <LPM_SetStopMode+0x5c>)
 80045ca:	6013      	str	r3, [r2, #0]
      break;
 80045cc:	bf00      	nop
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 80045d8:	bf00      	nop
}
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	20000164 	.word	0x20000164

080045e8 <LPM_GetMode>:

  return;
}

LPM_GetMode_t LPM_GetMode(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ee:	f3ef 8310 	mrs	r3, PRIMASK
 80045f2:	607b      	str	r3, [r7, #4]
  return(result);
 80045f4:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 80045f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80045f8:	b672      	cpsid	i

  DISABLE_IRQ( );

  if(StopModeDisable )
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <LPM_GetMode+0x4c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <LPM_GetMode+0x20>
  {
    mode_selected = LPM_SleepMode;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
 8004606:	e008      	b.n	800461a <LPM_GetMode+0x32>
  }
  else
  {
    if(OffModeDisable)
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <LPM_GetMode+0x50>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <LPM_GetMode+0x2e>
    {
      mode_selected = LPM_StopMode;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e001      	b.n	800461a <LPM_GetMode+0x32>
    }
    else
    {
      mode_selected = LPM_OffMode;
 8004616:	2302      	movs	r3, #2
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000164 	.word	0x20000164
 8004638:	20000168 	.word	0x20000168

0800463c <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	615a      	str	r2, [r3, #20]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	617b      	str	r3, [r7, #20]
  return(result);
 800468e:	697b      	ldr	r3, [r7, #20]

  BACKUP_PRIMASK();
 8004690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8004692:	b672      	cpsid	i

  DISABLE_IRQ( );


  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <TimerStart+0x2a>
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f902 	bl	80048a4 <TimerExists>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <TimerStart+0x36>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 80046b0:	e02f      	b.n	8004712 <TimerStart+0x96>
  }
  obj->Timestamp = obj->ReloadValue;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <TimerStart+0x9c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <TimerStart+0x5e>
  {
    HW_RTC_SetTimerContext( );
 80046ce:	f000 fad5 	bl	8004c7c <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f958 	bl	8004988 <TimerInsertNewHeadTimer>
 80046d8:	e016      	b.n	8004708 <TimerStart+0x8c>
  }
  else
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 80046da:	f000 fa8b 	bl	8004bf4 <HW_RTC_GetTimerElapsedTime>
 80046de:	61f8      	str	r0, [r7, #28]
    obj->Timestamp += elapsedTime;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	441a      	add	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]

    if( obj->Timestamp < TimerListHead->Timestamp )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <TimerStart+0x9c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d203      	bcs.n	8004702 <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f944 	bl	8004988 <TimerInsertNewHeadTimer>
 8004700:	e002      	b.n	8004708 <TimerStart+0x8c>
    }
    else
    {
      TimerInsertTimer( obj);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f910 	bl	8004928 <TimerInsertTimer>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2000016c 	.word	0x2000016c

0800471c <TimerStop>:
    TimerSetTimeout( TimerListHead );
  }
}

void TimerStop( TimerEvent_t *obj ) 
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	613b      	str	r3, [r7, #16]
  return(result);
 800472a:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 800472c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800472e:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8004730:	4b36      	ldr	r3, [pc, #216]	; (800480c <TimerStop+0xf0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8004736:	4b35      	ldr	r3, [pc, #212]	; (800480c <TimerStop+0xf0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800473c:	4b33      	ldr	r3, [pc, #204]	; (800480c <TimerStop+0xf0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <TimerStop+0x2e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <TimerStop+0x3a>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8004754:	e057      	b.n	8004806 <TimerStop+0xea>
  }

  obj->IsStarted = false;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <TimerStop+0xf0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d147      	bne.n	80047f6 <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8004766:	4b29      	ldr	r3, [pc, #164]	; (800480c <TimerStop+0xf0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	7a5b      	ldrb	r3, [r3, #9]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d019      	beq.n	80047a4 <TimerStop+0x88>
    {

      TimerListHead->IsNext2Expire = false;
 8004770:	4b26      	ldr	r3, [pc, #152]	; (800480c <TimerStop+0xf0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 8004778:	4b24      	ldr	r3, [pc, #144]	; (800480c <TimerStop+0xf0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <TimerStop+0xf0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <TimerStop+0xf0>)
 800478a:	6013      	str	r3, [r2, #0]
        TimerSetTimeout( TimerListHead );
 800478c:	4b1f      	ldr	r3, [pc, #124]	; (800480c <TimerStop+0xf0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f8a5 	bl	80048e0 <TimerSetTimeout>
 8004796:	e031      	b.n	80047fc <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8004798:	f000 fa56 	bl	8004c48 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <TimerStop+0xf0>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e02b      	b.n	80047fc <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <TimerStop+0xf0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <TimerStop+0xf0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <TimerStop+0xf0>)
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e020      	b.n	80047fc <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <TimerStop+0xf0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e01c      	b.n	80047fc <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d110      	bne.n	80047ec <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <TimerStop+0xc4>
        {
          cur = cur->Next;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 80047de:	e00d      	b.n	80047fc <TimerStop+0xe0>
          cur = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	615a      	str	r2, [r3, #20]
        break;
 80047ea:	e007      	b.n	80047fc <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e2      	bne.n	80047c2 <TimerStop+0xa6>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000016c 	.word	0x2000016c

08004810 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800481e:	6838      	ldr	r0, [r7, #0]
 8004820:	f000 f981 	bl	8004b26 <HW_RTC_ms2Tick>
 8004824:	60f8      	str	r0, [r7, #12]

  TimerStop( obj );
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff78 	bl	800471c <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 800482c:	f000 f973 	bl	8004b16 <HW_RTC_GetMinimumTimeout>
 8004830:	60b8      	str	r0, [r7, #8]

  if( ticks < minValue )
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d201      	bcs.n	800483e <TimerSetValue+0x2e>
  {
    ticks = minValue;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 8004858:	f000 f9e4 	bl	8004c24 <HW_RTC_GetTimerValue>
 800485c:	6078      	str	r0, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f97c 	bl	8004b5c <HW_RTC_Tick2ms>
 8004864:	4603      	mov	r3, r0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <TimerGetElapsedTime+0x12>
  {
    return 0;
 800487c:	2300      	movs	r3, #0
 800487e:	e00d      	b.n	800489c <TimerGetElapsedTime+0x2e>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 8004880:	f000 f9d0 	bl	8004c24 <HW_RTC_GetTimerValue>
 8004884:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f94d 	bl	8004b26 <HW_RTC_ms2Tick>
 800488c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f961 	bl	8004b5c <HW_RTC_Tick2ms>
 800489a:	4603      	mov	r3, r0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <TimerExists+0x38>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80048b2:	e008      	b.n	80048c6 <TimerExists+0x22>
  {
    if( cur == obj )
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d101      	bne.n	80048c0 <TimerExists+0x1c>
    {
      return true;
 80048bc:	2301      	movs	r3, #1
 80048be:	e006      	b.n	80048ce <TimerExists+0x2a>
    }
    cur = cur->Next;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f3      	bne.n	80048b4 <TimerExists+0x10>
  }
  return false;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000016c 	.word	0x2000016c

080048e0 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 80048e8:	f000 f915 	bl	8004b16 <HW_RTC_GetMinimumTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681c      	ldr	r4, [r3, #0]
 80048fa:	f000 f97b 	bl	8004bf4 <HW_RTC_GetTimerElapsedTime>
 80048fe:	4602      	mov	r2, r0
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	429c      	cmp	r4, r3
 8004906:	d206      	bcs.n	8004916 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8004908:	f000 f974 	bl	8004bf4 <HW_RTC_GetTimerElapsedTime>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f93c 	bl	8004b98 <HW_RTC_SetAlarm>
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bd90      	pop	{r4, r7, pc}

08004928 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <TimerInsertTimer+0x5c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <TimerInsertTimer+0x5c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800493e:	e012      	b.n	8004966 <TimerInsertTimer+0x3e>
  {
    if( obj->Timestamp  > next->Timestamp )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d905      	bls.n	8004958 <TimerInsertTimer+0x30>
    {
        cur = next;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	e006      	b.n	8004966 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	615a      	str	r2, [r3, #20]
        return;
 8004964:	e009      	b.n	800497a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e8      	bne.n	8004940 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	615a      	str	r2, [r3, #20]
}
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	2000016c 	.word	0x2000016c

08004988 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <TimerInsertNewHeadTimer+0x38>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 80049a8:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <TimerInsertNewHeadTimer+0x38>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <TimerInsertNewHeadTimer+0x38>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff94 	bl	80048e0 <TimerSetTimeout>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	2000016c 	.word	0x2000016c

080049c4 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80049d2:	e007      	b.n	80049e4 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	1c53      	adds	r3, r2, #1
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1c59      	adds	r1, r3, #1
 80049de:	60f9      	str	r1, [r7, #12]
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	80fa      	strh	r2, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f2      	bne.n	80049d4 <memcpy1+0x10>
    }
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	460b      	mov	r3, r1
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	817b      	strh	r3, [r7, #10]

 // RCC_GPIO_CLK_ENABLE(  (uint32_t) port);

  initStruct->Pin = GPIO_Pin ;
 8004a08:	897a      	ldrh	r2, [r7, #10]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7fc fb5b 	bl	80010cc <HAL_GPIO_Init>
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	817b      	strh	r3, [r7, #10]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8004a30:	897b      	ldrh	r3, [r7, #10]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f83a 	bl	8004aac <HW_GPIO_GetBitPos>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	617b      	str	r3, [r7, #20]

  if ( irqHandler != NULL)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d017      	beq.n	8004a72 <HW_GPIO_SetIrq+0x52>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8004a42:	4910      	ldr	r1, [pc, #64]	; (8004a84 <HW_GPIO_SetIrq+0x64>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8004a4c:	897b      	ldrh	r3, [r7, #10]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ffb8 	bl	80059c4 <MSP_GetIRQn>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8004a58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fafc 	bl	800105e <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ( IRQnb );
 8004a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc fb13 	bl	8001096 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8004a70:	e004      	b.n	8004a7c <HW_GPIO_SetIrq+0x5c>
    GpioIrq[ BitPos ] = NULL;
 8004a72:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <HW_GPIO_SetIrq+0x64>)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2100      	movs	r1, #0
 8004a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8004a7c:	bf00      	nop
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000170 	.word	0x20000170

08004a88 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	460b      	mov	r3, r1
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7fc fc96 	bl	80013d0 <HAL_GPIO_WritePin>
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]
  uint8_t PinPos=0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HW_GPIO_GetBitPos+0x20>
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	f043 0308 	orr.w	r3, r3, #8
 8004aca:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HW_GPIO_GetBitPos+0x34>
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HW_GPIO_GetBitPos+0x48>
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	f043 0302 	orr.w	r3, r3, #2
 8004af2:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HW_GPIO_GetBitPos+0x5c>
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]

  return PinPos;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 8004b1a:	2303      	movs	r3, #3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMilliSec )
{
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	01e1      	lsls	r1, r4, #7
 8004b3e:	ea41 6153 	orr.w	r1, r1, r3, lsr #25
 8004b42:	01d8      	lsls	r0, r3, #7
 8004b44:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f7fb ffba 	bl	8000ac4 <__aeabi_uldivmod>
 8004b50:	4603      	mov	r3, r0
 8004b52:	460c      	mov	r4, r1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}

08004b5c <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms( uint32_t tick )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick>>N_PREDIV_S;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0a9b      	lsrs	r3, r3, #10
 8004b68:	60fb      	str	r3, [r7, #12]
  tick = tick&PREDIV_S;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b70:	607b      	str	r3, [r7, #4]
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b78:	fb02 f203 	mul.w	r2, r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	0a9b      	lsrs	r3, r3, #10
 8004b88:	4413      	add	r3, r2
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HW_RTC_SetAlarm+0x58>)
 8004ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba6:	3303      	adds	r3, #3
 8004ba8:	461c      	mov	r4, r3
 8004baa:	f000 f823 	bl	8004bf4 <HW_RTC_GetTimerElapsedTime>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d204      	bcs.n	8004bc2 <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2004      	movs	r0, #4
 8004bbc:	f7ff fce4 	bl	8004588 <LPM_SetStopMode>
 8004bc0:	e003      	b.n	8004bca <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	2004      	movs	r0, #4
 8004bc6:	f7ff fcdf 	bl	8004588 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if( LPM_GetMode() == LPM_StopMode )
 8004bca:	f7ff fd0d 	bl	80045e8 <LPM_GetMode>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d106      	bne.n	8004be2 <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HW_RTC_SetAlarm+0x58>)
 8004bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f860 	bl	8004ca8 <HW_RTC_StartWakeUpAlarm>
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}
 8004bf0:	200001b0 	.word	0x200001b0

08004bf4 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8004bfa:	f107 0208 	add.w	r2, r7, #8
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f948 	bl	8004e98 <HW_RTC_GetCalendarValue>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <HW_RTC_GetTimerElapsedTime+0x2c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	1ad3      	subs	r3, r2, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200001fc 	.word	0x200001fc

08004c24 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b089      	sub	sp, #36	; 0x24
 8004c28:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8004c2a:	f107 0208 	add.w	r2, r7, #8
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f930 	bl	8004e98 <HW_RTC_GetCalendarValue>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	61fb      	str	r3, [r7, #28]

  return( CalendarValue );
 8004c3e:	69fb      	ldr	r3, [r7, #28]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3724      	adds	r7, #36	; 0x24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}

08004c48 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8004c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c50:	4808      	ldr	r0, [pc, #32]	; (8004c74 <HW_RTC_StopAlarm+0x2c>)
 8004c52:	f7fd f95f 	bl	8001f14 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <HW_RTC_StopAlarm+0x2c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HW_RTC_StopAlarm+0x2c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004c66:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HW_RTC_StopAlarm+0x30>)
 8004c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c6e:	615a      	str	r2, [r3, #20]
}
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	200001b4 	.word	0x200001b4
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8004c7c:	b598      	push	{r3, r4, r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 8004c80:	4906      	ldr	r1, [pc, #24]	; (8004c9c <HW_RTC_SetTimerContext+0x20>)
 8004c82:	4807      	ldr	r0, [pc, #28]	; (8004ca0 <HW_RTC_SetTimerContext+0x24>)
 8004c84:	f000 f908 	bl	8004e98 <HW_RTC_GetCalendarValue>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HW_RTC_SetTimerContext+0x28>)
 8004c90:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 8004c92:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HW_RTC_SetTimerContext+0x28>)
 8004c94:	681b      	ldr	r3, [r3, #0]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	bd98      	pop	{r3, r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000200 	.word	0x20000200
 8004ca0:	20000214 	.word	0x20000214
 8004ca4:	200001fc 	.word	0x200001fc

08004ca8 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8004ca8:	b5b0      	push	{r4, r5, r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t rtcAlarmSeconds = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t rtcAlarmMinutes = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t rtcAlarmHours = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t rtcAlarmDays = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004cc4:	4b6e      	ldr	r3, [pc, #440]	; (8004e80 <HW_RTC_StartWakeUpAlarm+0x1d8>)
 8004cc6:	f107 0410 	add.w	r4, r7, #16
 8004cca:	1d1d      	adds	r5, r3, #4
 8004ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	6023      	str	r3, [r4, #0]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HW_RTC_StartWakeUpAlarm+0x1d8>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	60fb      	str	r3, [r7, #12]

  HW_RTC_StopAlarm( );
 8004cda:	f7ff ffb5 	bl	8004c48 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8004ce6:	3303      	adds	r3, #3
 8004ce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cf6:	4413      	add	r3, r2
 8004cf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	0a9b      	lsrs	r3, r3, #10
 8004cfe:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004d04:	e008      	b.n	8004d18 <HW_RTC_StartWakeUpAlarm+0x70>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8004d0c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004d10:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8004d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d14:	3301      	adds	r3, #1
 8004d16:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a5a      	ldr	r2, [pc, #360]	; (8004e84 <HW_RTC_StartWakeUpAlarm+0x1dc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d8f2      	bhi.n	8004d06 <HW_RTC_StartWakeUpAlarm+0x5e>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8004d20:	7c3b      	ldrb	r3, [r7, #16]
 8004d22:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004d24:	e006      	b.n	8004d34 <HW_RTC_StartWakeUpAlarm+0x8c>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8004d2c:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8004d2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d30:	3301      	adds	r3, #1
 8004d32:	853b      	strh	r3, [r7, #40]	; 0x28
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8004d3a:	d2f4      	bcs.n	8004d26 <HW_RTC_StartWakeUpAlarm+0x7e>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004d3c:	7c7b      	ldrb	r3, [r7, #17]
 8004d3e:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004d40:	e005      	b.n	8004d4e <HW_RTC_StartWakeUpAlarm+0xa6>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3b3c      	subs	r3, #60	; 0x3c
 8004d46:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8004d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b3b      	cmp	r3, #59	; 0x3b
 8004d52:	d8f6      	bhi.n	8004d42 <HW_RTC_StartWakeUpAlarm+0x9a>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8004d54:	7cbb      	ldrb	r3, [r7, #18]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8004d60:	e006      	b.n	8004d70 <HW_RTC_StartWakeUpAlarm+0xc8>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 8004d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d64:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004d68:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSeconds++;
 8004d6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8004d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d76:	d2f4      	bcs.n	8004d62 <HW_RTC_StartWakeUpAlarm+0xba>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8004d78:	e005      	b.n	8004d86 <HW_RTC_StartWakeUpAlarm+0xde>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8004d7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d7c:	3b3c      	subs	r3, #60	; 0x3c
 8004d7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    rtcAlarmMinutes++;
 8004d80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d82:	3301      	adds	r3, #1
 8004d84:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8004d86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d88:	2b3b      	cmp	r3, #59	; 0x3b
 8004d8a:	d8f6      	bhi.n	8004d7a <HW_RTC_StartWakeUpAlarm+0xd2>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004d8c:	e005      	b.n	8004d9a <HW_RTC_StartWakeUpAlarm+0xf2>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8004d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d90:	3b3c      	subs	r3, #60	; 0x3c
 8004d92:	857b      	strh	r3, [r7, #42]	; 0x2a
    rtcAlarmHours++;
 8004d94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d96:	3301      	adds	r3, #1
 8004d98:	853b      	strh	r3, [r7, #40]	; 0x28
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004d9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d9c:	2b3b      	cmp	r3, #59	; 0x3b
 8004d9e:	d8f6      	bhi.n	8004d8e <HW_RTC_StartWakeUpAlarm+0xe6>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004da0:	e005      	b.n	8004dae <HW_RTC_StartWakeUpAlarm+0x106>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8004da2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004da4:	3b18      	subs	r3, #24
 8004da6:	853b      	strh	r3, [r7, #40]	; 0x28
    rtcAlarmDays++;
 8004da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004daa:	3301      	adds	r3, #1
 8004dac:	84fb      	strh	r3, [r7, #38]	; 0x26
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004dae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004db0:	2b17      	cmp	r3, #23
 8004db2:	d8f6      	bhi.n	8004da2 <HW_RTC_StartWakeUpAlarm+0xfa>
  }

  if( RTC_DateStruct.Year % 4 == 0 )
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d113      	bne.n	8004de8 <HW_RTC_StartWakeUpAlarm+0x140>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )
 8004dc0:	7b7b      	ldrb	r3, [r7, #13]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	4a30      	ldr	r2, [pc, #192]	; (8004e88 <HW_RTC_StartWakeUpAlarm+0x1e0>)
 8004dc6:	5cd3      	ldrb	r3, [r2, r3]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d91e      	bls.n	8004e0e <HW_RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8004dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dd2:	7b7a      	ldrb	r2, [r7, #13]
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	492c      	ldr	r1, [pc, #176]	; (8004e88 <HW_RTC_StartWakeUpAlarm+0x1e0>)
 8004dd8:	5c8a      	ldrb	r2, [r1, r2]
 8004dda:	fb93 f1f2 	sdiv	r1, r3, r2
 8004dde:	fb02 f201 	mul.w	r2, r2, r1
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004de6:	e012      	b.n	8004e0e <HW_RTC_StartWakeUpAlarm+0x166>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )
 8004de8:	7b7b      	ldrb	r3, [r7, #13]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <HW_RTC_StartWakeUpAlarm+0x1e4>)
 8004dee:	5cd3      	ldrb	r3, [r2, r3]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d90a      	bls.n	8004e0e <HW_RTC_StartWakeUpAlarm+0x166>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dfa:	7b7a      	ldrb	r2, [r7, #13]
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	4923      	ldr	r1, [pc, #140]	; (8004e8c <HW_RTC_StartWakeUpAlarm+0x1e4>)
 8004e00:	5c8a      	ldrb	r2, [r1, r2]
 8004e02:	fb93 f1f2 	sdiv	r1, r3, r2
 8004e06:	fb02 f201 	mul.w	r2, r2, r1
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 8004e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e10:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8004e14:	3303      	adds	r3, #3
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e1a:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8004e1c:	4b1c      	ldr	r3, [pc, #112]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e1e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004e22:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8004e24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e2a:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8004e2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e32:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8004e34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e3a:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8004e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e42:	f883 2020 	strb.w	r2, [r3, #32]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8004e46:	7cfa      	ldrb	r2, [r7, #19]
 8004e48:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e4a:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4908      	ldr	r1, [pc, #32]	; (8004e90 <HW_RTC_StartWakeUpAlarm+0x1e8>)
 8004e70:	4808      	ldr	r0, [pc, #32]	; (8004e94 <HW_RTC_StartWakeUpAlarm+0x1ec>)
 8004e72:	f7fc fefb 	bl	8001c6c <HAL_RTC_SetAlarm_IT>
}
 8004e76:	bf00      	nop
 8004e78:	3730      	adds	r7, #48	; 0x30
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200001fc 	.word	0x200001fc
 8004e84:	0001517f 	.word	0x0001517f
 8004e88:	08005f94 	.word	0x08005f94
 8004e8c:	08005f88 	.word	0x08005f88
 8004e90:	200001d4 	.word	0x200001d4
 8004e94:	200001b4 	.word	0x200001b4

08004e98 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint64_t calendarValue = 0;
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8004eae:	2200      	movs	r2, #0
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4838      	ldr	r0, [pc, #224]	; (8004f94 <HW_RTC_GetCalendarValue+0xfc>)
 8004eb4:	f7fc fe7c 	bl	8001bb0 <HAL_RTC_GetTime>
//    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
//
//  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC) );

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	78db      	ldrb	r3, [r3, #3]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8004ec2:	fb03 f302 	mul.w	r3, r3, r2
 8004ec6:	3303      	adds	r3, #3
 8004ec8:	089b      	lsrs	r3, r3, #2
 8004eca:	60fb      	str	r3, [r7, #12]

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HW_RTC_GetCalendarValue+0x46>
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HW_RTC_GetCalendarValue+0x100>)
 8004edc:	e000      	b.n	8004ee0 <HW_RTC_GetCalendarValue+0x48>
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <HW_RTC_GetCalendarValue+0x104>)
 8004ee0:	60bb      	str	r3, [r7, #8]

  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	1e5a      	subs	r2, r3, #1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	0fda      	lsrs	r2, r3, #31
 8004ef6:	4413      	add	r3, r2
 8004ef8:	105b      	asrs	r3, r3, #1
 8004efa:	4619      	mov	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	1acb      	subs	r3, r1, r3
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  seconds += (RTC_DateStruct->Date -1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	789b      	ldrb	r3, [r3, #2]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <HW_RTC_GetCalendarValue+0x108>)
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	60fb      	str	r3, [r7, #12]

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	789b      	ldrb	r3, [r3, #2]
 8004f32:	4618      	mov	r0, r3
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004f3e:	fb03 f202 	mul.w	r2, r3, r2
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	4619      	mov	r1, r3
 8004f48:	460b      	mov	r3, r1
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	1a5b      	subs	r3, r3, r1
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	4403      	add	r3, r0
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds +
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]



  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	0d95      	lsrs	r5, r2, #22
 8004f64:	0294      	lsls	r4, r2, #10
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8004f6e:	3303      	adds	r3, #3
 8004f70:	461a      	mov	r2, r3
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	18a0      	adds	r0, r4, r2
 8004f78:	eb45 0103 	adc.w	r1, r5, r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	e9c7 3404 	strd	r3, r4, [r7, #16]

  return( calendarValue );
 8004f84:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bdb0      	pop	{r4, r5, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	200001b4 	.word	0x200001b4
 8004f98:	00445550 	.word	0x00445550
 8004f9c:	0099aaa0 	.word	0x0099aaa0
 8004fa0:	00015180 	.word	0x00015180

08004fa4 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8004faa:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HW_SPI_Init+0x80>)
 8004fac:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HW_SPI_Init+0x84>)
 8004fae:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 8004fb0:	481e      	ldr	r0, [pc, #120]	; (800502c <HW_SPI_Init+0x88>)
 8004fb2:	f000 f891 	bl	80050d8 <SpiFrequency>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <HW_SPI_Init+0x80>)
 8004fba:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HW_SPI_Init+0x80>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8004fc2:	4b18      	ldr	r3, [pc, #96]	; (8005024 <HW_SPI_Init+0x80>)
 8004fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fc8:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004fca:	4b16      	ldr	r3, [pc, #88]	; (8005024 <HW_SPI_Init+0x80>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HW_SPI_Init+0x80>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <HW_SPI_Init+0x80>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HW_SPI_Init+0x80>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HW_SPI_Init+0x80>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <HW_SPI_Init+0x80>)
 8004fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fee:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <HW_SPI_Init+0x80>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <HW_SPI_Init+0x8c>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HW_SPI_Init+0x8c>)
 8005000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005004:	6453      	str	r3, [r2, #68]	; 0x44
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HW_SPI_Init+0x8c>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 8005012:	4804      	ldr	r0, [pc, #16]	; (8005024 <HW_SPI_Init+0x80>)
 8005014:	f7fd f847 	bl	80020a6 <HAL_SPI_Init>
    /* Initialization Error */
    // Error_Handler();
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit(  );
 8005018:	f000 f80c 	bl	8005034 <HW_SPI_IoInit>
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000218 	.word	0x20000218
 8005028:	40013000 	.word	0x40013000
 800502c:	00989680 	.word	0x00989680
 8005030:	40023800 	.word	0x40023800

08005034 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]


  initStruct.Mode =GPIO_MODE_AF_PP;
 8005048:	2302      	movs	r3, #2
 800504a:	60bb      	str	r3, [r7, #8]
  initStruct.Pull =GPIO_NOPULL  ;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005050:	2303      	movs	r3, #3
 8005052:	613b      	str	r3, [r7, #16]
//  initStruct.Alternate= GPIO_AF0_;

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	461a      	mov	r2, r3
 8005058:	2108      	movs	r1, #8
 800505a:	4812      	ldr	r0, [pc, #72]	; (80050a4 <HW_SPI_IoInit+0x70>)
 800505c:	f7ff fccd 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	461a      	mov	r2, r3
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	4810      	ldr	r0, [pc, #64]	; (80050a8 <HW_SPI_IoInit+0x74>)
 8005068:	f7ff fcc7 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800506c:	1d3b      	adds	r3, r7, #4
 800506e:	461a      	mov	r2, r3
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	480d      	ldr	r0, [pc, #52]	; (80050a8 <HW_SPI_IoInit+0x74>)
 8005074:	f7ff fcc1 	bl	80049fa <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005078:	2301      	movs	r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	461a      	mov	r2, r3
 8005084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005088:	4807      	ldr	r0, [pc, #28]	; (80050a8 <HW_SPI_IoInit+0x74>)
 800508a:	f7ff fcb6 	bl	80049fa <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800508e:	2201      	movs	r2, #1
 8005090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005094:	4804      	ldr	r0, [pc, #16]	; (80050a8 <HW_SPI_IoInit+0x74>)
 8005096:	f7ff fcf7 	bl	8004a88 <HW_GPIO_Write>
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40020400 	.word	0x40020400
 80050a8:	40020000 	.word	0x40020000

080050ac <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	4603      	mov	r3, r0
 80050b4:	80fb      	strh	r3, [r7, #6]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);
 80050b6:	f107 020e 	add.w	r2, r7, #14
 80050ba:	1db9      	adds	r1, r7, #6
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2301      	movs	r3, #1
 80050c4:	4803      	ldr	r0, [pc, #12]	; (80050d4 <HW_SPI_InOut+0x28>)
 80050c6:	f7fd f852 	bl	800216e <HAL_SPI_TransmitReceive>

  return rxData;
 80050ca:	89fb      	ldrh	r3, [r7, #14]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000218 	.word	0x20000218

080050d8 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <SpiFrequency+0x78>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while( SysClkTmp > hz)
 80050ea:	e008      	b.n	80050fe <SpiFrequency+0x26>
  {
    divisor++;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3301      	adds	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d804      	bhi.n	8005108 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d8f2      	bhi.n	80050ec <SpiFrequency+0x14>
 8005106:	e000      	b.n	800510a <SpiFrequency+0x32>
      break;
 8005108:	bf00      	nop
  }

  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <SpiFrequency+0x40>
 8005114:	2200      	movs	r2, #0
 8005116:	e000      	b.n	800511a <SpiFrequency+0x42>
 8005118:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )|
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <SpiFrequency+0x50>
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <SpiFrequency+0x52>
 8005128:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800512a:	4313      	orrs	r3, r2
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	f002 0201 	and.w	r2, r2, #1
 8005132:	2a00      	cmp	r2, #0
 8005134:	d101      	bne.n	800513a <SpiFrequency+0x62>
 8005136:	2200      	movs	r2, #0
 8005138:	e000      	b.n	800513c <SpiFrequency+0x64>
 800513a:	2208      	movs	r2, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  return baudRate;
 8005140:	68fb      	ldr	r3, [r7, #12]
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	2000003c 	.word	0x2000003c

08005154 <SX1272GetWakeTime>:
    SX1272SetPublicNetwork,
    SX1272GetWakeupTime
};

uint32_t SX1272GetWakeTime( void )
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return  0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <SX1272SetXO>:

void SX1272SetXO( uint8_t state )
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	71fb      	strb	r3, [r7, #7]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <SX1272IoInit>:
void SX1272IoInit( void )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8005182:	1d3b      	adds	r3, r7, #4
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	611a      	str	r2, [r3, #16]

  SX1272BoardInit( &BoardCallbacks );
 8005190:	4812      	ldr	r0, [pc, #72]	; (80051dc <SX1272IoInit+0x60>)
 8005192:	f7fd fa3b 	bl	800260c <SX1272BoardInit>

  initStruct.Mode = GPIO_MODE_IT_RISING;
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <SX1272IoInit+0x64>)
 8005198:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 800519a:	2302      	movs	r3, #2
 800519c:	60fb      	str	r3, [r7, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	613b      	str	r3, [r7, #16]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	461a      	mov	r2, r3
 80051a6:	2110      	movs	r1, #16
 80051a8:	480e      	ldr	r0, [pc, #56]	; (80051e4 <SX1272IoInit+0x68>)
 80051aa:	f7ff fc26 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	461a      	mov	r2, r3
 80051b2:	2102      	movs	r1, #2
 80051b4:	480b      	ldr	r0, [pc, #44]	; (80051e4 <SX1272IoInit+0x68>)
 80051b6:	f7ff fc20 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	461a      	mov	r2, r3
 80051be:	2101      	movs	r1, #1
 80051c0:	4808      	ldr	r0, [pc, #32]	; (80051e4 <SX1272IoInit+0x68>)
 80051c2:	f7ff fc1a 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80051c6:	1d3b      	adds	r3, r7, #4
 80051c8:	461a      	mov	r2, r3
 80051ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ce:	4806      	ldr	r0, [pc, #24]	; (80051e8 <SX1272IoInit+0x6c>)
 80051d0:	f7ff fc13 	bl	80049fa <HW_GPIO_Init>
}
 80051d4:	bf00      	nop
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000020 	.word	0x20000020
 80051e0:	10110000 	.word	0x10110000
 80051e4:	40020400 	.word	0x40020400
 80051e8:	40020800 	.word	0x40020800

080051ec <SX1272IoIrqInit>:

void SX1272IoIrqInit( DioIrqHandler **irqHandlers )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2110      	movs	r1, #16
 80051fc:	480f      	ldr	r0, [pc, #60]	; (800523c <SX1272IoIrqInit+0x50>)
 80051fe:	f7ff fc0f 	bl	8004a20 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2200      	movs	r2, #0
 800520a:	2102      	movs	r1, #2
 800520c:	480b      	ldr	r0, [pc, #44]	; (800523c <SX1272IoIrqInit+0x50>)
 800520e:	f7ff fc07 	bl	8004a20 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3308      	adds	r3, #8
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	2101      	movs	r1, #1
 800521c:	4807      	ldr	r0, [pc, #28]	; (800523c <SX1272IoIrqInit+0x50>)
 800521e:	f7ff fbff 	bl	8004a20 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	330c      	adds	r3, #12
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2200      	movs	r2, #0
 800522a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522e:	4804      	ldr	r0, [pc, #16]	; (8005240 <SX1272IoIrqInit+0x54>)
 8005230:	f7ff fbf6 	bl	8004a20 <HW_GPIO_SetIrq>
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40020400 	.word	0x40020400
 8005240:	40020800 	.word	0x40020800

08005244 <SX1272IoDeInit>:

void SX1272IoDeInit( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]

  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <SX1272IoDeInit+0x58>)
 800525a:	60bb      	str	r3, [r7, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 800525c:	2302      	movs	r3, #2
 800525e:	60fb      	str	r3, [r7, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	461a      	mov	r2, r3
 8005264:	2110      	movs	r1, #16
 8005266:	480e      	ldr	r0, [pc, #56]	; (80052a0 <SX1272IoDeInit+0x5c>)
 8005268:	f7ff fbc7 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	461a      	mov	r2, r3
 8005270:	2102      	movs	r1, #2
 8005272:	480b      	ldr	r0, [pc, #44]	; (80052a0 <SX1272IoDeInit+0x5c>)
 8005274:	f7ff fbc1 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	461a      	mov	r2, r3
 800527c:	2101      	movs	r1, #1
 800527e:	4808      	ldr	r0, [pc, #32]	; (80052a0 <SX1272IoDeInit+0x5c>)
 8005280:	f7ff fbbb 	bl	80049fa <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	461a      	mov	r2, r3
 8005288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800528c:	4805      	ldr	r0, [pc, #20]	; (80052a4 <SX1272IoDeInit+0x60>)
 800528e:	f7ff fbb4 	bl	80049fa <HW_GPIO_Init>
}
 8005292:	bf00      	nop
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	10110000 	.word	0x10110000
 80052a0:	40020400 	.word	0x40020400
 80052a4:	40020800 	.word	0x40020800

080052a8 <SX1272SetRfTxPower>:

void SX1272SetRfTxPower( int8_t power )
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1272Read( REG_PACONFIG );
 80052ba:	2009      	movs	r0, #9
 80052bc:	f7fe fc04 	bl	8003ac8 <SX1272Read>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
    paDac = SX1272Read( REG_PADAC );
 80052c4:	205a      	movs	r0, #90	; 0x5a
 80052c6:	f7fe fbff 	bl	8003ac8 <SX1272Read>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1272GetPaSelect( SX1272.Settings.Channel );
 80052ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d6:	b25c      	sxtb	r4, r3
 80052d8:	4b43      	ldr	r3, [pc, #268]	; (80053e8 <SX1272SetRfTxPower+0x140>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f885 	bl	80053ec <SX1272GetPaSelect>
 80052e2:	4603      	mov	r3, r0
 80052e4:	b25b      	sxtb	r3, r3
 80052e6:	4323      	orrs	r3, r4
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80052ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	da4e      	bge.n	8005392 <SX1272SetRfTxPower+0xea>
    {
        if( power > 17 )
 80052f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f8:	2b11      	cmp	r3, #17
 80052fa:	dd04      	ble.n	8005306 <SX1272SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	f043 0307 	orr.w	r3, r3, #7
 8005302:	73bb      	strb	r3, [r7, #14]
 8005304:	e008      	b.n	8005318 <SX1272SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8005306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	b25b      	sxtb	r3, r3
 8005316:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b07      	cmp	r3, #7
 8005320:	d11b      	bne.n	800535a <SX1272SetRfTxPower+0xb2>
        {
            if( power < 5 )
 8005322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005326:	2b04      	cmp	r3, #4
 8005328:	dc01      	bgt.n	800532e <SX1272SetRfTxPower+0x86>
            {
                power = 5;
 800532a:	2305      	movs	r3, #5
 800532c:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	2b14      	cmp	r3, #20
 8005334:	dd01      	ble.n	800533a <SX1272SetRfTxPower+0x92>
            {
                power = 20;
 8005336:	2314      	movs	r3, #20
 8005338:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533e:	f023 030f 	bic.w	r3, r3, #15
 8005342:	b25a      	sxtb	r2, r3
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	3b05      	subs	r3, #5
 8005348:	b2db      	uxtb	r3, r3
 800534a:	b25b      	sxtb	r3, r3
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	b25b      	sxtb	r3, r3
 8005352:	4313      	orrs	r3, r2
 8005354:	b25b      	sxtb	r3, r3
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	e037      	b.n	80053ca <SX1272SetRfTxPower+0x122>
        }
        else
        {
            if( power < 2 )
 800535a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535e:	2b01      	cmp	r3, #1
 8005360:	dc01      	bgt.n	8005366 <SX1272SetRfTxPower+0xbe>
            {
                power = 2;
 8005362:	2302      	movs	r3, #2
 8005364:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	2b11      	cmp	r3, #17
 800536c:	dd01      	ble.n	8005372 <SX1272SetRfTxPower+0xca>
            {
                power = 17;
 800536e:	2311      	movs	r3, #17
 8005370:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8005372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005376:	f023 030f 	bic.w	r3, r3, #15
 800537a:	b25a      	sxtb	r2, r3
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	3b02      	subs	r3, #2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	b25b      	sxtb	r3, r3
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	b25b      	sxtb	r3, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	b25b      	sxtb	r3, r3
 800538e:	73fb      	strb	r3, [r7, #15]
 8005390:	e01b      	b.n	80053ca <SX1272SetRfTxPower+0x122>
        }
    }
    else
    {
        if( power < -1 )
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	da01      	bge.n	80053a0 <SX1272SetRfTxPower+0xf8>
        {
            power = -1;
 800539c:	23ff      	movs	r3, #255	; 0xff
 800539e:	71fb      	strb	r3, [r7, #7]
        }
        if( power > 14 )
 80053a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a4:	2b0e      	cmp	r3, #14
 80053a6:	dd01      	ble.n	80053ac <SX1272SetRfTxPower+0x104>
        {
            power = 14;
 80053a8:	230e      	movs	r3, #14
 80053aa:	71fb      	strb	r3, [r7, #7]
        }
        paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 80053ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b0:	f023 030f 	bic.w	r3, r3, #15
 80053b4:	b25a      	sxtb	r2, r3
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	3301      	adds	r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	b25b      	sxtb	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b25b      	sxtb	r3, r3
 80053c8:	73fb      	strb	r3, [r7, #15]
    }
    SX1272Write( REG_PACONFIG, paConfig );
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	4619      	mov	r1, r3
 80053ce:	2009      	movs	r0, #9
 80053d0:	f7fe fb68 	bl	8003aa4 <SX1272Write>
    SX1272Write( REG_PADAC, paDac );
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	4619      	mov	r1, r3
 80053d8:	205a      	movs	r0, #90	; 0x5a
 80053da:	f7fe fb63 	bl	8003aa4 <SX1272Write>
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd90      	pop	{r4, r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000294 	.word	0x20000294

080053ec <SX1272GetPaSelect>:

uint8_t SX1272GetPaSelect( uint32_t channel )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <SX1272SetAntSwLowPower>:

void SX1272SetAntSwLowPower( bool status )
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	71fb      	strb	r3, [r7, #7]
  //Ant Switch Controlled by SX1272 IC
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <SX1272SetAntSw>:

void SX1272SetAntSw( uint8_t opMode )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
    switch( opMode )
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d103      	bne.n	8005430 <SX1272SetAntSw+0x18>
    {
    case RFLR_OPMODE_TRANSMITTER:
        SX1272.RxTx = 1;
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <SX1272SetAntSw+0x2c>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
        break;
 800542e:	e003      	b.n	8005438 <SX1272SetAntSw+0x20>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        SX1272.RxTx = 0;
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <SX1272SetAntSw+0x2c>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
        break;
 8005436:	bf00      	nop
    }
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	20000294 	.word	0x20000294

08005448 <SX1272CheckRfFrequency>:

bool SX1272CheckRfFrequency( uint32_t frequency )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8005450:	2301      	movs	r3, #1
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <main>:
static void OnledEvent( void );
/**
 * Main application entry point.
 */
int main( void )
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b08d      	sub	sp, #52	; 0x34
 8005464:	af0a      	add	r7, sp, #40	; 0x28
  bool isMaster = false;
 8005466:	2300      	movs	r3, #0
 8005468:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  HAL_Init( );
 800546a:	f7fb fcab 	bl	8000dc4 <HAL_Init>

  SystemClock_Config( );
 800546e:	f000 f9d5 	bl	800581c <SystemClock_Config>

//  SPI_Init(&hspi1);
//  SPI1_Init();

  HW_SPI_Init();
 8005472:	f7ff fd97 	bl	8004fa4 <HW_SPI_Init>

  Radio.IoInit( );
 8005476:	4ba2      	ldr	r3, [pc, #648]	; (8005700 <main+0x2a0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4798      	blx	r3


//   Radio initialization
  RadioEvents.TxDone = OnTxDone;
 800547c:	4ba1      	ldr	r3, [pc, #644]	; (8005704 <main+0x2a4>)
 800547e:	4aa2      	ldr	r2, [pc, #648]	; (8005708 <main+0x2a8>)
 8005480:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8005482:	4ba0      	ldr	r3, [pc, #640]	; (8005704 <main+0x2a4>)
 8005484:	4aa1      	ldr	r2, [pc, #644]	; (800570c <main+0x2ac>)
 8005486:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8005488:	4b9e      	ldr	r3, [pc, #632]	; (8005704 <main+0x2a4>)
 800548a:	4aa1      	ldr	r2, [pc, #644]	; (8005710 <main+0x2b0>)
 800548c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800548e:	4b9d      	ldr	r3, [pc, #628]	; (8005704 <main+0x2a4>)
 8005490:	4aa0      	ldr	r2, [pc, #640]	; (8005714 <main+0x2b4>)
 8005492:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8005494:	4b9b      	ldr	r3, [pc, #620]	; (8005704 <main+0x2a4>)
 8005496:	4aa0      	ldr	r2, [pc, #640]	; (8005718 <main+0x2b8>)
 8005498:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 800549a:	4b99      	ldr	r3, [pc, #612]	; (8005700 <main+0x2a0>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4899      	ldr	r0, [pc, #612]	; (8005704 <main+0x2a4>)
 80054a0:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 80054a2:	4b97      	ldr	r3, [pc, #604]	; (8005700 <main+0x2a0>)
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	489d      	ldr	r0, [pc, #628]	; (800571c <main+0x2bc>)
 80054a8:	4798      	blx	r3

  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80054aa:	4b95      	ldr	r3, [pc, #596]	; (8005700 <main+0x2a0>)
 80054ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80054ae:	4b9c      	ldr	r3, [pc, #624]	; (8005720 <main+0x2c0>)
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9307      	str	r3, [sp, #28]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9306      	str	r3, [sp, #24]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	2301      	movs	r3, #1
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	2300      	movs	r3, #0
 80054c4:	9303      	str	r3, [sp, #12]
 80054c6:	2308      	movs	r3, #8
 80054c8:	9302      	str	r3, [sp, #8]
 80054ca:	2301      	movs	r3, #1
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	2307      	movs	r3, #7
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	2200      	movs	r2, #0
 80054d6:	210e      	movs	r1, #14
 80054d8:	2001      	movs	r0, #1
 80054da:	47a0      	blx	r4
                                 LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000000 );

  Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80054dc:	4b88      	ldr	r3, [pc, #544]	; (8005700 <main+0x2a0>)
 80054de:	6a1c      	ldr	r4, [r3, #32]
 80054e0:	2301      	movs	r3, #1
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	2300      	movs	r3, #0
 80054e6:	9308      	str	r3, [sp, #32]
 80054e8:	2300      	movs	r3, #0
 80054ea:	9307      	str	r3, [sp, #28]
 80054ec:	2300      	movs	r3, #0
 80054ee:	9306      	str	r3, [sp, #24]
 80054f0:	2301      	movs	r3, #1
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	2300      	movs	r3, #0
 80054fa:	9303      	str	r3, [sp, #12]
 80054fc:	2305      	movs	r3, #5
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	2308      	movs	r3, #8
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2301      	movs	r3, #1
 800550a:	2207      	movs	r2, #7
 800550c:	2100      	movs	r1, #0
 800550e:	2001      	movs	r0, #1
 8005510:	47a0      	blx	r4
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );

  Radio.Rx( RX_TIMEOUT_VALUE );
 8005512:	4b7b      	ldr	r3, [pc, #492]	; (8005700 <main+0x2a0>)
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800551a:	4798      	blx	r3

  HAL_SPI_TransmitReceive(&hspi1, "HOLA", (uint8_t *)BufferSPI, 7, 5000);
 800551c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2307      	movs	r3, #7
 8005524:	4a7f      	ldr	r2, [pc, #508]	; (8005724 <main+0x2c4>)
 8005526:	4980      	ldr	r1, [pc, #512]	; (8005728 <main+0x2c8>)
 8005528:	4880      	ldr	r0, [pc, #512]	; (800572c <main+0x2cc>)
 800552a:	f7fc fe20 	bl	800216e <HAL_SPI_TransmitReceive>

  while( 1 )
  {
    switch( State )
 800552e:	4b80      	ldr	r3, [pc, #512]	; (8005730 <main+0x2d0>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	2b04      	cmp	r3, #4
 8005536:	f200 80df 	bhi.w	80056f8 <main+0x298>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <main+0xe0>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005555 	.word	0x08005555
 8005544:	08005681 	.word	0x08005681
 8005548:	08005681 	.word	0x08005681
 800554c:	0800566f 	.word	0x0800566f
 8005550:	080056e7 	.word	0x080056e7
    {
    case RX:
      if( isMaster == true )
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d04b      	beq.n	80055f2 <main+0x192>
      {
        if( BufferSize > 0 )
 800555a:	4b76      	ldr	r3, [pc, #472]	; (8005734 <main+0x2d4>)
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8081 	beq.w	8005666 <main+0x206>
        {
          if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8005564:	2204      	movs	r2, #4
 8005566:	4974      	ldr	r1, [pc, #464]	; (8005738 <main+0x2d8>)
 8005568:	4874      	ldr	r0, [pc, #464]	; (800573c <main+0x2dc>)
 800556a:	f000 fb2a 	bl	8005bc2 <strncmp>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d126      	bne.n	80055c2 <main+0x162>
          {

            // Send the next PING frame
            Buffer[0] = 'P';
 8005574:	4b71      	ldr	r3, [pc, #452]	; (800573c <main+0x2dc>)
 8005576:	2250      	movs	r2, #80	; 0x50
 8005578:	701a      	strb	r2, [r3, #0]
            Buffer[1] = 'I';
 800557a:	4b70      	ldr	r3, [pc, #448]	; (800573c <main+0x2dc>)
 800557c:	2249      	movs	r2, #73	; 0x49
 800557e:	705a      	strb	r2, [r3, #1]
            Buffer[2] = 'N';
 8005580:	4b6e      	ldr	r3, [pc, #440]	; (800573c <main+0x2dc>)
 8005582:	224e      	movs	r2, #78	; 0x4e
 8005584:	709a      	strb	r2, [r3, #2]
            Buffer[3] = 'G';
 8005586:	4b6d      	ldr	r3, [pc, #436]	; (800573c <main+0x2dc>)
 8005588:	2247      	movs	r2, #71	; 0x47
 800558a:	70da      	strb	r2, [r3, #3]
            // We fill the buffer with numbers for the payload
            for( i = 4; i < BufferSize; i++ )
 800558c:	2304      	movs	r3, #4
 800558e:	71bb      	strb	r3, [r7, #6]
 8005590:	e008      	b.n	80055a4 <main+0x144>
            {
              Buffer[i] = i - 4;
 8005592:	79bb      	ldrb	r3, [r7, #6]
 8005594:	79ba      	ldrb	r2, [r7, #6]
 8005596:	3a04      	subs	r2, #4
 8005598:	b2d1      	uxtb	r1, r2
 800559a:	4a68      	ldr	r2, [pc, #416]	; (800573c <main+0x2dc>)
 800559c:	54d1      	strb	r1, [r2, r3]
            for( i = 4; i < BufferSize; i++ )
 800559e:	79bb      	ldrb	r3, [r7, #6]
 80055a0:	3301      	adds	r3, #1
 80055a2:	71bb      	strb	r3, [r7, #6]
 80055a4:	79bb      	ldrb	r3, [r7, #6]
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	4b62      	ldr	r3, [pc, #392]	; (8005734 <main+0x2d4>)
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d3f0      	bcc.n	8005592 <main+0x132>
            }
//            PRINTF("...PING\n");

//            DelayMs( 1 );
            Radio.Send( Buffer, BufferSize );
 80055b0:	4b53      	ldr	r3, [pc, #332]	; (8005700 <main+0x2a0>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	4a5f      	ldr	r2, [pc, #380]	; (8005734 <main+0x2d4>)
 80055b6:	8812      	ldrh	r2, [r2, #0]
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	4611      	mov	r1, r2
 80055bc:	485f      	ldr	r0, [pc, #380]	; (800573c <main+0x2dc>)
 80055be:	4798      	blx	r3
 80055c0:	e051      	b.n	8005666 <main+0x206>
            }
            else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 80055c2:	2204      	movs	r2, #4
 80055c4:	495e      	ldr	r1, [pc, #376]	; (8005740 <main+0x2e0>)
 80055c6:	485d      	ldr	r0, [pc, #372]	; (800573c <main+0x2dc>)
 80055c8:	f000 fafb 	bl	8005bc2 <strncmp>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <main+0x182>
            { // A master already exists then become a slave
              isMaster = false;
 80055d2:	2300      	movs	r3, #0
 80055d4:	71fb      	strb	r3, [r7, #7]
              //GpioWrite( &Led2, 1 ); // Set LED off
              Radio.Rx( RX_TIMEOUT_VALUE );
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <main+0x2a0>)
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055de:	4798      	blx	r3
 80055e0:	e041      	b.n	8005666 <main+0x206>
            }
            else // valid reception but neither a PING or a PONG message
            {    // Set device as master ans start again
              isMaster = true;
 80055e2:	2301      	movs	r3, #1
 80055e4:	71fb      	strb	r3, [r7, #7]
              Radio.Rx( RX_TIMEOUT_VALUE );
 80055e6:	4b46      	ldr	r3, [pc, #280]	; (8005700 <main+0x2a0>)
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055ee:	4798      	blx	r3
 80055f0:	e039      	b.n	8005666 <main+0x206>
            }
          }
        }
        else
        {
          if( BufferSize > 0 )
 80055f2:	4b50      	ldr	r3, [pc, #320]	; (8005734 <main+0x2d4>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d035      	beq.n	8005666 <main+0x206>
          {
            if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 80055fa:	2204      	movs	r2, #4
 80055fc:	4950      	ldr	r1, [pc, #320]	; (8005740 <main+0x2e0>)
 80055fe:	484f      	ldr	r0, [pc, #316]	; (800573c <main+0x2dc>)
 8005600:	f000 fadf 	bl	8005bc2 <strncmp>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d126      	bne.n	8005658 <main+0x1f8>
            {
              // Send the reply to the PONG string
              Buffer[0] = 'P';
 800560a:	4b4c      	ldr	r3, [pc, #304]	; (800573c <main+0x2dc>)
 800560c:	2250      	movs	r2, #80	; 0x50
 800560e:	701a      	strb	r2, [r3, #0]
              Buffer[1] = 'O';
 8005610:	4b4a      	ldr	r3, [pc, #296]	; (800573c <main+0x2dc>)
 8005612:	224f      	movs	r2, #79	; 0x4f
 8005614:	705a      	strb	r2, [r3, #1]
              Buffer[2] = 'N';
 8005616:	4b49      	ldr	r3, [pc, #292]	; (800573c <main+0x2dc>)
 8005618:	224e      	movs	r2, #78	; 0x4e
 800561a:	709a      	strb	r2, [r3, #2]
              Buffer[3] = 'G';
 800561c:	4b47      	ldr	r3, [pc, #284]	; (800573c <main+0x2dc>)
 800561e:	2247      	movs	r2, #71	; 0x47
 8005620:	70da      	strb	r2, [r3, #3]
              // We fill the buffer with numbers for the payload
              for( i = 4; i < BufferSize; i++ )
 8005622:	2304      	movs	r3, #4
 8005624:	71bb      	strb	r3, [r7, #6]
 8005626:	e008      	b.n	800563a <main+0x1da>
              {
                Buffer[i] = i - 4;
 8005628:	79bb      	ldrb	r3, [r7, #6]
 800562a:	79ba      	ldrb	r2, [r7, #6]
 800562c:	3a04      	subs	r2, #4
 800562e:	b2d1      	uxtb	r1, r2
 8005630:	4a42      	ldr	r2, [pc, #264]	; (800573c <main+0x2dc>)
 8005632:	54d1      	strb	r1, [r2, r3]
              for( i = 4; i < BufferSize; i++ )
 8005634:	79bb      	ldrb	r3, [r7, #6]
 8005636:	3301      	adds	r3, #1
 8005638:	71bb      	strb	r3, [r7, #6]
 800563a:	79bb      	ldrb	r3, [r7, #6]
 800563c:	b29a      	uxth	r2, r3
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <main+0x2d4>)
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d3f0      	bcc.n	8005628 <main+0x1c8>
              }
//              DelayMs( 1 );

              Radio.Send( Buffer, BufferSize );
 8005646:	4b2e      	ldr	r3, [pc, #184]	; (8005700 <main+0x2a0>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	4a3a      	ldr	r2, [pc, #232]	; (8005734 <main+0x2d4>)
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	4611      	mov	r1, r2
 8005652:	483a      	ldr	r0, [pc, #232]	; (800573c <main+0x2dc>)
 8005654:	4798      	blx	r3
 8005656:	e006      	b.n	8005666 <main+0x206>
//              PRINTF("...PONG\n");
            }
            else // valid reception but not a PING as expected
            {    // Set device as master and start again
              isMaster = true;
 8005658:	2301      	movs	r3, #1
 800565a:	71fb      	strb	r3, [r7, #7]
              Radio.Rx( RX_TIMEOUT_VALUE );
 800565c:	4b28      	ldr	r3, [pc, #160]	; (8005700 <main+0x2a0>)
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005664:	4798      	blx	r3
            }
         }
      }
      State = LOWPOWER;
 8005666:	4b32      	ldr	r3, [pc, #200]	; (8005730 <main+0x2d0>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
      break;
 800566c:	e045      	b.n	80056fa <main+0x29a>
    case TX:
      // Indicates on a LED that we have sent a PING [Master]
      // Indicates on a LED that we have sent a PONG [Slave]
      //GpioWrite( &Led2, GpioRead( &Led2 ) ^ 1 );
      Radio.Rx( RX_TIMEOUT_VALUE );
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <main+0x2a0>)
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005676:	4798      	blx	r3
      State = LOWPOWER;
 8005678:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <main+0x2d0>)
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
      break;
 800567e:	e03c      	b.n	80056fa <main+0x29a>
    case RX_TIMEOUT:
    case RX_ERROR:
      if( isMaster == true )
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d026      	beq.n	80056d4 <main+0x274>
      {
        // Send the next PING frame
        Buffer[0] = 'P';
 8005686:	4b2d      	ldr	r3, [pc, #180]	; (800573c <main+0x2dc>)
 8005688:	2250      	movs	r2, #80	; 0x50
 800568a:	701a      	strb	r2, [r3, #0]
        Buffer[1] = 'I';
 800568c:	4b2b      	ldr	r3, [pc, #172]	; (800573c <main+0x2dc>)
 800568e:	2249      	movs	r2, #73	; 0x49
 8005690:	705a      	strb	r2, [r3, #1]
        Buffer[2] = 'N';
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <main+0x2dc>)
 8005694:	224e      	movs	r2, #78	; 0x4e
 8005696:	709a      	strb	r2, [r3, #2]
        Buffer[3] = 'G';
 8005698:	4b28      	ldr	r3, [pc, #160]	; (800573c <main+0x2dc>)
 800569a:	2247      	movs	r2, #71	; 0x47
 800569c:	70da      	strb	r2, [r3, #3]
        for( i = 4; i < BufferSize; i++ )
 800569e:	2304      	movs	r3, #4
 80056a0:	71bb      	strb	r3, [r7, #6]
 80056a2:	e008      	b.n	80056b6 <main+0x256>
        {
          Buffer[i] = i - 4;
 80056a4:	79bb      	ldrb	r3, [r7, #6]
 80056a6:	79ba      	ldrb	r2, [r7, #6]
 80056a8:	3a04      	subs	r2, #4
 80056aa:	b2d1      	uxtb	r1, r2
 80056ac:	4a23      	ldr	r2, [pc, #140]	; (800573c <main+0x2dc>)
 80056ae:	54d1      	strb	r1, [r2, r3]
        for( i = 4; i < BufferSize; i++ )
 80056b0:	79bb      	ldrb	r3, [r7, #6]
 80056b2:	3301      	adds	r3, #1
 80056b4:	71bb      	strb	r3, [r7, #6]
 80056b6:	79bb      	ldrb	r3, [r7, #6]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <main+0x2d4>)
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3f0      	bcc.n	80056a4 <main+0x244>
        }
//        DelayMs( 1 );
        Radio.Send( Buffer, BufferSize );
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <main+0x2a0>)
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <main+0x2d4>)
 80056c8:	8812      	ldrh	r2, [r2, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	4611      	mov	r1, r2
 80056ce:	481b      	ldr	r0, [pc, #108]	; (800573c <main+0x2dc>)
 80056d0:	4798      	blx	r3
 80056d2:	e004      	b.n	80056de <main+0x27e>
      }
      else
      {
        Radio.Rx( RX_TIMEOUT_VALUE );
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <main+0x2a0>)
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056dc:	4798      	blx	r3
      }
      State = LOWPOWER;
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <main+0x2d0>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
      break;
 80056e4:	e009      	b.n	80056fa <main+0x29a>
    case TX_TIMEOUT:
      Radio.Rx( RX_TIMEOUT_VALUE );
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <main+0x2a0>)
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056ee:	4798      	blx	r3
      State = LOWPOWER;
 80056f0:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <main+0x2d0>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
      break;
 80056f6:	e000      	b.n	80056fa <main+0x29a>
    case LOWPOWER:
      default:
            // Set low power
      break;
 80056f8:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80056fa:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 80056fc:	b662      	cpsie	i
    switch( State )
 80056fe:	e716      	b.n	800552e <main+0xce>
 8005700:	08005fa0 	.word	0x08005fa0
 8005704:	20000274 	.word	0x20000274
 8005708:	08005745 	.word	0x08005745
 800570c:	08005761 	.word	0x08005761
 8005710:	080057c9 	.word	0x080057c9
 8005714:	080057e5 	.word	0x080057e5
 8005718:	08005801 	.word	0x08005801
 800571c:	33bca100 	.word	0x33bca100
 8005720:	002dc6c0 	.word	0x002dc6c0
 8005724:	20000384 	.word	0x20000384
 8005728:	08005e9c 	.word	0x08005e9c
 800572c:	20000474 	.word	0x20000474
 8005730:	2000003a 	.word	0x2000003a
 8005734:	20000038 	.word	0x20000038
 8005738:	0800600c 	.word	0x0800600c
 800573c:	20000344 	.word	0x20000344
 8005740:	08006004 	.word	0x08006004

08005744 <OnTxDone>:

  }
}

void OnTxDone( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <OnTxDone+0x14>)
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	4798      	blx	r3
    State = TX;
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <OnTxDone+0x18>)
 8005750:	2204      	movs	r2, #4
 8005752:	701a      	strb	r2, [r3, #0]
//    PRINTF("OnTxDone\n");
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08005fa0 	.word	0x08005fa0
 800575c:	2000003a 	.word	0x2000003a

08005760 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	4608      	mov	r0, r1
 800576a:	4611      	mov	r1, r2
 800576c:	461a      	mov	r2, r3
 800576e:	4603      	mov	r3, r0
 8005770:	817b      	strh	r3, [r7, #10]
 8005772:	460b      	mov	r3, r1
 8005774:	813b      	strh	r3, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
    Radio.Sleep( );
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <OnRxDone+0x50>)
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	4798      	blx	r3
    BufferSize = size;
 8005780:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <OnRxDone+0x54>)
 8005782:	897b      	ldrh	r3, [r7, #10]
 8005784:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <OnRxDone+0x54>)
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	68f9      	ldr	r1, [r7, #12]
 800578e:	480a      	ldr	r0, [pc, #40]	; (80057b8 <OnRxDone+0x58>)
 8005790:	f000 fa04 	bl	8005b9c <memcpy>
    RssiValue = rssi;
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	b25a      	sxtb	r2, r3
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <OnRxDone+0x5c>)
 800579a:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 800579c:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <OnRxDone+0x60>)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	7013      	strb	r3, [r2, #0]
    State = RX;
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <OnRxDone+0x64>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]

//    PRINTF("OnRxDone\n");
//    PRINTF("RssiValue=%d dBm, SnrValue=%d\n", rssi, snr);
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	08005fa0 	.word	0x08005fa0
 80057b4:	20000038 	.word	0x20000038
 80057b8:	20000344 	.word	0x20000344
 80057bc:	20000270 	.word	0x20000270
 80057c0:	20000271 	.word	0x20000271
 80057c4:	2000003a 	.word	0x2000003a

080057c8 <OnTxTimeout>:

void OnTxTimeout( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <OnTxTimeout+0x14>)
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	4798      	blx	r3
    State = TX_TIMEOUT;
 80057d2:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <OnTxTimeout+0x18>)
 80057d4:	2205      	movs	r2, #5
 80057d6:	701a      	strb	r2, [r3, #0]

//    PRINTF("OnTxTimeout\n");
}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	08005fa0 	.word	0x08005fa0
 80057e0:	2000003a 	.word	0x2000003a

080057e4 <OnRxTimeout>:

void OnRxTimeout( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <OnRxTimeout+0x14>)
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	4798      	blx	r3
    State = RX_TIMEOUT;
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <OnRxTimeout+0x18>)
 80057f0:	2202      	movs	r2, #2
 80057f2:	701a      	strb	r2, [r3, #0]
//    PRINTF("OnRxTimeout\n");
}
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	08005fa0 	.word	0x08005fa0
 80057fc:	2000003a 	.word	0x2000003a

08005800 <OnRxError>:

void OnRxError( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <OnRxError+0x14>)
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	4798      	blx	r3
    State = RX_ERROR;
 800580a:	4b03      	ldr	r3, [pc, #12]	; (8005818 <OnRxError+0x18>)
 800580c:	2203      	movs	r2, #3
 800580e:	701a      	strb	r2, [r3, #0]
//    PRINTF("OnRxError\n");
}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	08005fa0 	.word	0x08005fa0
 8005818:	2000003a 	.word	0x2000003a

0800581c <SystemClock_Config>:
 *            Main regulator output voltage  = Scale2 mode
 *            Flash Latency(WS)              = 2
 * @param  None
 * @retval None
 */
void SystemClock_Config(void) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b094      	sub	sp, #80	; 0x50
 8005820:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <SystemClock_Config+0x9c>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <SystemClock_Config+0x9c>)
 800582c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005830:	6413      	str	r3, [r2, #64]	; 0x40
 8005832:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <SystemClock_Config+0x9c>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <SystemClock_Config+0xa0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800584a:	4a1c      	ldr	r2, [pc, #112]	; (80058bc <SystemClock_Config+0xa0>)
 800584c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <SystemClock_Config+0xa0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800585e:	2302      	movs	r3, #2
 8005860:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005862:	2301      	movs	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8005866:	2310      	movs	r3, #16
 8005868:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800586a:	2302      	movs	r3, #2
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800586e:	2300      	movs	r3, #0
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 16;
 8005872:	2310      	movs	r3, #16
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8005876:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800587c:	2304      	movs	r3, #4
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8005880:	2307      	movs	r3, #7
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005884:	f107 030c 	add.w	r3, r7, #12
 8005888:	4618      	mov	r0, r3
 800588a:	f7fb fdbb 	bl	8001404 <HAL_RCC_OscConfig>
		//Error_Handler();
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800588e:	230f      	movs	r3, #15
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005892:	2302      	movs	r3, #2
 8005894:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005896:	2300      	movs	r3, #0
 8005898:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800589a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058a0:	2300      	movs	r3, #0
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80058a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058a8:	2102      	movs	r1, #2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fb ffec 	bl	8001888 <HAL_RCC_ClockConfig>
		//Error_Handler();
	}
}
 80058b0:	bf00      	nop
 80058b2:	3750      	adds	r7, #80	; 0x50
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40007000 	.word	0x40007000

080058c0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <HAL_MspInit+0x4c>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	4a0f      	ldr	r2, [pc, #60]	; (800590c <HAL_MspInit+0x4c>)
 80058d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d4:	6453      	str	r3, [r2, #68]	; 0x44
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <HAL_MspInit+0x4c>)
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <HAL_MspInit+0x4c>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <HAL_MspInit+0x4c>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_MspInit+0x4c>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]

}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800

08005910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <HAL_SPI_MspInit+0xa8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d13d      	bne.n	80059ae <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	4b21      	ldr	r3, [pc, #132]	; (80059bc <HAL_SPI_MspInit+0xac>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	4a20      	ldr	r2, [pc, #128]	; (80059bc <HAL_SPI_MspInit+0xac>)
 800593c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005940:	6413      	str	r3, [r2, #64]	; 0x40
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_SPI_MspInit+0xac>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <HAL_SPI_MspInit+0xac>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4a19      	ldr	r2, [pc, #100]	; (80059bc <HAL_SPI_MspInit+0xac>)
 8005958:	f043 0302 	orr.w	r3, r3, #2
 800595c:	6313      	str	r3, [r2, #48]	; 0x30
 800595e:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_SPI_MspInit+0xac>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800596a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800596e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005970:	2302      	movs	r3, #2
 8005972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005978:	2302      	movs	r3, #2
 800597a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800597c:	2305      	movs	r3, #5
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4619      	mov	r1, r3
 8005986:	480e      	ldr	r0, [pc, #56]	; (80059c0 <HAL_SPI_MspInit+0xb0>)
 8005988:	f7fb fba0 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800598c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005992:	2302      	movs	r3, #2
 8005994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005996:	2302      	movs	r3, #2
 8005998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800599a:	2302      	movs	r3, #2
 800599c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800599e:	2305      	movs	r3, #5
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	4619      	mov	r1, r3
 80059a8:	4805      	ldr	r0, [pc, #20]	; (80059c0 <HAL_SPI_MspInit+0xb0>)
 80059aa:	f7fb fb8f 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80059ae:	bf00      	nop
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40003800 	.word	0x40003800
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40020400 	.word	0x40020400

080059c4 <MSP_GetIRQn>:
  }

}

IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
  switch( GPIO_Pin )
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d025      	beq.n	8005a20 <MSP_GetIRQn+0x5c>
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	dc0b      	bgt.n	80059f0 <MSP_GetIRQn+0x2c>
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d01b      	beq.n	8005a14 <MSP_GetIRQn+0x50>
 80059dc:	2b02      	cmp	r3, #2
 80059de:	dc02      	bgt.n	80059e6 <MSP_GetIRQn+0x22>
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d015      	beq.n	8005a10 <MSP_GetIRQn+0x4c>
 80059e4:	e020      	b.n	8005a28 <MSP_GetIRQn+0x64>
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d016      	beq.n	8005a18 <MSP_GetIRQn+0x54>
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d016      	beq.n	8005a1c <MSP_GetIRQn+0x58>
 80059ee:	e01b      	b.n	8005a28 <MSP_GetIRQn+0x64>
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d017      	beq.n	8005a24 <MSP_GetIRQn+0x60>
 80059f4:	2b80      	cmp	r3, #128	; 0x80
 80059f6:	dc04      	bgt.n	8005a02 <MSP_GetIRQn+0x3e>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d013      	beq.n	8005a24 <MSP_GetIRQn+0x60>
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d011      	beq.n	8005a24 <MSP_GetIRQn+0x60>
 8005a00:	e012      	b.n	8005a28 <MSP_GetIRQn+0x64>
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	d00d      	beq.n	8005a24 <MSP_GetIRQn+0x60>
 8005a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0c:	d00a      	beq.n	8005a24 <MSP_GetIRQn+0x60>
 8005a0e:	e00b      	b.n	8005a28 <MSP_GetIRQn+0x64>
  {
    case GPIO_PIN_0:  return EXTI0_IRQn;
 8005a10:	2306      	movs	r3, #6
 8005a12:	e00a      	b.n	8005a2a <MSP_GetIRQn+0x66>
    case GPIO_PIN_1:  return EXTI1_IRQn;
 8005a14:	2307      	movs	r3, #7
 8005a16:	e008      	b.n	8005a2a <MSP_GetIRQn+0x66>
    case GPIO_PIN_2:  return EXTI2_IRQn;
 8005a18:	2308      	movs	r3, #8
 8005a1a:	e006      	b.n	8005a2a <MSP_GetIRQn+0x66>
    case GPIO_PIN_3:  return EXTI3_IRQn;
 8005a1c:	2309      	movs	r3, #9
 8005a1e:	e004      	b.n	8005a2a <MSP_GetIRQn+0x66>
    case GPIO_PIN_4:  return EXTI4_IRQn;
 8005a20:	230a      	movs	r3, #10
 8005a22:	e002      	b.n	8005a2a <MSP_GetIRQn+0x66>
    case GPIO_PIN_5:
    case GPIO_PIN_6:
    case GPIO_PIN_7:
    case GPIO_PIN_8:
    case GPIO_PIN_9:  return EXTI9_5_IRQn;
 8005a24:	2317      	movs	r3, #23
 8005a26:	e000      	b.n	8005a2a <MSP_GetIRQn+0x66>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
	default: return EXTI15_10_IRQn;
 8005a28:	2328      	movs	r3, #40	; 0x28
  }
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a36:	b480      	push	{r7}
 8005a38:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a48:	e7fe      	b.n	8005a48 <HardFault_Handler+0x4>

08005a4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a4e:	e7fe      	b.n	8005a4e <MemManage_Handler+0x4>

08005a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a54:	e7fe      	b.n	8005a54 <BusFault_Handler+0x4>

08005a56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a5a:	e7fe      	b.n	8005a5a <UsageFault_Handler+0x4>

08005a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a6e:	bf00      	nop
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a7c:	bf00      	nop
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a8a:	f7fb f9ed 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a98:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <SystemInit+0x60>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <SystemInit+0x60>)
 8005aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <SystemInit+0x64>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <SystemInit+0x64>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <SystemInit+0x64>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005aba:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <SystemInit+0x64>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <SystemInit+0x64>)
 8005ac0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <SystemInit+0x64>)
 8005acc:	4a0b      	ldr	r2, [pc, #44]	; (8005afc <SystemInit+0x68>)
 8005ace:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <SystemInit+0x64>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <SystemInit+0x64>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <SystemInit+0x64>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ae2:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <SystemInit+0x60>)
 8005ae4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ae8:	609a      	str	r2, [r3, #8]
#endif
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000ed00 	.word	0xe000ed00
 8005af8:	40023800 	.word	0x40023800
 8005afc:	24003010 	.word	0x24003010

08005b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b06:	e003      	b.n	8005b10 <LoopCopyDataInit>

08005b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b0e:	3104      	adds	r1, #4

08005b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b10:	480b      	ldr	r0, [pc, #44]	; (8005b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b18:	d3f6      	bcc.n	8005b08 <CopyDataInit>
  ldr  r2, =_sbss
 8005b1a:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b1c:	e002      	b.n	8005b24 <LoopFillZerobss>

08005b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b20:	f842 3b04 	str.w	r3, [r2], #4

08005b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b28:	d3f9      	bcc.n	8005b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b2a:	f7ff ffb3 	bl	8005a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b2e:	f000 f811 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b32:	f7ff fc95 	bl	8005460 <main>
  bx  lr    
 8005b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b38:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8005b3c:	08006034 	.word	0x08006034
  ldr  r0, =_sdata
 8005b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b44:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8005b48:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8005b4c:	200004cc 	.word	0x200004cc

08005b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b50:	e7fe      	b.n	8005b50 <ADC_IRQHandler>
	...

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4e0d      	ldr	r6, [pc, #52]	; (8005b8c <__libc_init_array+0x38>)
 8005b58:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5a:	1ba4      	subs	r4, r4, r6
 8005b5c:	10a4      	asrs	r4, r4, #2
 8005b5e:	2500      	movs	r5, #0
 8005b60:	42a5      	cmp	r5, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	4e0b      	ldr	r6, [pc, #44]	; (8005b94 <__libc_init_array+0x40>)
 8005b66:	4c0c      	ldr	r4, [pc, #48]	; (8005b98 <__libc_init_array+0x44>)
 8005b68:	f000 f98c 	bl	8005e84 <_init>
 8005b6c:	1ba4      	subs	r4, r4, r6
 8005b6e:	10a4      	asrs	r4, r4, #2
 8005b70:	2500      	movs	r5, #0
 8005b72:	42a5      	cmp	r5, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b7c:	4798      	blx	r3
 8005b7e:	3501      	adds	r5, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b86:	4798      	blx	r3
 8005b88:	3501      	adds	r5, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	0800602c 	.word	0x0800602c
 8005b90:	0800602c 	.word	0x0800602c
 8005b94:	0800602c 	.word	0x0800602c
 8005b98:	08006030 	.word	0x08006030

08005b9c <memcpy>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	1e43      	subs	r3, r0, #1
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	d100      	bne.n	8005ba8 <memcpy+0xc>
 8005ba6:	bd10      	pop	{r4, pc}
 8005ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb0:	e7f7      	b.n	8005ba2 <memcpy+0x6>

08005bb2 <memset>:
 8005bb2:	4402      	add	r2, r0
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d100      	bne.n	8005bbc <memset+0xa>
 8005bba:	4770      	bx	lr
 8005bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc0:	e7f9      	b.n	8005bb6 <memset+0x4>

08005bc2 <strncmp>:
 8005bc2:	b510      	push	{r4, lr}
 8005bc4:	b16a      	cbz	r2, 8005be2 <strncmp+0x20>
 8005bc6:	3901      	subs	r1, #1
 8005bc8:	1884      	adds	r4, r0, r2
 8005bca:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005bce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d103      	bne.n	8005bde <strncmp+0x1c>
 8005bd6:	42a0      	cmp	r0, r4
 8005bd8:	d001      	beq.n	8005bde <strncmp+0x1c>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f5      	bne.n	8005bca <strncmp+0x8>
 8005bde:	1a98      	subs	r0, r3, r2
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	4610      	mov	r0, r2
 8005be4:	e7fc      	b.n	8005be0 <strncmp+0x1e>
	...

08005be8 <ceil>:
 8005be8:	ec51 0b10 	vmov	r0, r1, d0
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005bf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005bf8:	2e13      	cmp	r6, #19
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	ee10 5a10 	vmov	r5, s0
 8005c00:	4680      	mov	r8, r0
 8005c02:	dc30      	bgt.n	8005c66 <ceil+0x7e>
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	da12      	bge.n	8005c2e <ceil+0x46>
 8005c08:	a333      	add	r3, pc, #204	; (adr r3, 8005cd8 <ceil+0xf0>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f7fa fae9 	bl	80001e4 <__adddf3>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	f7fa ff2b 	bl	8000a70 <__aeabi_dcmpgt>
 8005c1a:	b128      	cbz	r0, 8005c28 <ceil+0x40>
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	db55      	blt.n	8005ccc <ceil+0xe4>
 8005c20:	432c      	orrs	r4, r5
 8005c22:	d057      	beq.n	8005cd4 <ceil+0xec>
 8005c24:	4c2e      	ldr	r4, [pc, #184]	; (8005ce0 <ceil+0xf8>)
 8005c26:	2500      	movs	r5, #0
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	e025      	b.n	8005c7a <ceil+0x92>
 8005c2e:	4f2d      	ldr	r7, [pc, #180]	; (8005ce4 <ceil+0xfc>)
 8005c30:	4137      	asrs	r7, r6
 8005c32:	ea01 0307 	and.w	r3, r1, r7
 8005c36:	4303      	orrs	r3, r0
 8005c38:	d01f      	beq.n	8005c7a <ceil+0x92>
 8005c3a:	a327      	add	r3, pc, #156	; (adr r3, 8005cd8 <ceil+0xf0>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fad0 	bl	80001e4 <__adddf3>
 8005c44:	2200      	movs	r2, #0
 8005c46:	2300      	movs	r3, #0
 8005c48:	f7fa ff12 	bl	8000a70 <__aeabi_dcmpgt>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d0eb      	beq.n	8005c28 <ceil+0x40>
 8005c50:	2c00      	cmp	r4, #0
 8005c52:	bfc2      	ittt	gt
 8005c54:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005c58:	fa43 f606 	asrgt.w	r6, r3, r6
 8005c5c:	19a4      	addgt	r4, r4, r6
 8005c5e:	ea24 0407 	bic.w	r4, r4, r7
 8005c62:	2500      	movs	r5, #0
 8005c64:	e7e0      	b.n	8005c28 <ceil+0x40>
 8005c66:	2e33      	cmp	r6, #51	; 0x33
 8005c68:	dd0b      	ble.n	8005c82 <ceil+0x9a>
 8005c6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005c6e:	d104      	bne.n	8005c7a <ceil+0x92>
 8005c70:	ee10 2a10 	vmov	r2, s0
 8005c74:	460b      	mov	r3, r1
 8005c76:	f7fa fab5 	bl	80001e4 <__adddf3>
 8005c7a:	ec41 0b10 	vmov	d0, r0, r1
 8005c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c82:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	fa23 f707 	lsr.w	r7, r3, r7
 8005c8e:	4207      	tst	r7, r0
 8005c90:	d0f3      	beq.n	8005c7a <ceil+0x92>
 8005c92:	a311      	add	r3, pc, #68	; (adr r3, 8005cd8 <ceil+0xf0>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f7fa faa4 	bl	80001e4 <__adddf3>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f7fa fee6 	bl	8000a70 <__aeabi_dcmpgt>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d0bf      	beq.n	8005c28 <ceil+0x40>
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	dd02      	ble.n	8005cb2 <ceil+0xca>
 8005cac:	2e14      	cmp	r6, #20
 8005cae:	d103      	bne.n	8005cb8 <ceil+0xd0>
 8005cb0:	3401      	adds	r4, #1
 8005cb2:	ea25 0507 	bic.w	r5, r5, r7
 8005cb6:	e7b7      	b.n	8005c28 <ceil+0x40>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005cbe:	fa03 f606 	lsl.w	r6, r3, r6
 8005cc2:	4435      	add	r5, r6
 8005cc4:	4545      	cmp	r5, r8
 8005cc6:	bf38      	it	cc
 8005cc8:	18e4      	addcc	r4, r4, r3
 8005cca:	e7f2      	b.n	8005cb2 <ceil+0xca>
 8005ccc:	2500      	movs	r5, #0
 8005cce:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005cd2:	e7a9      	b.n	8005c28 <ceil+0x40>
 8005cd4:	4625      	mov	r5, r4
 8005cd6:	e7a7      	b.n	8005c28 <ceil+0x40>
 8005cd8:	8800759c 	.word	0x8800759c
 8005cdc:	7e37e43c 	.word	0x7e37e43c
 8005ce0:	3ff00000 	.word	0x3ff00000
 8005ce4:	000fffff 	.word	0x000fffff

08005ce8 <floor>:
 8005ce8:	ec51 0b10 	vmov	r0, r1, d0
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005cf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005cf8:	2e13      	cmp	r6, #19
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	ee10 5a10 	vmov	r5, s0
 8005d00:	4680      	mov	r8, r0
 8005d02:	dc34      	bgt.n	8005d6e <floor+0x86>
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	da16      	bge.n	8005d36 <floor+0x4e>
 8005d08:	a335      	add	r3, pc, #212	; (adr r3, 8005de0 <floor+0xf8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fa69 	bl	80001e4 <__adddf3>
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	f7fa feab 	bl	8000a70 <__aeabi_dcmpgt>
 8005d1a:	b148      	cbz	r0, 8005d30 <floor+0x48>
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	da59      	bge.n	8005dd4 <floor+0xec>
 8005d20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d24:	4a30      	ldr	r2, [pc, #192]	; (8005de8 <floor+0x100>)
 8005d26:	432b      	orrs	r3, r5
 8005d28:	2500      	movs	r5, #0
 8005d2a:	42ab      	cmp	r3, r5
 8005d2c:	bf18      	it	ne
 8005d2e:	4614      	movne	r4, r2
 8005d30:	4621      	mov	r1, r4
 8005d32:	4628      	mov	r0, r5
 8005d34:	e025      	b.n	8005d82 <floor+0x9a>
 8005d36:	4f2d      	ldr	r7, [pc, #180]	; (8005dec <floor+0x104>)
 8005d38:	4137      	asrs	r7, r6
 8005d3a:	ea01 0307 	and.w	r3, r1, r7
 8005d3e:	4303      	orrs	r3, r0
 8005d40:	d01f      	beq.n	8005d82 <floor+0x9a>
 8005d42:	a327      	add	r3, pc, #156	; (adr r3, 8005de0 <floor+0xf8>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f7fa fa4c 	bl	80001e4 <__adddf3>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f7fa fe8e 	bl	8000a70 <__aeabi_dcmpgt>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d0eb      	beq.n	8005d30 <floor+0x48>
 8005d58:	2c00      	cmp	r4, #0
 8005d5a:	bfbe      	ittt	lt
 8005d5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005d60:	fa43 f606 	asrlt.w	r6, r3, r6
 8005d64:	19a4      	addlt	r4, r4, r6
 8005d66:	ea24 0407 	bic.w	r4, r4, r7
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	e7e0      	b.n	8005d30 <floor+0x48>
 8005d6e:	2e33      	cmp	r6, #51	; 0x33
 8005d70:	dd0b      	ble.n	8005d8a <floor+0xa2>
 8005d72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d76:	d104      	bne.n	8005d82 <floor+0x9a>
 8005d78:	ee10 2a10 	vmov	r2, s0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	f7fa fa31 	bl	80001e4 <__adddf3>
 8005d82:	ec41 0b10 	vmov	d0, r0, r1
 8005d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d92:	fa23 f707 	lsr.w	r7, r3, r7
 8005d96:	4207      	tst	r7, r0
 8005d98:	d0f3      	beq.n	8005d82 <floor+0x9a>
 8005d9a:	a311      	add	r3, pc, #68	; (adr r3, 8005de0 <floor+0xf8>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa fa20 	bl	80001e4 <__adddf3>
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	f7fa fe62 	bl	8000a70 <__aeabi_dcmpgt>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d0bf      	beq.n	8005d30 <floor+0x48>
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	da02      	bge.n	8005dba <floor+0xd2>
 8005db4:	2e14      	cmp	r6, #20
 8005db6:	d103      	bne.n	8005dc0 <floor+0xd8>
 8005db8:	3401      	adds	r4, #1
 8005dba:	ea25 0507 	bic.w	r5, r5, r7
 8005dbe:	e7b7      	b.n	8005d30 <floor+0x48>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005dc6:	fa03 f606 	lsl.w	r6, r3, r6
 8005dca:	4435      	add	r5, r6
 8005dcc:	4545      	cmp	r5, r8
 8005dce:	bf38      	it	cc
 8005dd0:	18e4      	addcc	r4, r4, r3
 8005dd2:	e7f2      	b.n	8005dba <floor+0xd2>
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	462c      	mov	r4, r5
 8005dd8:	e7aa      	b.n	8005d30 <floor+0x48>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	8800759c 	.word	0x8800759c
 8005de4:	7e37e43c 	.word	0x7e37e43c
 8005de8:	bff00000 	.word	0xbff00000
 8005dec:	000fffff 	.word	0x000fffff

08005df0 <round>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	ec57 6b10 	vmov	r6, r7, d0
 8005df6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8005dfa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8005dfe:	2c13      	cmp	r4, #19
 8005e00:	463b      	mov	r3, r7
 8005e02:	463d      	mov	r5, r7
 8005e04:	dc17      	bgt.n	8005e36 <round+0x46>
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	da09      	bge.n	8005e1e <round+0x2e>
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8005e10:	d103      	bne.n	8005e1a <round+0x2a>
 8005e12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	e02c      	b.n	8005e78 <round+0x88>
 8005e1e:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <round+0x90>)
 8005e20:	4122      	asrs	r2, r4
 8005e22:	4217      	tst	r7, r2
 8005e24:	d100      	bne.n	8005e28 <round+0x38>
 8005e26:	b19e      	cbz	r6, 8005e50 <round+0x60>
 8005e28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005e2c:	4123      	asrs	r3, r4
 8005e2e:	442b      	add	r3, r5
 8005e30:	ea23 0302 	bic.w	r3, r3, r2
 8005e34:	e7f1      	b.n	8005e1a <round+0x2a>
 8005e36:	2c33      	cmp	r4, #51	; 0x33
 8005e38:	dd0d      	ble.n	8005e56 <round+0x66>
 8005e3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005e3e:	d107      	bne.n	8005e50 <round+0x60>
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	ee10 2a10 	vmov	r2, s0
 8005e48:	f7fa f9cc 	bl	80001e4 <__adddf3>
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	ec47 6b10 	vmov	d0, r6, r7
 8005e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e56:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	40d0      	lsrs	r0, r2
 8005e60:	4206      	tst	r6, r0
 8005e62:	d0f5      	beq.n	8005e50 <round+0x60>
 8005e64:	2201      	movs	r2, #1
 8005e66:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8005e6a:	fa02 f404 	lsl.w	r4, r2, r4
 8005e6e:	1931      	adds	r1, r6, r4
 8005e70:	bf28      	it	cs
 8005e72:	189b      	addcs	r3, r3, r2
 8005e74:	ea21 0100 	bic.w	r1, r1, r0
 8005e78:	461f      	mov	r7, r3
 8005e7a:	460e      	mov	r6, r1
 8005e7c:	e7e8      	b.n	8005e50 <round+0x60>
 8005e7e:	bf00      	nop
 8005e80:	000fffff 	.word	0x000fffff

08005e84 <_init>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr

08005e90 <_fini>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr
